var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.468,1,0.876]],["body/components/AdminComponent.html",[0,0.753,1,1.33,2,1.513,3,0.34,4,0.297,5,1.954,6,1.158,7,1.158,8,1.158,9,0.282,10,2.099,11,0.433,12,2.05,13,3.652,14,3.201,15,1.844,16,1.158,17,2.534,18,1.299,19,1.667,20,4.279,21,1.667,22,3.652,23,0.385,24,1.038,25,4.279,26,4.96,27,3.249,28,0.943,29,3.652,30,3.873,31,3.022,32,1.001,33,2.537,34,3.249,35,1.126,36,3.652,37,0.695,38,0.038,39,0.627,40,0.71,41,0.695,42,3.652,43,2.537,44,3.873,45,1.095,46,1.513,47,1.811,48,1.208,49,1.612,50,2.537,51,2.297,52,2.006,53,3.652,54,3.652,55,4.279,56,2.099,57,3.652,58,2.297,59,1.667,60,2.537,61,3.022,62,3.022,63,4.96,64,3.022,65,1.216,66,1.158,67,1.158,68,2.944,69,3.022,70,2.537,71,3.652,72,2.537,73,2.537,74,1.844,75,1.844,76,1.939,77,3.022,78,3.652,79,1.253,80,2.05,81,0.73,82,1.596,83,2.099,84,0.483,85,2.537,86,2.537,87,2.537,88,0.34,89,0.159,90,1.811,91,1.281,92,0.87,93,0.721,94,2.537,95,2.537,96,1.513,97,3.541,98,2.537,99,1.667,100,1.596,101,1.811,102,2.099,103,2.537,104,2.607,105,1.844,106,1.811,107,1.158,108,2.537,109,2.537,110,2.607,111,2.099,112,2.099,113,0.87,114,2.537,115,2.537,116,2.297,117,3.652,118,3.652,119,2.297,120,3.652,121,3.022,122,3.652,123,2.607,124,2.537,125,2.537,126,3.022,127,2.537,128,1.596,129,2.537,130,2.537,131,2.297,132,2.537,133,2.099,134,2.537,135,3.652,136,5.165,137,4.279,138,2.537,139,2.537,140,2.537,141,2.537,142,2.537,143,2.099,144,0.956,145,1.667,146,1.158,147,2.137,148,1.158,149,1.158,150,0.792,151,1.158,152,0.721,153,1.158,154,0.721,155,0.655,156,1.158,157,0.792,158,1.158,159,0.721,160,1.158,161,0.792,162,1.051,163,1.158,164,1.158,165,0.015,166,0.021,167,0.015]],["title/injectables/AdminService.html",[34,1.94,168,1.058]],["body/injectables/AdminService.html",[3,0.347,4,0.303,9,0.335,11,0.441,12,2.079,14,2.919,15,1.87,23,0.393,24,1.052,27,2.971,28,0.956,32,1.012,34,2.33,35,1.179,37,0.952,38,0.038,39,0.67,40,0.759,41,0.952,44,3.58,45,1.17,46,1.535,47,3.089,48,1.342,49,0.975,52,1.78,59,1.691,65,1.521,66,1.691,67,2.282,69,2.141,74,1.87,79,1.912,80,2.079,81,0.852,84,0.493,88,0.347,89,0.112,92,0.887,93,1.607,96,2.31,113,1.484,123,2.644,133,2.141,165,0.015,166,0.022,167,0.015,168,1.27,169,1.452,170,2.141,171,2.33,172,3.704,173,3.704,174,4.998,175,3.704,176,3.908,177,4.723,178,3.704,179,3.704,180,1.628,181,2.971,182,2.587,183,1.691,184,3.704,185,4.723,186,2.587,187,3.704,188,3.704,189,2.644,190,2.644,191,3.704,192,3.704,193,2.587,194,2.644,195,2.587,196,1.957,197,3.704,198,1.452,199,3.704,200,2.587,201,3.704,202,2.33,203,3.704,204,1.975,205,3.704,206,2.587,207,2.079,208,3.704,209,3.704,210,2.587,211,3.704,212,2.587,213,3.065,214,2.644,215,2.587,216,2.587,217,2.644,218,2.587,219,1.452,220,1.306,221,1.628,222,2.587,223,1.628,224,1.306,225,2.644,226,1.306,227,1.306,228,1.452,229,1.306,230,3.704,231,3.704,232,3.704,233,1.396,234,2.587,235,2.587,236,2.141,237,2.587,238,2.33,239,3.704,240,2.587,241,1.847,242,1.052,243,1.628,244,2.587,245,1.847,246,2.587,247,2.587,248,2.587,249,2.587,250,2.587,251,2.587,252,2.587,253,3.089,254,2.587,255,2.587,256,4.723,257,2.587,258,2.587,259,2.587,260,2.141,261,3.704,262,2.587,263,2.587,264,2.587,265,3.704,266,2.587,267,2.587,268,2.587]],["title/components/AppComponent.html",[0,0.468,150,0.963]],["body/components/AppComponent.html",[0,0.879,1,1.141,2,2.059,3,0.538,4,0.47,5,1.833,6,1.833,7,1.833,8,1.833,9,0.229,11,0.685,16,1.833,17,2.783,18,1.443,19,2.268,21,2.268,38,0.037,39,0.666,76,2.059,81,0.685,84,0.764,88,0.538,89,0.174,144,1.513,145,2.268,146,1.833,147,2.574,148,1.833,149,1.833,150,1.761,151,1.833,152,1.141,153,1.833,154,1.141,155,1.036,156,1.833,157,1.254,158,1.833,159,1.141,160,1.833,161,1.254,162,1.663,163,1.833,164,1.833,165,0.024,166,0.029,167,0.024,229,2.847,269,3.322,270,5.395,271,4.968,272,4.111]],["title/modules/AppModule.html",[273,1.557,274,1.94]],["body/modules/AppModule.html",[1,1.608,3,0.458,4,0.4,9,0.194,18,0.799,38,0.038,81,1.044,84,0.65,88,0.458,89,0.148,144,1.287,150,1.892,152,1.608,154,1.608,157,1.767,159,1.608,161,1.767,165,0.02,166,0.026,167,0.02,219,1.917,273,1.725,274,3.943,275,1.415,276,2.149,277,4.14,278,4.14,279,2.826,280,2.149,281,2.826,282,2.826,283,2.826,284,2.826,285,3.177,286,3.177,287,3.709,288,1.917,289,1.917,290,3.416,291,3.2,292,4.482,293,3.709,294,2.149,295,3.2,296,4.482,297,4.482,298,2.826,299,4.482,300,3.416,301,3.416,302,2.826,303,3.416,304,2.826,305,2.826,306,2.149,307,2.826,308,3.416,309,2.826,310,3.416,311,2.826]],["title/modules/AppRoutingModule.html",[273,1.557,285,1.731]],["body/modules/AppRoutingModule.html",[0,0.852,1,1.402,3,0.532,4,0.465,9,0.226,14,2.229,38,0.038,81,1.018,84,0.756,88,0.532,89,0.172,113,1.362,152,1.402,154,1.402,155,1.025,159,1.402,165,0.023,166,0.029,167,0.023,275,1.645,280,2.498,285,2.77,291,2.835,295,3.523,302,3.286,304,3.286,305,3.286,306,2.498,307,3.286,311,3.286,312,3.971,313,3.971,314,4.935,315,2.711,316,2.229,317,3.377,318,3.971,319,4.872,320,4.084,321,4.443,322,3.286,323,4.935,324,4.935,325,4.935,326,3.971]],["title/components/GameComponent.html",[0,0.468,152,0.876]],["body/components/GameComponent.html",[0,0.605,1,0.443,2,1.043,3,0.209,4,0.183,5,0.712,6,0.712,7,0.712,8,0.712,9,0.089,11,0.429,12,2.038,16,0.712,17,2.199,18,1.127,19,1.149,21,1.149,23,0.646,24,0.715,28,0.65,32,0.74,35,1.217,37,0.479,38,0.038,39,0.487,40,0.731,41,0.479,45,1.206,48,1.276,49,1.814,51,2.68,52,1.757,56,1.29,58,1.583,59,2.199,65,0.899,66,1.945,67,1.945,75,1.271,76,1.043,79,1.599,81,0.795,82,1.99,83,1.29,84,0.297,88,0.209,89,0.068,91,1.271,92,0.535,93,0.715,100,1.583,104,1.797,105,1.271,144,0.588,145,1.149,146,0.712,147,1.658,148,0.712,149,0.712,150,0.487,151,0.712,152,1.032,153,0.712,154,0.443,155,1.388,156,0.712,157,0.487,158,0.712,159,0.443,160,0.712,161,1.134,162,2.134,163,0.712,164,0.712,165,0.023,166,0.015,167,0.009,190,1.797,196,1.932,207,1.413,227,1.597,233,1.814,288,0.875,309,1.29,316,0.875,322,3.525,327,1.29,328,1.797,329,1.658,330,2.516,331,1.413,332,3.164,333,3.164,334,2.516,335,3.164,336,4.259,337,2.259,338,2.259,339,2.515,340,2.618,341,3.164,342,1.757,343,3.005,344,3.631,345,3.631,346,2.592,347,2.516,348,3.631,349,3.984,350,3.631,351,3.199,352,1.29,353,2.391,354,2.515,355,1.857,356,2.516,357,1.559,358,1.413,359,2.082,360,2.516,361,1.583,362,1.559,363,1.797,364,1.559,365,3.631,366,2.592,367,1.441,368,1.797,369,2.082,370,2.516,371,2.516,372,2.082,373,2.516,374,2.082,375,2.516,376,3.631,377,2.284,378,2.516,379,1.559,380,2.082,381,1.559,382,2.516,383,2.082,384,2.516,385,2.082,386,1.149,387,1.271,388,2.516,389,1.559,390,1.504,391,3.005,392,1.311,393,1.559,394,3.341,395,3.041,396,2.516,397,2.516,398,2.284,399,1.583,400,1.559,401,2.516,402,1.583,403,1.797,404,2.516,405,1.504,406,1.413,407,2.516,408,1.413,409,2.082,410,2.082,411,2.082,412,2.516,413,2.592,414,1.559,415,2.082,416,1.797,417,1.559,418,1.765,419,1.559,420,1.583,421,3.296,422,2.516,423,2.082,424,2.516,425,1.559,426,1.583,427,1.559,428,1.559,429,3.029,430,1.559,431,1.559,432,2.082,433,3.005,434,2.516,435,2.516,436,2.082,437,1.559,438,2.082,439,1.559,440,1.583,441,2.082,442,1.559,443,0.948,444,1.583,445,1.271,446,2.516,447,1.559,448,2.516,449,2.592,450,1.797,451,1.797,452,1.113,453,1.29,454,0.981,455,0.981,456,3.631,457,3.164,458,1.29,459,2.082,460,1.29,461,1.559,462,1.559,463,1.559,464,2.516,465,3.164,466,0.981,467,2.516,468,3.164,469,3.296,470,1.271,471,1.113,472,2.516,473,1.776,474,3.164,475,3.631,476,1.29,477,1.559,478,1.559,479,0.981,480,1.29,481,1.559,482,1.559,483,2.516,484,3.164,485,1.559,486,1.559,487,0.981,488,1.113,489,2.082,490,1.559,491,0.875,492,3.005,493,3.164,494,4.259,495,1.559,496,3.164,497,1.559,498,0.981,499,1.559,500,1.29,501,1.559,502,1.113]],["title/components/GameOverComponent.html",[0,0.468,154,0.876]],["body/components/GameOverComponent.html",[0,0.77,1,0.766,2,1.58,3,0.361,4,0.316,5,1.231,6,1.231,7,1.231,8,1.231,9,0.153,11,0.46,12,2.14,16,1.231,17,2.57,18,1.317,19,1.741,21,1.741,23,0.409,24,1.083,28,0.984,32,1.036,35,1.074,37,0.513,38,0.038,39,0.68,40,0.672,41,0.513,46,1.58,48,0.984,49,1.016,52,1.667,59,1.231,65,0.766,76,1.58,81,0.755,82,2.784,84,0.513,88,0.361,89,0.117,92,0.924,93,0.766,113,1.65,144,1.016,145,1.741,146,1.231,147,2.197,148,1.231,149,1.231,150,0.842,151,1.231,152,0.766,153,1.231,154,1.367,155,1.504,156,1.231,157,0.842,158,1.231,159,0.766,160,1.231,161,0.842,162,1.117,163,1.231,164,1.231,165,0.016,166,0.022,167,0.031,189,2.722,196,1.58,198,2.14,233,1.016,289,1.513,294,2.399,306,3.316,329,1.741,331,2.14,339,2.14,342,2.214,346,3.435,355,2.245,361,3.026,405,1.993,418,1.58,443,1.437,444,2.399,445,1.925,454,1.695,455,1.695,458,2.23,471,1.924,479,3.026,487,1.695,488,1.924,489,2.23,502,2.722,503,4.362,504,2.23,505,3.813,506,3.813,507,4.425,508,3.813,509,5.419,510,5.271,511,2.23,512,3.813,513,2.695,514,3.813,515,2.722,516,3.813,517,3.813,518,2.695,519,3.813,520,3.813,521,2.399,522,2.695,523,5.629,524,4.425,525,4.425,526,4.425,527,3.813,528,3.813,529,2.695,530,2.695,531,2.23,532,2.23,533,2.695,534,2.695,535,2.695,536,2.722,537,3.813,538,3.813,539,3.813,540,3.813,541,3.813,542,3.813]],["title/modules/MaterialModule.html",[273,1.557,286,1.731]],["body/modules/MaterialModule.html",[3,0.551,4,0.482,9,0.234,11,0.701,38,0.038,64,4.173,81,1.043,84,0.783,88,0.551,89,0.179,113,1.41,165,0.024,166,0.03,167,0.024,273,2.546,275,2.417,280,2.587,286,2.83,291,2.936,295,3.6,543,2.936,544,4.513,545,4.173,546,4.112,547,4.173,548,4.112,549,4.173,550,4.112,551,4.173,552,4.112,553,4.173,554,4.112,555,4.173,556,4.112,557,4.173,558,4.112,559,3.403,560,4.173,561,4.112,562,2.936]],["title/classes/Question.html",[89,0.134,367,0.796]],["body/classes/Question.html",[3,0.381,4,0.333,9,0.162,11,0.675,18,0.665,23,0.431,24,1.124,28,0.734,32,0.665,35,1.041,37,0.541,38,0.038,39,0.381,40,0.747,41,0.541,45,1.212,58,2.864,65,1.704,79,1.357,81,0.675,88,0.381,89,0.198,91,2.299,93,1.124,99,1.807,113,1.979,119,1.788,165,0.017,166,0.023,167,0.017,233,1.071,242,0.807,328,2.029,329,1.297,367,1.596,387,1.435,390,1.887,392,1.177,416,2.825,429,2.489,443,1.071,470,1.998,473,1.595,491,2.556,563,1.595,564,3.696,565,2.029,566,2.221,567,2.489,568,3.529,569,2.216,570,3.584,571,2.351,572,2.841,573,2.825,574,3.251,575,3.251,576,3.251,577,2.864,578,2.841,579,2.841,580,2.841,581,2.351,582,2.825,583,1.788,584,2.351,585,1.788,586,1.788,587,2.351,588,2.351,589,1.595,590,1.788,591,2.351,592,2.299,593,3.275,594,2.029,595,2.029,596,2.029,597,2.351,598,1.788,599,2.489,600,2.351,601,2.351,602,2.351,603,2.351,604,2.351,605,2.351,606,2.351,607,2.351,608,2.351,609,2.351,610,2.029,611,2.351,612,2.825,613,2.351,614,2.029,615,2.351,616,3.275,617,2.351,618,3.275,619,3.251,620,2.351,621,2.351,622,2.351,623,2.351,624,2.351,625,2.351,626,2.351,627,2.351,628,2.351,629,2.351,630,3.275,631,3.275,632,2.351,633,2.351,634,2.351,635,3.275,636,2.351,637,2.351,638,2.351,639,2.351,640,2.351,641,1.595,642,2.029,643,2.029,644,2.029,645,1.788,646,2.029,647,2.351,648,2.351,649,2.351,650,2.351]],["title/classes/Question-1.html",[89,0.112,367,0.668,470,1.306]],["body/classes/Question-1.html",[3,0.518,4,0.453,9,0.22,11,0.828,23,0.587,24,1.379,32,1.136,35,1.177,37,0.736,38,0.037,39,0.518,40,0.844,41,0.736,65,1.751,88,0.518,89,0.168,165,0.023,166,0.028,167,0.023,367,1.624,491,2.977,563,2.17,566,2.17,567,2.432,568,3.809,569,2.281,570,3.809,571,3.199,573,3.465,574,3.787,575,3.787,576,3.787,577,3.337,651,3.199,652,3.866,653,3.866,654,3.866,655,3.866]],["title/classes/QuestionPreparer.html",[89,0.134,590,1.94]],["body/classes/QuestionPreparer.html",[3,0.376,4,0.329,9,0.16,11,0.478,18,0.918,23,0.426,28,1.264,35,0.956,37,0.861,38,0.038,39,0.606,40,0.686,41,0.861,45,1.283,48,0.724,49,1.057,58,3.574,65,1.635,79,1.831,81,0.669,88,0.376,89,0.213,91,2.696,93,1.114,99,1.791,113,1.974,119,2.845,165,0.016,166,0.023,167,0.016,233,1.057,242,0.797,328,2.8,329,1.791,367,1.527,387,1.416,390,2.029,392,1.162,416,3.496,429,2.467,443,1.057,470,1.98,473,1.575,491,2.538,563,1.575,564,3.496,565,2.003,566,1.575,567,1.765,568,2.467,569,2.065,570,2.845,573,2.003,574,2.003,575,2.003,576,2.003,577,1.765,581,2.321,582,2.8,583,1.765,584,2.321,585,1.765,586,1.765,587,2.321,588,4.052,589,2.202,590,2.467,591,3.246,592,2.696,593,4.052,594,2.8,595,2.8,596,2.8,597,3.246,598,1.765,599,2.467,600,2.321,601,2.321,602,2.321,603,2.321,604,2.321,605,2.321,606,2.321,607,2.321,608,2.321,609,2.321,610,2.003,611,2.321,612,2.8,613,2.321,614,2.003,615,2.321,616,3.246,617,2.321,618,3.246,619,3.679,620,2.321,621,2.321,622,2.321,623,2.321,624,3.246,625,3.246,626,3.246,627,2.321,628,2.321,629,2.321,630,3.246,631,3.246,632,3.246,633,3.742,634,3.246,635,3.246,636,2.321,637,2.321,638,2.321,639,2.321,640,2.321,641,1.575,642,2.003,643,2.003,644,2.003,645,1.765,646,2.003,647,2.321,648,2.321,649,2.321,650,2.321,656,3.922,657,3.922,658,2.805,659,2.805,660,2.805]],["title/injectables/QuestionService.html",[168,1.058,354,1.731]],["body/injectables/QuestionService.html",[3,0.427,4,0.373,9,0.181,11,0.544,15,2.162,23,0.484,24,1.216,28,1.105,32,1.131,35,1.093,37,0.815,38,0.038,39,0.574,40,0.818,41,0.815,45,1.002,46,1.774,48,1.105,74,2.162,79,1.093,81,0.967,84,0.607,88,0.427,89,0.21,92,1.093,93,1.468,96,1.774,113,1.468,165,0.019,166,0.025,167,0.019,168,1.468,169,1.789,171,2.693,180,2.005,181,3.251,183,1.955,196,1.774,204,2.461,214,2.276,217,2.276,219,1.789,220,1.61,221,2.005,223,2.005,224,1.61,226,1.61,227,1.61,228,1.789,229,1.61,238,3.251,241,3.689,242,0.906,243,3.041,343,4.276,354,2.403,355,2.349,363,3.056,367,1.392,390,1.774,392,1.774,406,2.403,418,2.3,452,2.276,566,2.403,596,3.056,661,2.638,662,2.693,663,4.834,664,4.281,665,4.281,666,4.281,667,5.167,668,3.188,669,2.693,670,4.281,671,3.543,672,3.188,673,3.188,674,3.543,675,4.281,676,3.188,677,2.638,678,3.188,679,3.188,680,3.188,681,4.281,682,3.188,683,5.167,684,3.188,685,4,686,3.188,687,3.188]],["title/components/QuestionsComponent.html",[0,0.468,157,0.963]],["body/components/QuestionsComponent.html",[0,0.776,1,0.634,2,1.378,3,0.299,4,0.261,5,1.019,6,1.019,7,1.019,8,1.019,9,0.127,11,0.381,16,1.019,17,2.452,18,1.257,19,1.518,21,1.518,23,0.749,24,0.945,28,0.859,32,0.93,35,1.156,37,0.757,38,0.038,39,0.631,40,0.776,41,0.757,45,1.155,47,3.144,48,1.026,49,1.497,51,2.77,65,0.945,68,2.092,75,2.224,76,1.378,81,0.842,84,0.425,88,0.299,89,0.097,92,0.766,93,0.634,99,1.019,100,2.962,101,3.752,110,3.362,113,0.766,126,1.847,131,1.404,144,0.841,145,1.518,146,1.019,147,2.011,148,1.019,149,1.019,150,0.697,151,1.019,152,0.634,153,1.019,154,0.634,155,0.576,156,1.019,157,1.375,158,1.019,159,0.634,160,1.019,161,0.697,162,0.925,163,1.019,164,1.019,165,0.026,166,0.02,167,0.013,196,1.825,198,1.867,207,1.867,220,1.127,227,1.127,233,0.841,242,0.945,329,1.518,331,1.867,337,3.651,338,3.362,339,1.867,340,3.897,354,2.771,358,1.253,367,1.387,377,2.092,390,2.353,391,3.644,392,1.951,394,2.77,399,1.404,418,1.951,432,2.752,436,2.752,438,2.752,452,1.594,453,1.847,469,2.752,492,1.847,569,1.774,570,2.092,612,1.594,619,2.374,671,1.847,688,1.847,689,3.974,690,3.974,691,3.974,692,3.326,693,4.404,694,3.326,695,2.752,696,3.326,697,2.752,698,3.974,699,2.232,700,3.326,701,2.232,702,2.232,703,2.232,704,2.232,705,3.289,706,2.232,707,3.326,708,2.232,709,3.326,710,3.326,711,1.867,712,3.326,713,3.326,714,3.326,715,4.404,716,2.232,717,2.752,718,3.974,719,3.326,720,2.232,721,2.752,722,3.326,723,3.326,724,3.326,725,3.326,726,2.092,727,3.289,728,2.374,729,2.374,730,3.289,731,3.974,732,2.232,733,1.847,734,2.232,735,2.232,736,2.232,737,3.326,738,2.232,739,3.326,740,3.326,741,2.232,742,2.232,743,1.253,744,2.232,745,2.232,746,2.232,747,2.232,748,2.232,749,2.232,750,2.232,751,2.232,752,2.232,753,2.232,754,3.326,755,2.232,756,2.232,757,2.232,758,2.232,759,2.232,760,2.232,761,2.232,762,2.232,763,2.232,764,2.232,765,2.232,766,3.326,767,2.232,768,3.326,769,3.326,770,2.232,771,2.232,772,1.847,773,2.232]],["title/guards/RegisterGuard.html",[317,1.94,774,1.94]],["body/guards/RegisterGuard.html",[3,0.515,4,0.45,9,0.219,11,0.656,23,0.584,28,1.249,32,1.238,35,1.023,37,0.732,38,0.037,39,0.515,40,0.584,41,0.732,48,0.993,52,2.092,59,1.756,79,1.319,81,0.902,84,0.732,88,0.515,89,0.167,92,1.319,93,1.374,155,1.433,165,0.023,166,0.028,167,0.023,168,1.659,196,2.004,198,2.715,228,2.159,229,1.942,233,1.449,316,2.159,317,3.043,320,4.833,331,2.159,353,3.328,355,2.42,361,3.043,387,2.442,408,2.715,440,3.043,455,2.419,476,4.003,488,2.746,498,2.419,511,3.183,774,3.043,775,3.183,776,3.183,777,4.837,778,4.837,779,4.837,780,3.846,781,4.003,782,3.846,783,4.837,784,4.003,785,3.846]],["title/components/SignupComponent.html",[0,0.468,159,0.876]],["body/components/SignupComponent.html",[0,0.672,1,0.55,2,1.238,3,0.26,4,0.227,5,0.885,6,0.885,7,0.885,8,0.885,9,0.11,11,0.33,12,1.676,16,0.885,17,2.356,18,1.208,19,1.364,21,1.364,23,0.294,24,0.849,28,0.771,30,3.389,32,0.853,35,1.092,37,0.369,38,0.037,39,0.653,40,0.453,41,0.369,45,0.959,48,1.057,49,1.543,51,2.941,52,1.543,59,2.224,66,1.87,67,1.87,76,1.238,79,1.024,81,0.755,82,2.293,84,0.369,88,0.26,89,0.084,92,0.665,107,2.297,121,2.472,128,1.879,143,3.389,144,0.73,145,1.364,146,0.885,147,1.87,148,0.885,149,0.885,150,0.605,151,0.885,152,0.55,153,0.885,154,0.55,155,1.385,156,0.885,157,0.605,158,0.885,159,1.164,160,0.885,161,0.605,162,0.803,163,0.885,164,0.885,165,0.011,166,0.018,167,0.011,189,2.132,196,2.084,233,1.125,242,0.849,260,2.472,316,1.087,321,4.505,329,1.364,331,1.676,339,2.624,342,2.235,346,2.924,351,3.763,352,1.603,353,2.624,355,2.018,361,1.879,366,2.132,367,0.771,368,2.132,374,2.472,377,1.879,386,1.87,387,1.508,390,1.238,392,1.238,395,2.924,398,1.879,399,2.577,403,2.132,405,2.084,406,1.676,413,3.591,418,1.697,433,2.472,440,2.577,441,3.389,443,1.125,444,1.879,445,1.508,454,1.219,455,1.219,460,2.472,470,2.068,471,1.383,473,1.676,479,2.577,480,2.472,487,1.879,498,1.879,532,2.472,536,3.159,592,1.508,594,2.924,641,1.676,642,2.132,669,1.879,695,3.389,711,2.299,726,2.577,781,2.472,786,1.603,787,2.924,788,2.132,789,2.987,790,3.763,791,3.645,792,2.987,793,3.645,794,4.425,795,3.645,796,4.096,797,3.064,798,2.987,799,1.937,800,2.472,801,2.987,802,1.937,803,4.096,804,1.937,805,4.675,806,1.937,807,2.987,808,1.937,809,2.987,810,1.937,811,1.937,812,3.389,813,1.937,814,1.937,815,1.937,816,1.937,817,2.987,818,1.937,819,1.937,820,1.937,821,1.937,822,1.937,823,1.937,824,1.603,825,1.937,826,3.645,827,2.987,828,1.937,829,1.937,830,4.675,831,2.987,832,2.987,833,4.096,834,1.937,835,4.096,836,2.987,837,2.987,838,2.472,839,2.472,840,2.987,841,2.987,842,2.132,843,4.096,844,3.389,845,2.472,846,4.096,847,3.337,848,2.987,849,2.987,850,2.472,851,2.472,852,4.096,853,2.987,854,1.603,855,2.132,856,2.472,857,2.472,858,2.924,859,2.987,860,4.675,861,2.987,862,2.987,863,2.472,864,2.472,865,2.987,866,2.987,867,2.987,868,2.472,869,2.987,870,1.937,871,1.937]],["title/classes/Team.html",[89,0.134,342,1.162]],["body/classes/Team.html",[3,0.386,4,0.338,9,0.164,11,0.682,23,0.437,24,1.136,32,0.935,35,1.209,37,0.549,38,0.037,39,0.664,40,0.867,41,1.131,65,1.675,75,1.455,88,0.386,89,0.125,96,2.368,155,1.39,165,0.017,166,0.023,167,0.023,243,2.886,253,3.276,337,3.844,338,3.276,339,3.208,342,2.353,367,1.184,405,2.231,418,2.575,420,1.813,426,2.886,443,1.506,491,3.16,536,3.844,563,1.618,568,3.895,592,2.317,847,3.276,864,3.797,872,2.385,873,4.456,874,5.204,875,5.385,876,5.385,877,5.385,878,2.882,879,2.882,880,3.997,881,4.588,882,4.588,883,5.385,884,4.588,885,4.588,886,3.797,887,2.317,888,2.882,889,2.882,890,2.882,891,2.882,892,2.882,893,2.882,894,2.882,895,2.882]],["title/injectables/TeamService.html",[168,1.058,355,1.278]],["body/injectables/TeamService.html",[3,0.32,4,0.279,9,0.136,11,0.407,15,1.763,23,0.362,24,0.992,28,0.901,32,0.967,35,1.204,37,0.995,38,0.038,39,0.7,40,0.829,41,0.995,46,2.301,48,1.453,49,1.316,52,1.316,65,1.292,67,2.309,74,1.763,79,1.953,81,0.862,84,0.454,88,0.32,89,0.179,90,2.493,92,0.818,93,1.578,96,2.164,105,2.296,107,2.571,113,0.818,155,0.901,165,0.014,166,0.021,167,0.014,168,1.198,169,1.339,171,2.197,176,3.763,180,1.5,181,2.861,183,1.594,194,3.61,196,1.447,198,2.932,204,2.495,207,2.552,219,1.339,220,1.204,221,1.5,223,1.5,224,1.204,226,1.204,227,1.204,228,1.339,229,1.204,238,2.599,242,1.292,243,2.197,329,1.594,342,2.379,355,1.447,363,2.493,368,2.493,426,2.197,443,1.316,444,2.197,445,1.763,454,1.5,466,2.861,487,2.197,521,2.197,662,2.197,743,2.838,824,1.974,873,2.89,896,1.974,897,4.547,898,4.547,899,3.492,900,2.89,901,2.89,902,3.492,903,3.492,904,2.385,905,2.385,906,2.385,907,3.492,908,3.492,909,2.385,910,2.385,911,3.492,912,3.492,913,3.492,914,3.492,915,2.385,916,3.492,917,2.385,918,3.492,919,3.492,920,2.385,921,3.492,922,2.385,923,3.492,924,2.385,925,2.385,926,2.385,927,1.703,928,3.492,929,3.492,930,4.131,931,2.385,932,2.385,933,4.131,934,2.385,935,2.385,936,2.385,937,2.385,938,2.385]],["title/injectables/TimeService.html",[168,1.058,797,1.94]],["body/injectables/TimeService.html",[3,0.524,4,0.458,9,0.222,11,0.666,15,2.467,23,0.593,28,1.261,32,1.247,35,1.033,37,0.744,38,0.037,39,0.524,40,0.593,41,0.744,45,1.143,48,1.009,74,2.467,81,0.98,84,0.744,88,0.524,89,0.17,92,1.34,93,1.11,107,2.231,155,1.261,165,0.023,166,0.029,167,0.023,168,1.676,169,2.193,171,3.073,180,2.458,181,3.513,183,2.231,202,3.073,204,2.434,219,2.193,220,1.973,221,2.458,223,2.458,224,1.973,226,1.973,227,1.973,228,2.193,229,1.973,238,2.458,289,2.742,386,2.231,405,2.314,662,3.073,797,3.073,858,3.488,939,3.233,940,5.584,941,3.907,942,3.907,943,4.043,944,4.885,945,4.885,946,3.907]],["title/components/TimerComponent.html",[0,0.468,161,0.963]],["body/components/TimerComponent.html",[0,0.625,1,0.673,2,1.44,3,0.318,4,0.278,5,1.082,6,1.082,7,1.082,8,1.082,9,0.135,11,0.404,16,1.082,17,2.491,18,1.277,19,1.587,21,1.587,23,0.36,24,0.988,28,0.897,31,2.876,35,1.215,37,0.451,38,0.038,39,0.551,40,0.766,41,0.451,48,1.432,49,2.09,65,0.988,66,1.082,67,1.082,68,2.186,76,1.44,79,1.871,81,0.404,84,0.451,88,0.318,89,0.103,93,0.988,99,1.082,105,1.755,131,1.491,144,0.893,145,1.587,146,1.082,147,2.07,148,1.082,149,1.082,150,0.74,151,1.082,152,0.673,153,1.082,154,0.673,155,0.612,156,1.082,157,0.74,158,1.082,159,0.673,160,1.082,161,1.416,162,2.472,163,1.082,164,1.082,165,0.014,166,0.02,167,0.014,242,0.673,288,2.545,351,4.014,358,1.33,369,3.751,380,3.751,386,2.07,394,2.852,402,3.036,405,2.16,409,2.876,418,2.26,421,1.961,423,3.751,429,2.186,459,3.406,498,2.589,500,3.406,515,3.722,531,1.961,566,1.951,592,2.289,669,2.186,697,2.876,705,3.406,711,1.33,842,2.481,851,2.876,943,1.961,947,1.961,948,3.475,949,3.475,950,3.475,951,4.116,952,3.475,953,5.213,954,4.116,955,4.533,956,4.533,957,3.751,958,4.827,959,4.533,960,2.37,961,3.475,962,2.37,963,4.014,964,2.37,965,3.475,966,5.045,967,2.37,968,4.533,969,2.37,970,4.533,971,3.475,972,4.533,973,2.37,974,2.37,975,2.37,976,2.37,977,2.37,978,2.37,979,3.475,980,2.37,981,2.37,982,2.37,983,1.961,984,2.37,985,2.37,986,2.37,987,2.37,988,1.692,989,4.533,990,4.116,991,4.533,992,2.37,993,2.37,994,2.37,995,2.37,996,2.37,997,2.37,998,2.37,999,2.37,1000,1.961,1001,1.961,1002,2.37]],["title/coverage.html",[1003,3.464]],["body/coverage.html",[0,0.837,1,0.816,9,0.163,10,2.376,18,0.672,34,1.806,38,0.037,40,0.436,45,0.672,89,0.215,105,3.131,131,3.998,150,0.897,152,0.816,154,0.816,157,0.897,159,0.816,161,0.897,165,0.017,166,0.023,167,0.017,168,1.697,170,2.376,204,1.82,224,1.45,225,2.05,226,1.45,242,0.816,269,2.376,275,1.19,306,1.806,317,1.806,327,2.376,342,1.082,353,2.57,354,1.612,355,1.19,367,1.029,386,1.311,449,2.05,450,2.05,451,2.05,503,2.376,504,2.376,543,2.05,564,2.846,565,2.846,569,1.082,590,1.806,651,2.376,661,2.376,688,2.376,728,2.05,729,2.05,774,1.806,776,2.376,786,2.376,797,1.806,872,2.376,887,1.45,896,2.376,927,2.05,939,2.376,947,2.376,963,4.077,1003,2.376,1004,2.376,1005,2.871,1006,2.871,1007,6.288,1008,2.871,1009,3.986,1010,4.015,1011,4.579,1012,4.579,1013,2.871,1014,2.871,1015,2.871,1016,3.986,1017,2.376,1018,3.299,1019,2.376,1020,2.846,1021,3.112,1022,2.376,1023,4.015,1024,2.376,1025,2.376,1026,2.376,1027,2.376,1028,2.376,1029,4.3,1030,2.376,1031,2.376,1032,2.376,1033,2.376,1034,2.871,1035,3.269,1036,2.376,1037,2.376,1038,2.846,1039,2.376,1040,3.299,1041,3.299,1042,2.376,1043,2.376,1044,2.871,1045,2.871]],["title/dependencies.html",[276,2.329,1046,2.14]],["body/dependencies.html",[38,0.037,84,0.802,165,0.025,166,0.03,167,0.025,220,2.128,276,2.651,293,4.236,294,3.22,298,3.488,316,2.366,582,3.009,685,3.488,727,4.236,733,3.488,1047,6.1,1048,4.215,1049,5.118,1050,4.215,1051,4.215,1052,4.215,1053,4.215,1054,3.488,1055,4.215,1056,4.215,1057,3.654,1058,4.215,1059,3.488,1060,4.215,1061,4.215,1062,4.215,1063,4.236,1064,4.215,1065,4.215,1066,4.215,1067,4.215,1068,4.215,1069,4.215,1070,4.215,1071,4.215,1072,4.215,1073,3.488,1074,4.215,1075,4.215,1076,4.215,1077,4.215]],["title/miscellaneous/functions.html",[1078,1.627,1079,2.644]],["body/miscellaneous/functions.html",[9,0.262,23,0.54,37,1.124,38,0.035,39,0.791,40,0.54,41,1.124,45,1.194,66,1.625,75,2.577,80,2.584,91,1.797,96,1.908,107,1.625,116,3.601,165,0.021,166,0.027,167,0.021,183,1.625,204,2.551,207,2.864,224,2.325,245,3.643,366,4.086,408,2.584,440,2.896,445,1.797,521,2.239,569,1.735,592,1.797,599,2.239,645,2.896,669,2.239,711,1.998,721,2.945,743,1.998,787,2.541,887,1.797,963,3.287,1010,2.541,1020,2.541,1021,3.394,1022,3.81,1023,2.541,1024,3.81,1025,4.223,1026,3.81,1035,2.541,1036,3.81,1038,2.541,1039,3.81,1040,2.945,1041,4.223,1042,3.81,1043,3.81,1057,3.287,1078,2.239,1079,2.541,1080,2.945,1081,4.604,1082,2.945,1083,2.945,1084,4.223,1085,2.945,1086,3.559,1087,4.223,1088,4.604,1089,3.559,1090,3.81,1091,3.559,1092,3.81,1093,3.559,1094,4.604,1095,4.604,1096,3.559,1097,4.223,1098,3.559,1099,3.559,1100,3.559,1101,2.945,1102,3.559,1103,3.559,1104,2.945,1105,3.559,1106,3.559,1107,4.604,1108,3.559,1109,3.559,1110,3.559]],["title/index.html",[23,0.393,402,1.627,1111,2.14]],["body/index.html",[0,0.751,4,0.391,9,0.251,18,1.033,38,0.026,39,0.447,45,1.033,46,2.33,61,3.653,101,2.383,102,2.762,106,2.383,111,2.762,165,0.02,166,0.026,167,0.026,202,2.1,242,0.948,272,2.762,288,1.874,289,1.874,358,1.874,359,2.762,385,2.762,386,2.016,392,1.383,398,3.311,406,1.874,420,3.111,521,2.777,569,1.258,583,2.1,585,2.1,586,2.1,589,3.157,598,2.1,610,3.151,646,2.383,717,2.762,854,2.762,855,2.383,856,2.762,863,2.762,887,2.657,957,2.762,988,2.383,1057,2.383,1112,4.946,1113,2.762,1114,3.531,1115,4.946,1116,2.762,1117,3.338,1118,3.338,1119,6.071,1120,3.338,1121,2.762,1122,5.736,1123,3.338,1124,3.653,1125,2.762,1126,3.338,1127,3.338,1128,3.338,1129,2.762,1130,3.338,1131,4.53,1132,3.338,1133,2.762,1134,3.338,1135,5.736,1136,4.093,1137,3.338,1138,5.624,1139,3.338,1140,2.762,1141,2.762,1142,3.338,1143,3.338,1144,2.762,1145,4.414,1146,3.653,1147,4.355,1148,2.383,1149,4.414,1150,3.653,1151,3.338,1152,3.338,1153,3.338,1154,3.338,1155,4.093,1156,3.338,1157,2.762,1158,4.414,1159,3.338,1160,2.762,1161,3.338,1162,2.762,1163,4.946,1164,3.338,1165,4.414,1166,3.338,1167,4.414,1168,2.383,1169,3.338,1170,3.338,1171,3.338,1172,3.338,1173,3.338,1174,3.338,1175,3.338,1176,4.414,1177,4.414,1178,3.338,1179,3.338,1180,3.338,1181,3.338,1182,2.762,1183,4.414,1184,3.338,1185,4.414,1186,3.338,1187,3.338,1188,3.338,1189,3.338,1190,3.338,1191,3.338,1192,3.653,1193,3.338]],["title/modules.html",[275,1.735]],["body/modules.html",[38,0.032,128,3.475,165,0.028,166,0.032,167,0.028,274,3.016,275,1.986,285,2.691,286,2.691,294,3.016,1194,4.794,1195,4.794,1196,5.819,1197,5.524]],["title/overview.html",[1198,3.464]],["body/overview.html",[1,1.549,2,1.704,38,0.036,144,1.549,150,1.878,152,1.549,154,1.549,157,1.703,159,1.549,161,1.703,165,0.024,166,0.03,167,0.024,169,2.308,273,2.076,274,3.988,275,1.704,276,2.587,277,3.403,278,3.403,279,3.403,280,2.587,281,3.403,282,3.403,283,3.403,284,3.403,285,3.061,286,3.061,287,4.173,288,2.308,289,2.308,315,2.076,470,2.076,473,2.308,563,2.308,641,2.83,643,2.936,644,2.936,774,2.587,1198,3.403]],["title/routes.html",[315,2.114]],["body/routes.html",[38,0.033,165,0.029,166,0.033,167,0.029,315,2.491]],["title/todo.html",[99,1.181,402,1.627,1111,2.14]],["body/todo.html",[0,0.732,9,0.198,14,2.543,15,1.195,18,0.554,27,1.489,32,0.554,38,0.032,39,0.317,45,1.298,46,1.999,48,0.611,52,1.707,62,1.959,68,1.489,74,1.195,77,1.959,80,1.329,89,0.103,90,3.235,91,1.195,96,0.981,97,1.959,99,2.856,106,1.69,107,1.586,110,1.69,112,3.404,116,1.489,119,1.489,128,1.489,155,1.062,162,1.704,165,0.014,166,0.02,167,0.014,183,1.081,190,1.69,194,1.69,202,2.185,204,1.586,242,1.287,253,1.69,315,1.195,342,1.707,358,1.329,367,1.302,372,1.959,377,1.489,387,1.753,390,0.981,394,1.489,398,1.489,399,2.185,405,1.439,406,1.949,408,1.329,415,2.874,418,1.439,420,1.489,426,1.489,443,0.892,445,1.195,466,1.489,559,1.959,562,2.936,567,2.185,569,1.309,577,1.489,583,1.489,586,2.185,589,2.309,599,1.489,614,1.69,641,1.329,645,1.489,662,1.489,711,1.329,726,2.185,730,1.959,743,2.543,775,1.959,784,1.959,788,1.69,790,2.479,800,2.874,812,1.959,838,2.874,839,1.959,845,1.959,847,2.479,850,2.874,855,2.936,857,1.959,868,1.959,886,1.959,887,1.753,983,1.959,988,1.69,1000,1.959,1001,1.959,1004,2.874,1021,1.489,1046,1.959,1054,1.959,1079,1.69,1087,2.874,1090,1.959,1092,1.959,1097,3.404,1101,1.959,1104,1.959,1113,1.959,1114,2.936,1116,2.874,1124,1.959,1125,3.404,1129,3.404,1133,2.874,1136,2.874,1141,1.959,1146,2.874,1147,3.404,1148,1.69,1150,1.959,1155,1.959,1157,1.959,1162,1.959,1168,1.69,1192,1.959,1199,2.367,1200,2.367,1201,2.367,1202,2.367,1203,2.367,1204,2.367,1205,2.367,1206,2.367,1207,2.367,1208,2.367,1209,3.473,1210,3.473,1211,2.367,1212,2.367,1213,1.959,1214,2.367,1215,2.367,1216,1.959,1217,2.367,1218,4.113,1219,2.367,1220,2.367,1221,2.367,1222,2.367,1223,2.367,1224,2.367,1225,2.367,1226,2.367,1227,2.367,1228,2.367,1229,2.367,1230,2.367,1231,2.367,1232,2.367,1233,3.473,1234,2.874,1235,2.367,1236,2.367,1237,2.367,1238,2.367,1239,3.473,1240,2.367,1241,2.367,1242,4.113,1243,3.473,1244,2.367,1245,5.043,1246,2.367,1247,2.367,1248,2.367,1249,1.959,1250,2.367,1251,2.367,1252,3.473,1253,3.473,1254,2.367,1255,2.367,1256,2.367,1257,2.367,1258,2.367,1259,2.367,1260,2.367,1261,2.367,1262,3.473,1263,3.473,1264,3.473,1265,2.367,1266,2.367,1267,2.367,1268,2.367,1269,3.473,1270,2.367,1271,4.113,1272,2.367,1273,2.367,1274,2.367,1275,2.367,1276,2.367,1277,5.211,1278,2.367,1279,2.874,1280,2.367,1281,2.367,1282,2.367,1283,2.367,1284,2.367,1285,2.367,1286,1.959,1287,2.367,1288,2.367,1289,3.473,1290,3.473,1291,2.367,1292,2.367,1293,4.113,1294,2.367,1295,2.367,1296,2.367,1297,2.367,1298,2.367,1299,2.367,1300,2.367,1301,2.367,1302,2.367,1303,2.367,1304,2.367,1305,2.367,1306,2.874,1307,2.367,1308,2.367,1309,2.367,1310,2.367,1311,2.367,1312,2.367,1313,2.367,1314,2.367,1315,2.367,1316,2.367,1317,2.367,1318,2.367,1319,2.367,1320,2.367,1321,2.367,1322,1.959,1323,2.367,1324,2.367,1325,2.367,1326,2.367,1327,2.367,1328,2.367,1329,2.367,1330,2.367,1331,2.367,1332,2.367,1333,2.367,1334,2.367,1335,2.367,1336,2.367,1337,2.367,1338,2.367,1339,2.367,1340,2.367,1341,3.473,1342,2.367,1343,2.367,1344,2.367,1345,2.367,1346,2.367,1347,2.367,1348,2.367,1349,2.367,1350,2.367,1351,2.367,1352,2.367,1353,2.367,1354,2.367,1355,2.367,1356,2.367,1357,3.473,1358,2.367,1359,2.367,1360,1.959,1361,2.367,1362,3.473,1363,2.367,1364,2.367,1365,2.367,1366,2.367,1367,2.367,1368,2.367,1369,2.367,1370,2.367,1371,2.367,1372,2.367,1373,2.367,1374,2.367,1375,2.367,1376,2.367,1377,2.367,1378,2.367,1379,2.367,1380,2.367,1381,2.367,1382,2.367]],["title/miscellaneous/variables.html",[1078,1.627,1383,3.064]],["body/miscellaneous/variables.html",[9,0.132,14,2.28,18,0.8,23,0.519,27,2.151,38,0.037,40,0.899,45,1.211,46,1.417,52,0.873,59,1.058,65,1.154,66,2.758,67,2.739,75,2.051,76,0.96,80,1.919,96,0.96,100,2.151,104,1.654,105,1.17,107,1.561,116,1.458,123,1.654,165,0.014,166,0.02,167,0.014,183,1.058,213,3.362,214,2.441,217,2.441,225,2.441,226,1.726,233,0.873,236,1.918,241,3.202,242,0.971,245,1.654,275,1.683,315,1.17,319,1.918,342,0.873,353,3.263,367,0.598,383,1.918,386,2.285,390,1.858,392,0.96,395,1.654,403,2.441,405,2.074,408,1.919,410,1.918,411,1.918,413,1.654,443,1.802,449,2.441,450,2.441,451,2.441,466,2.151,479,1.458,502,2.9,515,2.9,543,1.654,544,1.918,545,1.918,547,1.918,549,1.918,551,1.918,553,1.918,555,1.918,557,1.918,560,1.918,562,1.654,569,1.531,585,1.458,589,2.685,595,1.654,598,2.151,674,1.918,677,1.918,726,2.151,728,2.441,729,2.441,743,2.28,772,2.829,787,1.654,788,1.654,790,1.654,842,1.654,844,1.918,858,2.441,887,2.264,900,2.829,901,2.829,927,2.441,1010,1.654,1017,1.918,1018,4.283,1019,1.918,1020,1.654,1021,2.821,1023,1.654,1027,2.829,1028,2.829,1029,1.918,1030,2.829,1031,2.829,1032,2.829,1033,3.711,1035,1.654,1037,1.918,1038,1.654,1059,3.362,1063,1.918,1073,1.918,1078,1.458,1080,1.918,1082,2.829,1083,4.685,1084,3.958,1085,1.918,1114,1.654,1121,1.918,1131,1.918,1140,3.362,1144,3.362,1148,1.654,1160,3.362,1168,1.654,1182,1.918,1213,1.918,1216,1.918,1234,1.918,1249,1.918,1279,3.711,1286,1.918,1306,1.918,1322,1.918,1360,1.918,1383,1.918,1384,2.317,1385,2.317,1386,2.317,1387,2.317,1388,2.317,1389,2.317,1390,2.317,1391,2.317,1392,2.317,1393,2.317,1394,2.317,1395,2.317,1396,2.317,1397,2.317,1398,2.317,1399,2.317,1400,2.317,1401,2.317,1402,2.317,1403,2.317,1404,2.317,1405,2.317,1406,2.317,1407,2.317,1408,2.317,1409,2.317,1410,2.317,1411,2.317,1412,2.317,1413,3.419,1414,2.317,1415,2.317,1416,3.419,1417,2.317,1418,2.317,1419,3.419,1420,2.317,1421,2.317,1422,2.317,1423,2.317,1424,2.317,1425,2.317,1426,2.317,1427,2.317,1428,2.317,1429,2.317,1430,2.317,1431,2.317,1432,2.317,1433,2.317,1434,3.419,1435,2.317,1436,2.317,1437,2.317,1438,2.317,1439,2.317,1440,2.317,1441,2.317,1442,2.317,1443,2.317,1444,2.317,1445,2.317,1446,2.317,1447,2.317,1448,2.317,1449,2.317,1450,2.317,1451,2.317,1452,2.317,1453,2.317,1454,2.317,1455,2.317,1456,2.317,1457,2.317,1458,2.317,1459,2.317,1460,2.317,1461,2.317,1462,2.317,1463,2.317,1464,2.317]]],"invertedIndex":[["",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":429,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":992,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":470,"title":{"classes/Question-1.html":{}},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1117,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":502,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1002,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":820,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":843,"title":{},"body":{"components/SignupComponent.html":{}}}],["2",{"_index":844,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":832,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":473,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":641,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":642,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{}}}],["5.0.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":643,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":479,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":638,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["7",{"_index":644,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_id",{"_index":873,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["absolute",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1268,"title":{},"body":{"todo.html":{}}}],["access",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":777,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{}}}],["account",{"_index":1224,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":783,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":574,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{}}}],["actual_component",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":983,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":1363,"title":{},"body":{"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["adminauthorization",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["adminauthorization(req",{"_index":1086,"title":{},"body":{"miscellaneous/functions.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1030,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":1089,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adminservice",{"_index":34,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":332,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":533,"title":{},"body":{"components/GameOverComponent.html":{}}}],["against",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1354,"title":{},"body":{"todo.html":{}}}],["all(/^(?!.*\\/api",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1266,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":440,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["allows",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":675,"title":{},"body":{"injectables/QuestionService.html":{}}}],["already",{"_index":812,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1281,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1160,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":1114,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":733,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/text",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{}}}],["angular/common",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":546,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":548,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":550,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":552,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":554,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":556,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":558,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":561,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":316,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":689,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":739,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":725,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":727,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["another",{"_index":835,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":390,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":698,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":671,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":569,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answers.push(answer",{"_index":623,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["anything",{"_index":856,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1279,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1021,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/canstart",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":270,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":271,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":150,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appears",{"_index":1334,"title":{},"body":{"todo.html":{}}}],["application",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":677,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":274,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":285,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":619,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":762,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":613,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":627,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":630,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":631,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["artifacts",{"_index":1139,"title":{},"body":{"index.html":{}}}],["assigns",{"_index":639,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["async",{"_index":1092,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1091,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1043,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1096,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":1088,"title":{},"body":{"miscellaneous/functions.html":{}}}],["authorization",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{}}}],["authorized",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1328,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["automatic",{"_index":411,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1129,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autosize",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["autowrongguess",{"_index":450,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["away",{"_index":1312,"title":{},"body":{"todo.html":{}}}],["back",{"_index":1270,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1124,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":771,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":737,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1239,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1341,"title":{},"body":{"todo.html":{}}}],["bar",{"_index":559,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["base",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":838,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["beautification",{"_index":1201,"title":{},"body":{"todo.html":{}}}],["before",{"_index":408,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":884,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["between",{"_index":842,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":685,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1182,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1283,"title":{},"body":{"todo.html":{}}}],["box",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["break",{"_index":395,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":335,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":372,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":336,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":451,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1196,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1138,"title":{},"body":{"index.html":{}}}],["built",{"_index":1253,"title":{},"body":{"todo.html":{}}}],["button",{"_index":399,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":770,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":1359,"title":{},"body":{"todo.html":{}}}],["call",{"_index":423,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":953,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":987,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":369,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":320,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canstart",{"_index":816,"title":{},"body":{"components/SignupComponent.html":{}}}],["case",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catcherror",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1212,"title":{},"body":{"todo.html":{}}}],["category",{"_index":570,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["caveats",{"_index":1257,"title":{},"body":{"todo.html":{}}}],["cdktextareaautosize",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{}}}],["center",{"_index":1348,"title":{},"body":{"todo.html":{}}}],["change",{"_index":717,"title":{},"body":{"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1185,"title":{},"body":{"index.html":{}}}],["changes",{"_index":718,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":760,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":757,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":758,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["charge",{"_index":370,"title":{},"body":{"components/GameComponent.html":{}}}],["check",{"_index":598,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":664,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":666,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":955,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":669,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["checktoken",{"_index":1036,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checktoken(req",{"_index":1099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["chemistry",{"_index":1238,"title":{},"body":{"todo.html":{}}}],["choices",{"_index":576,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{}}}],["choose",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["class",{"_index":89,"title":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"todo.html":{}}}],["classes",{"_index":563,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":956,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":965,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":424,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":497,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1115,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":391,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":949,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":542,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1133,"title":{},"body":{"index.html":{},"todo.html":{}}}],["color",{"_index":772,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":710,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1284,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1192,"title":{},"body":{"index.html":{},"todo.html":{}}}],["common",{"_index":1254,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":801,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":864,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":858,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":377,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1093,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compodoc",{"_index":1374,"title":{},"body":{"todo.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["config",{"_index":1351,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1202,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":745,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1223,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1285,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1362,"title":{},"body":{"todo.html":{}}}],["consist",{"_index":831,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1280,"title":{},"body":{"todo.html":{}}}],["console.log(errors",{"_index":606,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["consoleoutput",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":880,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["constructor(adminservice",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(public",{"_index":587,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["constructor(question",{"_index":571,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{}}}],["constructor(questionservice",{"_index":699,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":352,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":878,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":511,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":573,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{}}}],["containing",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":329,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1228,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":478,"title":{},"body":{"components/GameComponent.html":{}}}],["converting",{"_index":1289,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":514,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":530,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":392,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":635,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["correctcolor",{"_index":728,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":640,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["counted",{"_index":410,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":1272,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1003,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":645,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["creates",{"_index":614,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["creating",{"_index":1275,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1347,"title":{},"body":{"todo.html":{}}}],["crud",{"_index":1295,"title":{},"body":{"todo.html":{}}}],["cst",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1237,"title":{},"body":{"todo.html":{}}}],["current",{"_index":394,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":426,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":337,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":768,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":769,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":756,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":521,"title":{},"body":{"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":887,"title":{},"body":{"classes/Team.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":459,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1286,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decided",{"_index":1376,"title":{},"body":{"todo.html":{}}}],["decides",{"_index":1190,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":1102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decorators",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["default",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1173,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":276,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1162,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1170,"title":{},"body":{"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["descriptions",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["dev",{"_index":1123,"title":{},"body":{"index.html":{}}}],["develop",{"_index":1230,"title":{},"body":{"todo.html":{}}}],["development",{"_index":1121,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1276,"title":{},"body":{"todo.html":{}}}],["directive",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1137,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1141,"title":{},"body":{"index.html":{},"todo.html":{}}}],["display",{"_index":438,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":948,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":585,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1187,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1233,"title":{},"body":{"todo.html":{}}}],["div",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1004,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["don't",{"_index":854,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":871,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1234,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1316,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1350,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1251,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1241,"title":{},"body":{"todo.html":{}}}],["dynamic",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1152,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":726,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":848,"title":{},"body":{"components/SignupComponent.html":{}}}],["earned",{"_index":885,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":740,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["efficient",{"_index":741,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["eliminated",{"_index":1307,"title":{},"body":{"todo.html":{}}}],["emergencies",{"_index":1211,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":721,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":961,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":913,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1332,"title":{},"body":{"todo.html":{}}}],["end",{"_index":398,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["endpoint",{"_index":1329,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":1090,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["ends",{"_index":396,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1094,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":860,"title":{},"body":{"components/SignupComponent.html":{}}}],["entered",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{}}}],["environment",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1166,"title":{},"body":{"index.html":{}}}],["err",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["error",{"_index":1097,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":1098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":599,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":605,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["essential",{"_index":1207,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":480,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1258,"title":{},"body":{"todo.html":{}}}],["even",{"_index":1378,"title":{},"body":{"todo.html":{}}}],["event",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.target",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["event.total",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":705,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["example",{"_index":862,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1299,"title":{},"body":{"todo.html":{}}}],["execute",{"_index":1149,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":713,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exists",{"_index":368,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1323,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1274,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1340,"title":{},"body":{"todo.html":{}}}],["export",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":1059,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1287,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1226,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":575,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{}}}],["false",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1321,"title":{},"body":{"todo.html":{}}}],["favor",{"_index":1309,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1349,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1248,"title":{},"body":{"todo.html":{}}}],["feel",{"_index":868,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["field",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1131,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload($event",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":943,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["finish",{"_index":1288,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":693,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":338,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":755,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":506,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":707,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":833,"title":{},"body":{"components/SignupComponent.html":{}}}],["fix",{"_index":1269,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1326,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1199,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1143,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1313,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":586,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{}}}],["following",{"_index":1250,"title":{},"body":{"todo.html":{}}}],["font",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["forkjoin",{"_index":734,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":751,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":594,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{}}}],["formbuilders",{"_index":1335,"title":{},"body":{"todo.html":{}}}],["forms",{"_index":1337,"title":{},"body":{"todo.html":{}}}],["formsmodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["free",{"_index":869,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":325,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":963,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1079,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["further",{"_index":1154,"title":{},"body":{"index.html":{}}}],["gained",{"_index":436,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":773,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":333,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":334,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":152,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":322,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":154,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gecko",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1136,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1113,"title":{},"body":{"index.html":{},"todo.html":{}}}],["getadmin",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{}}}],["getcanstart",{"_index":940,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["getpractice",{"_index":897,"title":{},"body":{"injectables/TeamService.html":{}}}],["getquestions",{"_index":343,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{}}}],["gets",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":981,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":898,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":899,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":908,"title":{},"body":{"injectables/TeamService.html":{}}}],["getting",{"_index":1111,"title":{"index.html":{},"todo.html":{}},"body":{}}],["gettoken",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["github:angular/web",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":592,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["givenanswers",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["givenquestions",{"_index":1109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["giventoken",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["go",{"_index":1156,"title":{},"body":{"index.html":{}}}],["good",{"_index":988,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1240,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1197,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":774,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":775,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":413,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":836,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1204,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1205,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":1103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1352,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":1104,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["having",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":611,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["headers",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1155,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":416,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["helpers.ts",{"_index":1041,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1220,"title":{},"body":{"todo.html":{}}}],["heroku",{"_index":1120,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1164,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holds",{"_index":566,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["hrs",{"_index":527,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1128,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":680,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptionsjson",{"_index":927,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":933,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":663,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["https",{"_index":1333,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/practical",{"_index":1343,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1346,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/user",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1294,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1325,"title":{},"body":{"todo.html":{}}}],["human",{"_index":516,"title":{},"body":{"components/GameOverComponent.html":{}}}],["i.e",{"_index":360,"title":{},"body":{"components/GameComponent.html":{}}}],["id",{"_index":886,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["identifier",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":444,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":331,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1244,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":748,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":562,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1132,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":729,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":612,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":620,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":649,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["inform",{"_index":1318,"title":{},"body":{"todo.html":{}}}],["information",{"_index":445,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["initiate",{"_index":789,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":168,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1356,"title":{},"body":{"todo.html":{}}}],["input",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["input#get",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{}}}],["inputs",{"_index":696,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["inside",{"_index":1372,"title":{},"body":{"todo.html":{}}}],["instance",{"_index":1193,"title":{},"body":{"index.html":{}}}],["instead",{"_index":1001,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":830,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1221,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1118,"title":{},"body":{"index.html":{}}}],["interface",{"_index":1249,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["internet",{"_index":1225,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":966,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":979,"title":{},"body":{"components/TimerComponent.html":{}}}],["io",{"_index":1308,"title":{},"body":{"todo.html":{}}}],["isn't",{"_index":834,"title":{},"body":{"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":870,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1271,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1255,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":409,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["j",{"_index":628,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":595,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join(__dirname",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1057,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["jsdocs",{"_index":1377,"title":{},"body":{"todo.html":{}}}],["json",{"_index":674,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":1151,"title":{},"body":{"index.html":{}}}],["keep",{"_index":850,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kinda",{"_index":744,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1364,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1361,"title":{},"body":{"todo.html":{}}}],["largely",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["last",{"_index":1168,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":422,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1179,"title":{},"body":{"index.html":{}}}],["legend",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":742,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["limit",{"_index":403,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":615,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["literal",{"_index":673,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":415,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":911,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1213,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":344,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":365,"title":{},"body":{"components/GameComponent.html":{}}}],["localstorage",{"_index":1259,"title":{},"body":{"todo.html":{}}}],["located",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1252,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":330,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{}}}],["logs",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":839,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1277,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1264,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1358,"title":{},"body":{"todo.html":{}}}],["lot",{"_index":1260,"title":{},"body":{"todo.html":{}}}],["main",{"_index":328,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["make",{"_index":1245,"title":{},"body":{"todo.html":{}}}],["making",{"_index":1368,"title":{},"body":{"todo.html":{}}}],["many",{"_index":435,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(event",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{}}}],["matbuttonmodule",{"_index":545,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":547,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":549,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":544,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":286,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":551,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":629,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":472,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":553,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":555,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":557,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":560,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":404,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1293,"title":{},"body":{"todo.html":{}}}],["meaning",{"_index":1167,"title":{},"body":{"index.html":{}}}],["menu",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["message",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["messes",{"_index":584,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":1087,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["million",{"_index":1235,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":515,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":954,"title":{},"body":{"components/TimerComponent.html":{}}}],["minify",{"_index":1302,"title":{},"body":{"todo.html":{}}}],["mins",{"_index":526,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":845,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1078,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/question",{"_index":452,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["models/team",{"_index":454,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modifying",{"_index":534,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":273,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":275,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1063,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongo",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":358,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1317,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1216,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["moved",{"_index":1371,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":524,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":972,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":510,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1357,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":882,"title":{},"body":{"classes/Team.html":{}}}],["n",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["namespaces",{"_index":1324,"title":{},"body":{"todo.html":{}}}],["navigate",{"_index":1127,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":385,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["need",{"_index":855,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["new",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":1298,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":827,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":366,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/functions.html":{}}}],["ng",{"_index":1135,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":345,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":694,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":714,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":346,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":1214,"title":{},"body":{"todo.html":{}}}],["node",{"_index":1296,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1189,"title":{},"body":{"index.html":{}}}],["non",{"_index":1206,"title":{},"body":{"todo.html":{}}}],["nothing",{"_index":1188,"title":{},"body":{"index.html":{}}}],["now",{"_index":1306,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":1122,"title":{},"body":{"index.html":{}}}],["null",{"_index":825,"title":{},"body":{"components/SignupComponent.html":{}}}],["number",{"_index":418,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["numbers",{"_index":617,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["object",{"_index":443,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":723,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":596,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":373,"title":{},"body":{"components/GameComponent.html":{}}}],["of(team",{"_index":935,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1210,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":347,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":388,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":348,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":711,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":690,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":695,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":719,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":796,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":406,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ones",{"_index":945,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":349,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera/ie",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":944,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1101,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["otherwise",{"_index":912,"title":{},"body":{"injectables/TeamService.html":{}}}],["out",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1227,"title":{},"body":{"todo.html":{}}}],["output",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":697,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":361,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":507,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":508,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":504,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":522,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":512,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":513,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":518,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1159,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1198,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1046,"title":{"dependencies.html":{}},"body":{"todo.html":{}}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":778,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["papa",{"_index":600,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":582,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":602,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1181,"title":{},"body":{"index.html":{}}}],["param",{"_index":491,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"classes/Team.html":{}}}],["parameters",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":581,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":601,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":608,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":604,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1054,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1256,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1370,"title":{},"body":{"todo.html":{}}}],["password",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":319,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":324,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":853,"title":{},"body":{"components/SignupComponent.html":{}}}],["people",{"_index":1319,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":382,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1342,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1175,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1311,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1172,"title":{},"body":{"index.html":{}}}],["play",{"_index":790,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":540,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":505,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":532,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":541,"title":{},"body":{"components/GameOverComponent.html":{}}}],["point",{"_index":433,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":339,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":340,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1236,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":448,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["possibly",{"_index":1297,"title":{},"body":{"todo.html":{}}}],["post",{"_index":900,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":914,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":577,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["potentially",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["practice",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["practice]{@link",{"_index":929,"title":{},"body":{"injectables/TeamService.html":{}}}],["practice_questions",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestions",{"_index":1027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["practices",{"_index":1338,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":588,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":597,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":565,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:11",{"_index":572,"title":{},"body":{"classes/Question.html":{}}}],["preparer.ts:21",{"_index":580,"title":{},"body":{"classes/Question.html":{}}}],["preparer.ts:22",{"_index":579,"title":{},"body":{"classes/Question.html":{}}}],["preparer.ts:23",{"_index":578,"title":{},"body":{"classes/Question.html":{}}}],["preparer.ts:30",{"_index":658,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:52",{"_index":660,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:60",{"_index":659,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1232,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":803,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":397,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":531,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{}}}],["prevents",{"_index":476,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":583,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{}}}],["process",{"_index":520,"title":{},"body":{"components/GameOverComponent.html":{}}}],["process.env.admin_password",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":632,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["processrow",{"_index":656,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":634,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1142,"title":{},"body":{"index.html":{}}}],["production",{"_index":1144,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1161,"title":{},"body":{"index.html":{}}}],["progress",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":1112,"title":{},"body":{"index.html":{}}}],["proper",{"_index":1304,"title":{},"body":{"todo.html":{}}}],["properly",{"_index":724,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1153,"title":{},"body":{"index.html":{}}}],["provided",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1327,"title":{},"body":{"todo.html":{}}}],["public",{"_index":568,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"classes/Team.html":{}}}],["pulls",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["purposes",{"_index":1215,"title":{},"body":{"todo.html":{}}}],["put",{"_index":901,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":916,"title":{},"body":{"injectables/TeamService.html":{}}}],["question",{"_index":367,"title":{"classes/Question.html":{},"classes/Question-1.html":{}},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":647,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":350,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":667,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":449,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":590,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions.component.css",{"_index":691,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":692,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":622,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":157,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":354,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["quiz",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":624,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["re",{"_index":1186,"title":{},"body":{"index.html":{}}}],["read",{"_index":1345,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":517,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1157,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1320,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1158,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1163,"title":{},"body":{"index.html":{}}}],["recompile",{"_index":1184,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":323,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1367,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["refers",{"_index":1217,"title":{},"body":{"todo.html":{}}}],["register",{"_index":781,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":318,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":852,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":317,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":867,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":793,"title":{},"body":{"components/SignupComponent.html":{}}}],["related",{"_index":662,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["relevant",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1130,"title":{},"body":{"index.html":{}}}],["rely",{"_index":986,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":610,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["reportprogress",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":743,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1330,"title":{},"body":{"todo.html":{}}}],["res",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.sendfile(clientpath",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":968,"title":{},"body":{"components/TimerComponent.html":{}}}],["respective",{"_index":709,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{}}}],["responsetype",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":957,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1353,"title":{},"body":{"todo.html":{}}}],["result",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":749,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":750,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":752,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":753,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieves",{"_index":363,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{}}}],["return",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["rewrite",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{}}}],["right",{"_index":1191,"title":{},"body":{"index.html":{}}}],["root",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["roughly",{"_index":374,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":784,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":353,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":314,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":326,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":315,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":313,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":633,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":648,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":636,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":637,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":650,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["rows",{"_index":607,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":616,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["run",{"_index":1119,"title":{},"body":{"index.html":{}}}],["running",{"_index":1145,"title":{},"body":{"index.html":{}}}],["runs",{"_index":401,"title":{},"body":{"components/GameComponent.html":{}}}],["rxjs",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":523,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari/chrome",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":466,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":919,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":519,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":509,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":722,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1134,"title":{},"body":{"index.html":{}}}],["school",{"_index":536,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":874,"title":{},"body":{"classes/Team.html":{}}}],["schools",{"_index":881,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":837,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1176,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1180,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1282,"title":{},"body":{"todo.html":{}}}],["second",{"_index":441,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["seconds",{"_index":351,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":341,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":1033,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":525,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1278,"title":{},"body":{"todo.html":{}}}],["see",{"_index":800,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1267,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":670,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1265,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1229,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1125,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":359,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["server's",{"_index":1369,"title":{},"body":{"todo.html":{}}}],["service",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":453,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":455,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":813,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":805,"title":{},"body":{"components/SignupComponent.html":{}}}],["setanswers",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setanswers(givenanswers",{"_index":1105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setinterval",{"_index":958,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":971,"title":{},"body":{"components/TimerComponent.html":{}}}],["setjsonvalues",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setpractice",{"_index":902,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":921,"title":{},"body":{"injectables/TeamService.html":{}}}],["setquestions",{"_index":1026,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setquestions(givenquestions",{"_index":1108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sets",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["setteam",{"_index":903,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":923,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":421,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["shouldn't",{"_index":1365,"title":{},"body":{"todo.html":{}}}],["show",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1222,"title":{},"body":{"todo.html":{}}}],["shuffle",{"_index":657,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":626,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":625,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["side",{"_index":1290,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":788,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":779,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":321,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":791,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":792,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":159,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":851,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":715,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":859,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":567,"title":{},"body":{"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["size",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":603,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":609,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["solution",{"_index":1331,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1366,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1246,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":866,"title":{},"body":{"components/SignupComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["specifically",{"_index":1305,"title":{},"body":{"todo.html":{}}}],["src",{"_index":1373,"title":{},"body":{"todo.html":{}}}],["src/.../admin",{"_index":1080,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1084,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1081,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1083,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1082,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1085,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":312,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":543,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":688,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":702,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":703,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":704,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":701,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":706,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":700,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":708,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":716,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":720,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":947,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":960,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":977,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":980,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":976,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":978,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":964,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":967,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":969,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":973,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":974,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":975,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":982,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":962,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1010,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/question.ts",{"_index":651,"title":{},"body":{"classes/Question-1.html":{},"coverage.html":{}}}],["src/app/models/question.ts:13",{"_index":655,"title":{},"body":{"classes/Question-1.html":{}}}],["src/app/models/question.ts:14",{"_index":654,"title":{},"body":{"classes/Question-1.html":{}}}],["src/app/models/question.ts:15",{"_index":653,"title":{},"body":{"classes/Question-1.html":{}}}],["src/app/models/question.ts:2",{"_index":652,"title":{},"body":{"classes/Question-1.html":{}}}],["src/app/models/team.ts",{"_index":872,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":879,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":891,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":892,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":894,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":893,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":890,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":889,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":895,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":888,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:13",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:19",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:27",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:30",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:44",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":503,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":327,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":389,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":393,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":400,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":417,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":414,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":447,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":425,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":419,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":427,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":428,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":430,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":431,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":437,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":442,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":439,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":356,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":357,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":362,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":364,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":381,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":786,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:16",{"_index":808,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:18",{"_index":810,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:20",{"_index":811,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":798,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:31",{"_index":799,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:36",{"_index":802,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:41",{"_index":804,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:51",{"_index":806,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":776,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":780,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":782,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:16",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:22",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:24",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:27",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:32",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:38",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:50",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:60",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":661,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":665,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":672,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":668,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":896,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":904,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":926,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":925,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":924,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":906,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":922,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":905,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":910,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":915,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":917,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":920,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":909,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":939,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":941,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":942,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1017,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1019,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1020,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1023,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/constants.ts",{"_index":1029,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":564,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1035,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/uri.ts",{"_index":1037,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1038,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1040,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":1336,"title":{},"body":{"todo.html":{}}}],["start",{"_index":386,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1028,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":402,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":380,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["state('correct",{"_index":736,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":738,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1243,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["still",{"_index":1273,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":959,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":970,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":907,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":420,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{}}}],["stored",{"_index":1140,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["stuff",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"modules/MaterialModule.html":{}}}],["style",{"_index":730,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":807,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":865,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":794,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":764,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1169,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":809,"title":{},"body":{"components/SignupComponent.html":{}}}],["support",{"_index":1194,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["surprising",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1195,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1178,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1314,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1165,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1126,"title":{},"body":{"index.html":{}}}],["table",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":407,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":840,"title":{},"body":{"components/SignupComponent.html":{}}}],["team",{"_index":342,"title":{"classes/Team.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":824,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":539,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":537,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.service",{"_index":676,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":538,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":829,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":928,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":795,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":875,"title":{},"body":{"classes/Team.html":{}}}],["teams",{"_index":847,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":355,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1219,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":950,"title":{},"body":{"components/TimerComponent.html":{}}}],["term",{"_index":1208,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1148,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1209,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1147,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["thing",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1262,"title":{},"body":{"todo.html":{}}}],["think",{"_index":984,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":846,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.adminservice",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.password).subscribe",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(input.files[0]).subscribe",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":765,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":767,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":483,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":989,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":997,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":464,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":746,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finishanimation",{"_index":759,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.gameover",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getquestions",{"_index":490,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gettoken",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":946,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":682,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":684,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.post(uri.admin.login",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":932,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":687,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":686,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":938,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":934,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":679,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":683,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":469,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":496,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":991,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":990,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":457,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":467,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":937,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":930,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":621,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":936,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":463,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":465,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":763,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":462,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":815,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":994,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":817,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":461,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":785,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.saving",{"_index":528,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":495,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":494,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":618,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["this.start",{"_index":995,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":998,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":761,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":766,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":747,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":754,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":993,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":826,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":487,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":821,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":468,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":456,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":818,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":819,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":458,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":489,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":931,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":681,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":488,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":823,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":678,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":822,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":828,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":460,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":535,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":500,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":482,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":501,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":475,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":486,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":493,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":814,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["thoroughly",{"_index":1247,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1218,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1174,"title":{},"body":{"index.html":{}}}],["time",{"_index":405,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":876,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":951,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":952,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":161,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1339,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":797,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":877,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":99,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token]{@link",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1322,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["took",{"_index":1171,"title":{},"body":{"index.html":{}}}],["total",{"_index":376,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1203,"title":{},"body":{"todo.html":{}}}],["transactions",{"_index":1310,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":591,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["transition",{"_index":731,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tried",{"_index":1303,"title":{},"body":{"todo.html":{}}}],["tries",{"_index":712,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":732,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":735,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":646,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":593,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1200,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":378,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":863,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/Question-1.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1292,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1291,"title":{},"body":{"todo.html":{}}}],["tz(start",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":498,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":841,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":481,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":861,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1146,"title":{},"body":{"index.html":{},"todo.html":{}}}],["unix",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["until",{"_index":857,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":387,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":918,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1344,"title":{},"body":{"todo.html":{}}}],["use",{"_index":589,"title":{},"body":{"classes/Question.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1242,"title":{},"body":{"todo.html":{}}}],["useless",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["user",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":432,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["userauthorization",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["userauthorization(req",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["userroutes",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":787,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1177,"title":{},"body":{"index.html":{}}}],["using",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["valid",{"_index":1100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["var",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1383,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":383,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1116,"title":{},"body":{"index.html":{},"todo.html":{}}}],["via",{"_index":1150,"title":{},"body":{"index.html":{},"todo.html":{}}}],["viewchild",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["viewchild('autosize",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["viewchild(timercomponent",{"_index":446,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{}}}],["virtual",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1231,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1300,"title":{},"body":{"todo.html":{}}}],["wasn't",{"_index":1355,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1183,"title":{},"body":{"index.html":{}}}],["way",{"_index":1000,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["ways",{"_index":1261,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1073,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webkit",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1301,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["weirdness",{"_index":1375,"title":{},"body":{"todo.html":{}}}],["whether",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["width",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":999,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":996,"title":{},"body":{"components/TimerComponent.html":{}}}],["wipes",{"_index":529,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":849,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1360,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["works",{"_index":1315,"title":{},"body":{"todo.html":{}}}],["worse",{"_index":985,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1263,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":412,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":883,"title":{},"body":{"classes/Team.html":{}}}],["yyyy",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                autosize\n                            \n                            \n                                consoleOutput\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:44\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:30\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            autosize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CdkTextareaAutosize\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('autosize', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:19\n                            \n                        \n\n                \n                    \n                        Some weird auto-sizing stuff \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:27\n                            \n                        \n\n                \n                    \n                        the password that the user has entered \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:22\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService) { }\n\n  /** Some weird auto-sizing stuff */\n  @ViewChild('autosize', { static: false }) autosize: CdkTextareaAutosize;\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** the password that the user has entered */\n  password: string;\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Upload the questions to the server */\n  // todo rewrite as template reference variable as better practice\n  //  https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable\n  //   if possible (not sure that it is)\n  fileUpload($event): void {\n    const input = $event.target;\n    this.adminService.uploadQuestions(input.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                        {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:16\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:60\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:38\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:27\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:32\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:50\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:24\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsText, URI } from '../constants';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token: string;\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, password, {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.getToken() })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/server/question-preparer.ts:11\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-preparer.ts:23\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-preparer.ts:22\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-preparer.ts:21\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\n\n\n/** Holds a single question */\n// todo should probably import but this messes up dist folder\nclass Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(public question: string,\n              public category: string,\n              public answers: string[]\n  ) {}\n}\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question-1.html":{"url":"classes/Question-1.html","title":"class - Question-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/models/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:30\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:60\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:52\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\n\n\n/** Holds a single question */\n// todo should probably import but this messes up dist folder\nclass Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(public question: string,\n              public category: string,\n              public answers: string[]\n  ) {}\n}\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../models/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.getToken() };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:31\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:36\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:41\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:51\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:18\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:20\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            function\n            adminAuthorization\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            function\n            setAnswers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            function\n            setJSONValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            function\n            setQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            answers\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            practiceQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            questions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            function\n            checkToken\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            function\n            userAuthorization\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminAuthorization   (src/.../admin-api.ts)\n                        \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            checkToken   (src/.../server.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                        \n                            setAnswers   (src/.../api.ts)\n                        \n                        \n                            setJSONValues   (src/.../api.ts)\n                        \n                        \n                            setQuestions   (src/.../api.ts)\n                        \n                        \n                            userAuthorization   (src/.../user-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/admin-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            adminAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \nadminAuthorization(req, res, next)\n                \n            \n\n\n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \ncheckToken(req, res, next)\n                \n            \n\n\n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setAnswers\n                        \n                        \n                    \n                \n            \n            \n                \nsetAnswers(givenAnswers)\n                \n            \n\n\n\n\n            \n                \n                    Sets the answers \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenAnswers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setJSONValues\n                        \n                        \n                    \n                \n            \n            \n                \nsetJSONValues()\n                \n            \n\n\n\n\n            \n                \n                    Sets the values of practice questions, answers, and questions to values from the database \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nsetQuestions(givenQuestions)\n                \n            \n\n\n\n\n            \n                \n                    Sets the questions \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenQuestions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/user-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            userAuthorization\n                        \n                        \n                    \n                \n            \n            \n                \nuserAuthorization(req, res, next)\n                \n            \n\n\n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\ntodo may want to look into using webpack to package backend into a single file (be sure to minify). Last time tried though\n  there was an issue with the code not using the proper directory to look for things (specifically the practice questions)\n  this may not be an issue now that you have eliminated file io in favor of database transactions\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password -- also need to use https\ntodo it appears that formBuilders are now the standard way to do forms in angular. Might be worth converting.\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo consider making the server's (api.ts) questions, answers, practice questions, and related functions part of their own\n class\nmoved the server folder inside the src folder -- creates some compodoc weirdness.\ndecided to include constructor documentation in jsdocs as even though the descriptions are largely useless, the automatically\ngenerated information is too potentially useful to not include.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            answers   (src/.../api.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbURL   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            practiceQuestions   (src/.../api.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questions   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.ADMIN_PASSWORD || 'password'\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct'\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE  || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            answers\n                            \n                        \n                    \n                \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            practiceQuestions\n                            \n                        \n                    \n                \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( {limit: '10mb'} ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/server/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/canStart'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
