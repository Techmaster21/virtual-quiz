var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.392,1,0.799]],["body/components/AdminComponent.html",[0,0.534,1,1.195,2,1.386,3,0.357,4,0.312,5,1.811,6,1.056,7,1.056,8,1.056,9,0.454,10,1.961,11,0.457,12,1.908,13,3.466,14,3.325,15,1.708,16,1.056,17,2.377,18,1.753,19,1.536,20,4.086,21,1.536,22,3.466,23,0.406,24,1.023,25,4.086,26,4.767,27,3.516,28,1.023,29,3.466,30,3.694,31,2.853,32,3.466,33,1.193,34,2.382,35,3.694,36,1.621,37,1.536,38,0.778,39,0.04,40,0.784,41,0.778,42,1.684,43,1.195,44,1.634,45,2.382,46,2.149,47,2.053,48,3.466,49,3.466,50,0.879,51,4.086,52,1.961,53,3.466,54,2.853,55,1.536,56,2.382,57,2.45,58,2.853,59,4.767,60,2.45,61,1.335,62,1.056,63,1.056,64,2.382,65,2.781,66,2.853,67,2.382,68,3.466,69,2.382,70,2.382,71,2.853,72,2.149,73,1.988,74,2.853,75,3.466,76,1.386,77,2.45,78,0.784,79,1.477,80,1.961,81,0.406,82,2.533,83,2.382,84,2.382,85,2.382,86,0.357,87,0.33,88,1.684,89,1.477,90,0.703,91,0.778,92,0.778,93,2.382,94,2.382,95,1.908,96,3.364,97,2.382,98,1.708,99,1.477,100,1.684,101,1.961,102,2.382,103,2.853,104,1.908,105,1.477,106,1.311,107,2.382,108,2.382,109,2.45,110,1.961,111,1.961,112,0.953,113,2.382,114,2.382,115,2.853,116,3.466,117,3.466,118,2.853,119,3.466,120,2.853,121,3.466,122,2.853,123,2.382,124,2.382,125,2.853,126,2.382,127,1.477,128,2.382,129,2.382,130,2.149,131,2.382,132,1.961,133,2.382,134,3.466,135,4.975,136,4.086,137,2.382,138,2.382,139,2.382,140,2.382,141,2.382,142,1.961,143,0.861,144,1.536,145,1.056,146,1.988,147,1.056,148,1.056,149,0.703,150,1.056,151,0.635,152,1.056,153,0.635,154,0.571,155,1.056,156,0.703,157,1.056,158,0.635,159,1.056,160,0.703,161,0.953,162,1.056,163,1.056,164,0.015,165,0.022,166,0.015]],["title/injectables/AdminService.html",[82,1.858,167,0.98]],["body/injectables/AdminService.html",[3,0.365,4,0.318,9,0.543,11,0.467,12,1.936,14,2.808,15,1.733,23,0.414,24,1.039,27,3.201,28,1.039,33,1.269,35,3.402,36,1.737,37,1.559,38,1.48,39,0.04,40,0.87,41,1.48,42,2.921,43,1.335,44,0.972,47,1.811,50,0.889,55,1.559,61,1.48,62,1.559,63,2.13,66,2.001,76,2.156,77,2.486,78,0.923,81,0.414,82,2.18,86,0.365,87,0.232,90,0.718,91,0.794,92,1.789,95,2.968,98,1.198,105,1.507,112,1.653,122,2.896,132,2.001,164,0.016,165,0.023,166,0.016,167,1.149,168,1.338,169,2.001,170,2.18,171,3.517,172,3.517,173,4.806,174,3.517,175,3.729,176,4.529,177,3.517,178,3.517,179,3.517,180,4.529,181,2.431,182,3.517,183,3.517,184,2.486,185,2.486,186,3.517,187,3.517,188,2.431,189,2.486,190,2.431,191,1.811,192,3.517,193,1.338,194,3.517,195,2.431,196,3.517,197,2.18,198,3.517,199,1.832,200,3.517,201,2.431,202,2.18,203,3.517,204,3.517,205,2.431,206,3.517,207,2.431,208,3.517,209,2.486,210,2.431,211,2.18,212,2.431,213,2.486,214,2.431,215,1.338,216,1.198,217,1.507,218,2.431,219,1.507,220,1.198,221,1.507,222,1.338,223,1.198,224,1.338,225,1.198,226,1.198,227,3.517,228,3.517,229,3.517,230,1.559,231,1.718,232,1.718,233,2.431,234,2.431,235,2.001,236,2.001,237,2.431,238,2.001,239,2.18,240,3.517,241,2.431,242,1.718,243,1.149,244,1.507,245,2.431,246,2.431,247,2.431,248,2.431,249,2.431,250,2.431,251,2.431,252,2.431,253,2.431,254,2.921,255,2.431,256,2.431,257,4.529,258,2.431,259,2.431,260,2.431,261,2.001,262,3.517,263,2.431,264,2.431,265,2.431,266,3.517,267,2.431,268,2.431,269,2.431]],["title/components/AppComponent.html",[0,0.392,149,0.885]],["body/components/AppComponent.html",[0,0.734,1,1.019,2,1.91,3,0.574,4,0.5,5,1.694,6,1.694,7,1.694,8,1.694,9,0.364,11,0.734,16,1.694,17,2.625,18,1.96,19,2.116,21,2.116,39,0.039,40,0.917,73,2.116,78,0.734,81,0.651,86,0.574,87,0.364,143,1.382,144,2.116,145,1.694,146,2.417,147,1.694,148,1.694,149,1.611,150,1.694,151,1.019,152,1.694,153,1.019,154,0.917,155,1.694,156,1.129,157,1.694,158,1.019,159,1.694,160,1.129,161,1.529,162,1.694,163,1.694,164,0.025,165,0.031,166,0.025,225,2.687,270,3.148,271,5.208,272,4.775,273,3.931]],["title/modules/AppModule.html",[274,1.477,275,1.858]],["body/modules/AppModule.html",[1,1.456,3,0.481,4,0.419,9,0.306,18,1.048,39,0.04,78,1.141,81,0.546,86,0.481,87,0.306,143,1.159,149,1.736,151,1.456,153,1.456,156,1.613,158,1.456,160,1.613,164,0.021,165,0.028,166,0.021,215,1.765,274,1.58,275,3.78,276,1.282,277,1.988,278,3.943,279,3.943,280,2.64,281,1.988,282,2.64,283,2.64,284,2.64,285,2.64,286,3.008,287,3.008,288,3.51,289,1.765,290,1.765,291,3.207,292,3.014,293,4.263,294,3.51,295,1.988,296,3.014,297,4.263,298,4.263,299,2.64,300,4.263,301,3.207,302,3.207,303,2.64,304,3.207,305,2.64,306,2.64,307,1.988,308,2.64,309,3.207,310,2.64,311,3.207,312,2.64]],["title/modules/AppRoutingModule.html",[274,1.477,286,1.65]],["body/modules/AppRoutingModule.html",[0,0.71,1,1.263,3,0.567,4,0.494,9,0.36,14,2.342,39,0.04,78,1.112,81,0.644,86,0.567,87,0.36,112,1.511,151,1.263,153,1.263,154,0.906,158,1.263,164,0.024,165,0.031,166,0.024,276,1.511,281,2.342,286,2.609,292,2.671,296,3.35,303,3.11,305,3.11,306,3.11,307,2.342,308,3.11,312,3.11,313,3.778,314,3.778,315,4.74,316,2.851,317,2.08,318,3.211,319,3.778,320,5.709,321,3.902,322,4.264,323,3.11,324,4.74,325,4.74,326,4.74,327,3.778]],["title/components/GameComponent.html",[0,0.392,151,0.799]],["body/components/GameComponent.html",[0,0.384,1,0.377,2,0.925,3,0.212,4,0.185,5,0.627,6,0.627,7,0.627,8,0.627,9,0.135,11,0.444,12,1.868,16,0.627,17,2.03,18,1.497,19,1.026,21,1.026,23,0.685,24,0.683,28,0.683,33,1.324,36,1.78,38,0.462,39,0.04,40,0.564,41,0.462,43,1.255,44,1.831,46,2.491,47,1.77,50,0.952,52,1.165,54,1.905,55,2.03,61,0.96,62,1.781,63,1.781,72,1.435,73,1.026,76,1.77,78,0.85,79,1.821,80,1.165,81,0.241,86,0.212,87,0.135,89,1.821,90,0.418,91,0.462,92,0.462,99,1.435,103,1.905,104,1.274,143,0.511,144,1.026,145,0.627,146,1.504,147,0.627,148,0.627,149,0.418,150,0.627,151,0.904,152,0.627,153,0.377,154,1.202,155,0.627,156,0.418,157,0.627,158,0.377,159,0.627,160,1.105,161,1.969,162,0.627,163,0.627,164,0.024,165,0.015,166,0.009,185,1.636,191,1.77,202,1.821,223,1.447,230,2.03,289,0.779,310,1.165,317,0.779,323,3.308,328,1.165,329,2.314,330,1.868,331,2.314,332,1.274,333,3.394,334,2.937,335,2.314,336,2.937,337,4.426,338,2.076,339,2.076,340,2.335,341,2.418,342,2.937,343,1.77,344,2.794,345,3.394,346,3.394,347,2.399,348,2.314,349,3.394,350,3.743,351,3.394,352,3.128,353,1.415,354,1.274,355,1.636,356,2.314,357,1.435,358,1.415,359,1.636,360,1.415,361,3.394,362,2.794,363,1.755,364,1.636,365,1.905,366,2.314,367,2.314,368,1.905,369,2.314,370,1.905,371,2.314,372,3.394,373,2.104,374,2.314,375,1.415,376,1.905,377,1.415,378,2.314,379,2.314,380,2.314,381,1.905,382,1.274,383,1.821,384,2.314,385,1.415,386,1.672,387,2.794,388,1.447,389,1.415,390,3.154,391,2.314,392,2.314,393,2.104,394,2.399,395,1.435,396,1.415,397,2.314,398,1.435,399,1.905,400,2.314,401,1.497,402,1.274,403,2.314,404,1.435,405,1.905,406,1.905,407,1.905,408,2.314,409,2.399,410,1.415,411,1.905,412,2.314,413,1.415,414,1.607,415,1.415,416,1.435,417,3.308,418,2.314,419,1.905,420,2.314,421,1.415,422,1.435,423,1.415,424,1.415,425,3.879,426,1.415,427,1.415,428,1.905,429,2.794,430,2.314,431,1.415,432,2.314,433,1.905,434,1.415,435,1.905,436,1.415,437,1.636,438,1.905,439,1.415,440,1.026,441,1.435,442,1.435,443,2.314,444,1.415,445,2.314,446,2.076,447,2.399,448,1.636,449,1.636,450,1,451,1.617,452,1.165,453,0.877,454,1.174,455,0.877,456,3.394,457,2.937,458,1.165,459,1.905,460,1.165,461,1.415,462,1.415,463,1.415,464,2.314,465,2.937,466,1,467,2.314,468,2.937,469,3.081,470,1.636,471,1,472,2.314,473,2.076,474,2.937,475,3.394,476,1.165,477,1.415,478,1.415,479,0.877,480,1.165,481,1.415,482,1.415,483,2.314,484,2.937,485,1.415,486,1.636,487,1.415,488,2.314,489,1.415,490,1,491,1.415,492,0.877,493,1,494,1.905,495,1.415,496,1,497,2.794,498,2.937,499,4.018,500,2.937,501,1.415,502,0.877,503,1.415]],["title/components/GameOverComponent.html",[0,0.392,153,0.799]],["body/components/GameOverComponent.html",[0,0.556,1,0.682,2,1.459,3,0.384,4,0.335,5,1.134,6,1.134,7,1.134,8,1.134,9,0.244,11,0.491,12,2.008,16,1.134,17,2.419,18,1.783,19,1.617,21,1.617,23,0.436,24,1.077,28,1.077,33,1.112,37,1.617,39,0.04,40,0.89,43,0.972,44,1.023,47,1.7,50,0.785,55,1.134,61,0.836,73,1.617,78,0.817,79,2.636,81,0.436,86,0.384,87,0.244,90,0.755,91,0.836,92,0.836,112,1.854,143,0.924,144,1.617,145,1.134,146,2.055,147,1.134,148,1.134,149,0.755,150,1.134,151,0.682,152,1.134,153,1.235,154,1.328,155,1.134,156,0.755,157,1.134,158,0.682,159,1.134,160,0.755,161,1.023,162,1.134,163,1.134,164,0.017,165,0.024,166,0.033,184,2.579,191,1.459,193,2.008,230,1.134,290,1.408,295,2.262,307,3.039,330,2.008,332,2.008,340,2.008,343,2.282,347,3.277,357,2.262,401,1.854,414,1.459,440,1.617,441,2.262,442,2.262,453,1.586,454,1.854,455,1.586,458,2.106,471,1.808,479,2.874,490,2.579,492,1.586,493,1.808,494,2.106,504,4.036,505,2.106,506,3.648,507,3.648,508,4.252,509,3.648,510,5.245,511,5.097,512,2.558,513,3.648,514,2.579,515,3.648,516,3.648,517,2.558,518,3.648,519,2.558,520,3.648,521,2.262,522,2.558,523,5.458,524,4.252,525,4.252,526,4.252,527,3.648,528,3.648,529,2.558,530,2.558,531,2.106,532,2.106,533,2.558,534,2.558,535,2.558,536,2.579,537,3.648,538,3.648,539,3.648,540,3.648,541,3.648,542,3.648]],["title/modules/MaterialModule.html",[274,1.477,287,1.65]],["body/modules/MaterialModule.html",[3,0.589,4,0.513,9,0.374,11,0.754,39,0.04,60,3.431,78,1.142,81,0.669,86,0.589,87,0.374,112,1.57,164,0.025,165,0.031,166,0.025,274,2.392,276,2.262,281,2.434,287,2.672,292,2.775,296,3.431,543,2.775,544,4.339,545,3.996,546,3.926,547,3.996,548,3.926,549,3.996,550,3.926,551,3.996,552,3.926,553,3.996,554,3.926,555,3.996,556,3.926,557,3.996,558,3.926,559,3.232,560,3.996,561,3.926,562,2.775]],["title/classes/Question.html",[87,0.286,363,0.98]],["body/classes/Question.html",[3,0.55,4,0.48,9,0.35,11,0.893,23,0.625,24,1.374,33,1.289,38,1.199,39,0.04,40,0.705,41,1.199,50,1.156,61,1.958,86,0.55,87,0.35,164,0.024,165,0.03,166,0.024,363,2.001,496,3.612,563,2.594,564,3.021,565,3.021,566,3.021,567,4.841,568,3.645,569,4.841,570,3.831,571,3.669,572,3.669,573,4.653,574,5.11,575,5.11,576,5.11,577,4.207,578,3.669,579,3.669,580,3.669]],["title/injectables/QuestionService.html",[167,0.98,451,1.65]],["body/injectables/QuestionService.html",[3,0.474,4,0.413,9,0.301,11,0.607,15,2.08,23,0.538,24,1.246,28,1.246,33,1.14,36,1.525,37,1.871,38,1.032,39,0.04,40,0.607,41,1.032,43,1.125,50,1.091,76,1.263,78,1.067,81,0.538,86,0.474,87,0.453,90,0.933,91,1.032,92,1.658,112,1.688,164,0.02,165,0.027,166,0.02,167,1.379,168,1.739,170,2.617,191,1.688,199,2.343,209,2.233,211,2.617,213,2.233,215,1.739,216,1.556,217,1.958,219,1.958,220,1.556,222,1.739,223,1.556,224,1.739,225,1.556,226,1.556,239,3.145,242,2.984,243,1.032,244,1.958,344,4.177,359,2.984,363,1.553,386,2.08,388,2.08,402,2.324,414,2.175,450,2.233,451,2.324,454,1.901,581,2.601,582,2.984,583,4.754,584,4.221,585,4.221,586,5.074,587,3.159,588,2.984,589,4.221,590,3.475,591,3.159,592,3.159,593,3.159,594,3.159,595,2.601,596,3.159,597,3.159,598,3.159,599,4.221,600,3.159,601,5.074,602,3.159,603,3.914,604,3.159,605,3.159]],["title/components/QuestionsComponent.html",[0,0.392,156,0.885]],["body/components/QuestionsComponent.html",[0,0.589,1,0.553,2,1.252,3,0.312,4,0.272,5,0.92,6,0.92,7,0.92,8,0.92,9,0.198,11,0.399,16,0.92,17,2.293,18,1.69,19,1.387,21,1.387,23,0.806,24,0.924,28,0.924,33,1.241,36,1.516,38,1.023,39,0.04,40,0.806,41,1.023,42,2.966,43,1.004,44,1.507,46,2.601,50,1.018,61,1.023,65,1.941,72,2.601,73,1.387,78,0.909,81,0.354,86,0.312,87,0.198,90,0.613,91,0.679,92,0.679,98,1.023,99,2.791,100,3.574,109,3.182,112,0.83,125,1.709,130,1.287,143,0.75,144,1.387,145,0.92,146,1.859,147,0.92,148,0.92,149,0.613,150,0.92,151,0.553,152,0.92,153,0.553,154,0.498,155,0.92,156,1.239,157,0.92,158,0.553,159,0.92,160,0.613,161,0.83,162,0.92,163,0.92,164,0.027,165,0.02,166,0.013,191,1.678,193,1.723,202,1.941,216,1.023,223,1.023,230,0.92,243,1.023,330,1.723,332,1.723,338,3.472,339,3.182,340,1.723,341,3.706,354,1.143,363,1.69,373,1.941,386,2.704,387,3.454,388,2.218,390,2.601,395,1.287,414,1.8,428,2.577,433,2.577,435,2.577,450,1.468,451,2.074,452,1.709,469,2.577,497,1.709,568,2.791,569,2.577,590,1.709,606,1.709,607,3.768,608,3.768,609,3.768,610,3.131,611,4.196,612,3.131,613,2.577,614,3.131,615,2.577,616,3.768,617,2.076,618,2.076,619,2.076,620,2.076,621,3.102,622,2.076,623,3.131,624,2.076,625,3.131,626,3.131,627,1.723,628,3.131,629,3.131,630,3.131,631,4.196,632,2.076,633,2.577,634,3.768,635,3.131,636,2.076,637,2.577,638,3.131,639,3.131,640,3.131,641,3.131,642,3.131,643,2.076,644,1.941,645,3.102,646,2.213,647,2.213,648,3.102,649,3.768,650,2.076,651,1.709,652,2.076,653,2.076,654,2.076,655,3.131,656,2.076,657,3.131,658,3.131,659,2.076,660,2.076,661,1.143,662,2.076,663,2.076,664,2.076,665,2.076,666,2.076,667,2.076,668,2.076,669,2.076,670,2.076,671,2.076,672,2.076,673,3.131,674,2.076,675,2.076,676,2.076,677,2.076,678,2.076,679,2.076,680,2.076,681,2.076,682,2.076,683,2.076,684,2.076,685,3.131,686,2.076,687,3.131,688,3.131,689,2.076,690,2.076,691,1.709,692,2.076]],["title/guards/RegisterGuard.html",[318,1.858,693,2.119]],["body/guards/RegisterGuard.html",[3,0.57,4,0.497,9,0.362,11,0.73,23,0.648,28,1.405,33,0.911,39,0.04,43,1.013,47,2.176,55,1.684,76,1.52,78,0.997,81,0.648,86,0.57,87,0.362,90,1.122,91,1.242,92,1.555,154,1.305,164,0.025,165,0.031,166,0.025,167,1.555,191,1.902,193,2.619,224,2.092,225,1.872,230,1.684,317,2.092,318,2.949,321,4.707,332,2.092,357,2.949,383,2.949,404,2.949,437,3.363,446,3.671,454,2.077,455,2.356,476,3.917,493,2.686,502,2.356,694,3.129,695,3.129,696,4.758,697,4.758,698,4.758,699,3.801,700,4.758,701,3.917,702,3.801]],["title/components/SignupComponent.html",[0,0.392,158,0.799]],["body/components/SignupComponent.html",[0,0.451,1,0.479,2,1.121,3,0.27,4,0.235,5,0.797,6,0.797,7,0.797,8,0.797,9,0.171,11,0.345,12,1.544,16,0.797,17,2.199,18,1.621,19,1.243,21,1.243,23,0.306,24,0.828,28,0.828,30,3.204,33,1.158,36,1.406,39,0.04,40,0.858,43,1.037,44,1.556,46,2.771,47,1.556,50,0.387,55,2.069,62,1.725,63,1.725,73,1.243,76,1.121,78,0.81,79,2.136,81,0.306,86,0.27,87,0.171,90,0.531,91,0.588,106,2.658,120,2.309,127,1.738,142,3.204,143,0.65,144,1.243,145,0.797,146,1.725,147,0.797,148,0.797,149,0.531,150,0.797,151,0.479,152,0.797,153,0.479,154,1.239,155,0.797,156,0.531,157,0.797,158,1.037,159,0.797,160,0.531,161,0.719,162,0.797,163,0.797,164,0.012,165,0.018,166,0.012,184,1.982,191,1.931,230,1.243,243,0.916,261,2.309,317,0.99,322,4.176,330,1.544,332,1.544,340,2.461,343,2.3,347,2.751,352,3.586,357,1.738,362,2.309,363,0.916,364,1.982,370,2.309,373,1.738,382,2.142,383,1.738,386,1.382,388,1.382,393,1.738,394,2.751,395,2.413,399,2.309,401,1.931,402,1.544,409,3.413,414,1.556,429,2.309,437,2.751,438,3.204,440,1.243,441,1.738,442,1.738,446,2.436,453,1.115,454,1.378,455,1.115,460,2.309,470,2.751,471,1.271,473,1.982,479,2.413,480,2.309,492,1.738,502,1.738,532,2.309,536,2.982,588,1.982,613,3.204,627,2.142,644,2.413,703,1.481,704,3.892,705,2.309,706,2.804,707,4.176,708,3.446,709,2.804,710,3.446,711,4.219,712,3.446,713,3.892,714,1.799,715,2.309,716,2.804,717,1.799,718,3.892,719,1.799,720,4.47,721,1.799,722,2.804,723,3.892,724,1.799,725,2.804,726,1.799,727,2.804,728,1.799,729,1.799,730,1.982,731,3.204,732,2.136,733,1.799,734,1.799,735,1.799,736,1.799,737,2.804,738,1.799,739,1.799,740,1.799,741,1.799,742,1.799,743,1.799,744,1.481,745,1.799,746,3.446,747,2.804,748,1.799,749,1.799,750,4.47,751,2.804,752,2.804,753,3.892,754,1.481,755,3.892,756,2.804,757,2.804,758,2.309,759,2.309,760,2.804,761,2.804,762,1.982,763,1.982,764,3.892,765,2.751,766,2.804,767,2.309,768,3.892,769,3.16,770,2.804,771,2.804,772,2.309,773,2.309,774,3.892,775,2.804,776,1.481,777,1.982,778,2.309,779,2.309,780,3.204,781,2.804,782,4.47,783,2.804,784,2.804,785,2.309,786,2.309,787,2.804,788,2.804,789,2.804,790,2.309,791,2.804,792,1.799,793,1.799]],["title/classes/Team.html",[87,0.286,343,1.199]],["body/classes/Team.html",[3,0.401,4,0.35,9,0.255,11,0.723,23,0.455,24,1.111,33,1.322,38,0.873,39,0.04,40,0.908,41,1.878,50,1.186,61,1.864,72,1.657,86,0.401,87,0.255,95,3.035,154,1.24,164,0.017,165,0.024,166,0.024,244,2.7,254,3.079,338,3.655,339,3.079,340,3.035,343,2.427,363,1.423,401,2.067,414,2.415,416,1.657,422,2.7,440,1.668,496,3.834,536,3.655,563,1.889,567,4.95,570,3.098,730,3.079,769,3.079,786,3.586,794,2.2,795,4.256,796,4.984,797,5.17,798,5.17,799,5.17,800,2.672,801,2.672,802,3.763,803,4.356,804,4.356,805,5.17,806,4.356,807,4.356,808,3.586,809,3.079,810,2.672,811,2.672,812,2.672,813,2.672,814,2.672,815,2.672,816,2.672,817,2.672]],["title/injectables/TeamService.html",[167,0.98,454,1.199]],["body/injectables/TeamService.html",[3,0.334,4,0.292,9,0.212,11,0.428,15,1.626,23,0.38,24,0.975,28,0.975,33,1.305,37,2.378,38,1.588,39,0.04,40,0.933,41,1.588,43,1.45,44,1.32,47,1.32,50,1.111,61,1.42,63,2.153,76,2.203,78,0.933,81,0.38,86,0.334,87,0.375,88,2.333,90,0.658,91,0.728,92,1.753,95,2.768,104,2.392,106,2.996,112,0.891,154,0.792,164,0.014,165,0.021,166,0.014,167,1.079,168,1.227,170,2.046,175,3.578,189,3.434,191,1.32,193,2.768,199,2.337,202,2.694,211,2.046,215,1.227,216,1.098,217,1.382,219,1.382,220,1.098,221,1.382,222,1.227,223,1.098,224,1.227,225,1.098,226,1.098,238,3.237,239,2.437,243,1.42,244,2.046,330,1.817,343,2.455,359,2.333,364,2.333,422,2.046,440,1.463,441,2.046,442,2.046,453,1.382,454,1.32,466,3.072,492,2.046,521,2.046,582,2.333,661,2.675,744,1.835,795,2.718,818,1.835,819,4.346,820,4.346,821,3.301,822,2.718,823,2.718,824,3.301,825,3.301,826,2.229,827,2.229,828,3.301,829,3.301,830,2.229,831,2.229,832,3.301,833,3.301,834,3.301,835,3.301,836,2.229,837,3.301,838,2.229,839,3.301,840,3.301,841,2.229,842,3.301,843,2.229,844,3.301,845,2.229,846,2.229,847,2.229,848,3.301,849,3.301,850,3.931,851,2.229,852,2.229,853,2.229,854,2.229,855,2.229,856,2.229,857,2.229]],["title/injectables/TimeService.html",[167,0.98,732,1.858]],["body/injectables/TimeService.html",[3,0.576,4,0.502,9,0.366,11,0.737,15,2.359,23,0.654,28,1.414,33,0.921,36,1.73,39,0.04,43,1.023,78,1.079,81,0.654,86,0.576,87,0.366,90,1.134,91,1.254,92,1.254,106,2.635,154,1.148,164,0.025,165,0.031,166,0.025,167,1.564,168,2.113,170,2.968,197,2.968,199,2.312,211,2.968,215,2.113,216,1.891,217,2.38,219,2.38,220,1.891,222,2.113,223,1.891,224,2.113,225,1.891,226,1.891,231,3.384,239,2.38,290,2.635,382,2.635,401,1.914,582,3.384,732,2.968,780,3.941,858,3.16,859,5.462,860,3.839,861,4.787,862,4.787,863,3.839]],["title/components/TimerComponent.html",[0,0.392,160,0.885]],["body/components/TimerComponent.html",[0,0.506,1,0.578,2,1.294,3,0.326,4,0.284,5,0.962,6,0.962,7,0.962,8,0.962,9,0.207,11,0.417,16,0.962,17,2.321,18,1.711,19,1.434,21,1.434,23,0.37,24,0.956,28,0.956,31,2.665,33,1.328,38,0.709,39,0.04,40,0.743,41,0.709,43,1.42,44,2.132,50,1.035,61,1.058,62,0.962,63,0.962,65,2.007,73,1.434,76,2.094,78,0.417,81,0.37,86,0.326,87,0.207,92,1.058,98,1.07,104,1.782,130,1.346,143,0.785,144,1.434,145,0.962,146,1.901,147,0.962,148,0.962,149,0.641,150,0.962,151,0.578,152,0.962,153,0.578,154,0.521,155,0.962,156,0.641,157,0.962,158,0.578,159,0.962,160,1.267,161,2.308,162,0.962,163,0.962,164,0.014,165,0.021,166,0.014,231,1.535,232,1.535,243,0.709,289,2.362,352,3.824,354,1.195,365,3.532,376,3.532,382,2.362,390,2.659,398,2.844,401,1.993,405,2.665,414,2.094,417,1.787,419,3.532,425,2.665,459,3.186,486,1.535,502,2.399,514,3.524,531,1.787,565,2.665,588,2.288,615,2.665,621,3.186,627,1.195,730,3.032,763,2.288,773,2.665,864,1.787,865,3.237,866,3.237,867,3.237,868,3.87,869,3.237,870,4.985,871,3.87,872,4.29,873,4.29,874,3.032,875,4.589,876,4.29,877,2.171,878,3.237,879,2.171,880,4.454,881,2.171,882,3.237,883,4.812,884,2.171,885,4.29,886,2.171,887,4.29,888,3.237,889,4.29,890,2.171,891,2.171,892,2.171,893,2.171,894,2.171,895,2.171,896,3.237,897,2.171,898,2.171,899,2.171,900,2.171,901,2.171,902,2.171,903,2.171,904,1.535,905,4.29,906,3.87,907,4.29,908,2.171,909,2.171,910,2.171,911,2.171,912,3.87,913,2.171,914,2.171,915,2.171,916,2.171,917,1.787,918,2.171]],["title/coverage.html",[919,3.355]],["body/coverage.html",[0,0.738,1,0.897,9,0.321,10,2.77,39,0.04,50,0.724,82,2.086,87,0.419,104,3.186,130,3.806,149,0.994,151,0.897,153,0.897,156,0.994,158,0.897,160,0.994,164,0.022,165,0.028,166,0.022,167,1.7,169,2.77,199,1.95,220,1.658,221,2.086,243,1.1,270,2.77,276,1.346,307,2.086,318,2.086,328,2.77,343,1.346,363,1.1,447,2.379,448,2.379,449,2.379,451,1.852,454,1.346,504,2.77,505,2.77,543,2.379,564,2.77,581,2.77,606,2.77,646,2.379,647,2.379,693,2.379,695,2.77,703,2.77,732,2.086,794,2.77,818,2.77,858,2.77,864,2.77,880,4.038,919,2.77,920,2.77,921,3.365,922,3.365,923,5.952,924,4.401,925,3.365,926,3.988,927,4.401,928,3.365,929,3.365,930,4.401,931,4.401,932,3.365,933,3.365,934,3.365,935,2.77,936,3.623,937,2.77,938,3.623,939,3.623,940,2.77,941,2.77,942,3.365,943,3.365]],["title/dependencies.html",[277,2.232,944,2.068]],["body/dependencies.html",[39,0.04,81,0.687,164,0.026,165,0.032,166,0.026,216,1.987,277,2.5,294,4.064,295,3.06,299,3.321,317,2.22,603,3.321,645,4.064,651,3.321,945,5.931,946,4.033,947,4.936,948,4.033,949,4.033,950,4.033,951,4.033,952,3.321,953,4.033,954,4.033,955,3.489,956,4.033,957,4.033,958,4.033,959,4.033,960,4.033,961,4.936,962,4.033,963,4.033,964,4.033,965,4.033,966,4.033,967,4.033,968,4.033,969,4.033,970,4.033,971,4.033,972,4.033,973,4.033,974,4.033,975,4.033,976,4.033]],["title/miscellaneous/functions.html",[977,1.557,978,2.965]],["body/miscellaneous/functions.html",[23,0.71,38,1.768,39,0.037,40,1.039,41,1.768,50,0.896,62,1.846,89,2.582,164,0.027,165,0.033,166,0.027,199,2.55,220,2.48,226,2.052,521,2.582,627,2.293,637,3.429,661,2.293,926,2.944,938,3.429,939,4.453,940,4.144,941,4.144,955,3.558,977,2.582,978,3.429,979,5.034,980,3.429,981,4.166,982,4.144,983,4.144,984,4.166,985,5.034,986,5.034,987,4.166,988,4.453,989,3.429,990,4.166,991,4.166,992,3.429]],["title/index.html",[23,0.428,398,1.557,993,2.068]],["body/index.html",[0,0.619,4,0.409,9,0.4,18,1.37,36,1.515,37,2.404,39,0.027,40,0.601,57,2.964,100,2.211,101,2.575,105,1.939,110,2.575,164,0.02,165,0.027,166,0.027,197,1.939,236,3.894,243,1.022,273,2.575,289,1.722,290,1.722,354,1.722,355,2.211,381,2.575,382,2.308,388,1.541,393,3.133,402,1.722,416,2.932,521,2.599,568,1.939,633,2.575,776,2.575,777,2.211,778,2.575,785,2.575,809,3.572,874,2.211,904,2.211,955,2.211,994,4.73,995,3.128,996,3.894,997,4.73,998,2.575,999,3.128,1000,3.128,1001,5.891,1002,3.128,1003,2.575,1004,5.541,1005,3.128,1006,3.452,1007,2.575,1008,3.128,1009,3.128,1010,3.128,1011,2.575,1012,3.128,1013,5.27,1014,3.128,1015,2.575,1016,3.128,1017,4.562,1018,3.894,1019,4.466,1020,3.128,1021,5.425,1022,3.128,1023,3.128,1024,3.128,1025,2.575,1026,3.128,1027,3.128,1028,2.575,1029,4.193,1030,3.452,1031,4.161,1032,2.575,1033,4.193,1034,3.452,1035,3.128,1036,3.128,1037,3.128,1038,3.128,1039,3.894,1040,3.128,1041,3.128,1042,2.575,1043,4.193,1044,4.193,1045,3.128,1046,2.575,1047,3.128,1048,2.575,1049,2.575,1050,3.128,1051,4.193,1052,3.128,1053,4.193,1054,2.575,1055,3.128,1056,3.128,1057,3.128,1058,3.128,1059,3.128,1060,3.128,1061,3.128,1062,4.193,1063,4.193,1064,3.128,1065,3.128,1066,3.128,1067,3.128,1068,3.128,1069,4.193,1070,2.575,1071,3.128,1072,3.452,1073,3.128,1074,3.128,1075,2.575,1076,3.128,1077,3.128,1078,3.128,1079,3.128,1080,3.452,1081,3.128]],["title/modules.html",[276,1.629]],["body/modules.html",[39,0.035,127,3.331,164,0.03,165,0.035,166,0.03,275,2.884,276,1.861,286,2.561,287,2.561,295,2.884,1082,4.653,1083,4.653,1084,5.666,1085,5.374]],["title/overview.html",[1086,3.355]],["body/overview.html",[1,1.404,2,1.57,39,0.039,143,1.419,149,1.725,151,1.404,153,1.404,156,1.556,158,1.404,160,1.556,164,0.025,165,0.031,166,0.025,168,2.161,274,1.934,275,3.829,276,1.57,277,2.434,278,3.232,279,3.232,280,3.232,281,2.434,282,3.232,283,3.232,284,3.232,285,3.232,286,2.901,287,2.901,288,3.996,289,2.161,290,2.161,316,2.161,470,2.775,473,2.775,563,2.775,693,2.775,762,2.775,765,2.775,1086,3.232,1087,3.926,1088,3.926]],["title/routes.html",[316,2.243]],["body/routes.html",[39,0.035,164,0.031,165,0.035,166,0.031,316,2.645]],["title/todo.html",[98,1.238,398,1.557,993,2.068]],["body/todo.html",[0,0.597,9,0.306,14,2.643,15,1.056,18,0.701,27,1.516,36,1.845,37,2.023,39,0.034,40,0.412,43,0.571,47,1.705,57,1.516,58,1.765,60,2.267,65,1.329,71,1.765,74,1.765,77,1.516,88,3.226,89,1.329,90,0.633,95,1.18,96,1.765,98,3.004,105,1.329,106,1.18,109,1.516,111,3.163,115,1.765,118,1.765,127,1.329,154,0.921,161,1.536,164,0.014,165,0.021,166,0.014,185,1.516,189,1.516,197,2.381,199,1.421,222,1.765,226,1.056,232,1.516,235,1.765,243,1.491,254,1.516,316,1.18,343,1.705,354,1.18,355,1.516,363,1.565,368,1.765,373,1.329,383,1.988,386,1.056,390,1.329,393,1.329,395,1.988,401,1.282,402,1.765,404,1.329,411,2.64,414,1.282,416,1.329,422,1.329,440,0.95,466,1.516,486,1.516,559,1.765,562,1.516,566,2.64,568,1.329,577,1.765,627,1.18,644,1.988,648,1.765,661,2.347,694,1.765,701,1.765,705,1.765,707,2.64,715,2.64,731,1.765,754,1.765,758,2.64,759,1.765,762,1.516,767,1.765,769,2.267,772,2.64,777,2.267,779,1.765,790,1.765,808,1.765,809,2.267,874,1.516,904,1.516,917,2.64,920,2.64,944,1.765,952,1.765,982,1.765,983,1.765,988,3.163,989,1.765,992,1.765,996,3.51,998,2.64,1006,1.765,1007,3.163,1011,2.64,1015,2.64,1017,2.64,1018,2.64,1019,2.64,1025,1.765,1030,2.64,1031,3.163,1032,1.765,1034,1.765,1039,2.64,1042,1.765,1048,1.765,1049,1.765,1054,1.765,1070,1.765,1072,1.765,1075,2.64,1080,1.765,1089,2.144,1090,2.144,1091,2.144,1092,2.144,1093,2.144,1094,2.144,1095,2.144,1096,2.144,1097,2.144,1098,2.144,1099,3.207,1100,3.207,1101,2.144,1102,2.144,1103,1.765,1104,2.144,1105,2.144,1106,2.144,1107,2.144,1108,3.207,1109,2.144,1110,2.144,1111,2.144,1112,2.144,1113,2.144,1114,2.144,1115,2.144,1116,2.144,1117,2.144,1118,2.144,1119,2.144,1120,2.144,1121,2.144,1122,2.144,1123,3.207,1124,3.207,1125,2.144,1126,2.144,1127,2.144,1128,2.144,1129,3.207,1130,2.144,1131,2.144,1132,3.207,1133,3.207,1134,2.144,1135,2.144,1136,4.79,1137,2.144,1138,2.144,1139,2.144,1140,2.144,1141,2.144,1142,2.144,1143,3.207,1144,3.207,1145,2.144,1146,3.207,1147,2.144,1148,2.144,1149,2.144,1150,2.144,1151,2.144,1152,2.144,1153,3.207,1154,3.207,1155,3.207,1156,2.144,1157,2.144,1158,2.144,1159,2.144,1160,3.842,1161,2.144,1162,3.842,1163,2.144,1164,2.144,1165,2.144,1166,2.144,1167,2.144,1168,4.965,1169,2.144,1170,3.207,1171,2.144,1172,2.144,1173,2.144,1174,2.144,1175,2.144,1176,2.144,1177,2.144,1178,2.144,1179,2.144,1180,3.207,1181,3.207,1182,2.144,1183,2.144,1184,4.264,1185,2.144,1186,2.144,1187,2.144,1188,2.144,1189,2.144,1190,2.144,1191,2.144,1192,2.144,1193,2.144,1194,2.144,1195,2.144,1196,2.144,1197,2.144,1198,2.144,1199,2.144,1200,3.207,1201,2.144,1202,2.144,1203,2.144,1204,2.144,1205,2.144,1206,2.144,1207,2.144,1208,2.144,1209,2.144,1210,2.144,1211,2.144,1212,2.144,1213,2.144,1214,2.144,1215,2.144,1216,2.144,1217,2.144,1218,2.144,1219,2.144,1220,3.207,1221,2.144,1222,2.144,1223,2.144,1224,2.144,1225,2.144,1226,3.207,1227,2.144,1228,2.144,1229,2.144,1230,2.144,1231,2.144,1232,2.144,1233,2.144,1234,2.144,1235,2.144,1236,2.144,1237,2.144,1238,2.144,1239,2.144,1240,2.144,1241,2.144,1242,2.144,1243,3.207,1244,2.144,1245,2.144,1246,2.144,1247,2.144,1248,2.144,1249,2.144,1250,2.144,1251,2.144,1252,2.144,1253,2.144,1254,2.144,1255,2.144,1256,2.144,1257,2.144,1258,2.144,1259,2.144,1260,2.144,1261,2.144,1262,2.144,1263,3.207,1264,2.144,1265,2.144,1266,2.144,1267,2.144,1268,3.207,1269,2.144,1270,2.144,1271,2.144,1272,2.144,1273,2.144,1274,2.144,1275,2.144,1276,2.144]],["title/miscellaneous/variables.html",[977,1.557,1277,2.965]],["body/miscellaneous/variables.html",[23,0.586,39,0.04,50,1.22,55,1.524,61,1.458,62,2.597,63,2.575,99,2.767,164,0.022,165,0.029,166,0.022,209,2.43,213,2.43,221,2.767,230,1.524,242,3.155,243,1.123,276,1.981,363,1.123,386,2.441,388,1.694,394,2.43,401,1.981,404,2.131,406,2.83,407,2.83,409,2.43,440,2.196,447,3.155,448,3.155,449,3.155,479,2.131,490,3.503,514,3.503,543,2.43,544,2.83,545,2.83,547,2.83,549,2.83,551,2.83,553,2.83,555,2.83,557,2.83,560,2.83,562,2.43,595,2.83,644,2.767,646,3.155,647,3.155,661,1.892,691,3.674,763,2.43,765,2.43,822,2.83,823,2.83,926,2.43,935,2.83,936,4.586,937,2.83,977,2.131,980,4.586,1003,2.83,1028,4.08,1046,4.08,1103,2.83,1277,2.83,1278,3.438,1279,3.438,1280,3.438,1281,3.438,1282,3.438,1283,3.438,1284,3.438,1285,3.438,1286,3.438]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":908,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":470,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":999,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":490,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":918,"title":{},"body":{"components/TimerComponent.html":{}}}],["12/12",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":740,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":764,"title":{},"body":{"components/SignupComponent.html":{}}}],["2",{"_index":765,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":752,"title":{},"body":{"components/SignupComponent.html":{}}}],["22/22",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":473,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":762,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":766,"title":{},"body":{"components/SignupComponent.html":{}}}],["5.0.0",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1088,"title":{},"body":{"overview.html":{}}}],["6.5.2",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":479,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":1087,"title":{},"body":{"overview.html":{}}}],["75",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["_id",{"_index":795,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["accept",{"_index":1159,"title":{},"body":{"todo.html":{}}}],["access",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{}}}],["accessing",{"_index":696,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{}}}],["account",{"_index":1114,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":380,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":700,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":574,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":486,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["added",{"_index":1223,"title":{},"body":{"todo.html":{}}}],["adding",{"_index":1269,"title":{},"body":{"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"todo.html":{}}}],["admin'},{'name",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminservice",{"_index":82,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":333,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":533,"title":{},"body":{"components/GameOverComponent.html":{}}}],["agnostic",{"_index":1257,"title":{},"body":{"todo.html":{}}}],["allow",{"_index":1157,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":437,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["already",{"_index":731,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1172,"title":{},"body":{"todo.html":{}}}],["amount",{"_index":1046,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":996,"title":{},"body":{"index.html":{},"todo.html":{}}}],["angular/animations",{"_index":651,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/text",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{}}}],["angular/common",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":546,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":548,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":550,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":552,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":554,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":556,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":558,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":561,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":317,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":607,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":657,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":641,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":645,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["another",{"_index":755,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":386,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":616,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":590,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":568,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{}}}],["anything",{"_index":778,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1170,"title":{},"body":{"todo.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["app.component",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":271,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":272,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":149,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appears",{"_index":1236,"title":{},"body":{"todo.html":{}}}],["application/json",{"_index":595,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":275,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":286,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":642,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":681,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["artifacts",{"_index":1022,"title":{},"body":{"index.html":{}}}],["async",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{}}}],["authorization",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{}}}],["authorized",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1231,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["automatic",{"_index":407,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1011,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autosize",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["autowrongguess",{"_index":448,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["away",{"_index":1206,"title":{},"body":{"todo.html":{}}}],["back",{"_index":1161,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1006,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":690,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":655,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1129,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1243,"title":{},"body":{"todo.html":{}}}],["bar",{"_index":559,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["based",{"_index":758,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["beautification",{"_index":1091,"title":{},"body":{"todo.html":{}}}],["before",{"_index":404,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":806,"title":{},"body":{"classes/Team.html":{}}}],["better",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"index.html":{},"todo.html":{}}}],["between",{"_index":763,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":603,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["boolean",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1068,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":1174,"title":{},"body":{"todo.html":{}}}],["box",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["break",{"_index":394,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":336,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":368,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":337,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":449,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1084,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1021,"title":{},"body":{"index.html":{}}}],["built",{"_index":1144,"title":{},"body":{"todo.html":{}}}],["button",{"_index":395,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":689,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":1265,"title":{},"body":{"todo.html":{}}}],["call",{"_index":419,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":870,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":903,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":365,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can't",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{}}}],["canactivate",{"_index":321,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canstart",{"_index":736,"title":{},"body":{"components/SignupComponent.html":{}}}],["case",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catcherror",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1102,"title":{},"body":{"todo.html":{}}}],["category",{"_index":569,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{}}}],["caveats",{"_index":1148,"title":{},"body":{"todo.html":{}}}],["cdktextareaautosize",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{}}}],["center",{"_index":1250,"title":{},"body":{"todo.html":{}}}],["change",{"_index":633,"title":{},"body":{"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1072,"title":{},"body":{"index.html":{},"todo.html":{}}}],["changes",{"_index":634,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":679,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":676,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":677,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["charge",{"_index":366,"title":{},"body":{"components/GameComponent.html":{}}}],["check",{"_index":1041,"title":{},"body":{"index.html":{}}}],["checkanswer",{"_index":584,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":585,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":872,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":588,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["chemistry",{"_index":1128,"title":{},"body":{"todo.html":{}}}],["choices",{"_index":576,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["class",{"_index":87,"title":{"classes/Question.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":563,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":873,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":882,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":420,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":501,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":997,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":387,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["clock",{"_index":866,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":542,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1015,"title":{},"body":{"index.html":{},"todo.html":{}}}],["color",{"_index":691,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":626,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1175,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1080,"title":{},"body":{"index.html":{},"todo.html":{}}}],["common",{"_index":1145,"title":{},"body":{"todo.html":{}}}],["compete",{"_index":716,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":786,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":780,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{}}}],["completed",{"_index":373,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compodoc",{"_index":1135,"title":{},"body":{"todo.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["config",{"_index":1254,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1092,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":663,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1113,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1176,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1268,"title":{},"body":{"todo.html":{}}}],["consist",{"_index":751,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1171,"title":{},"body":{"todo.html":{}}}],["consoleoutput",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":802,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":570,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{}}}],["constructor(private",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":571,"title":{},"body":{"classes/Question.html":{}}}],["constructor(schoolname",{"_index":800,"title":{},"body":{"classes/Team.html":{}}}],["constructors",{"_index":1258,"title":{},"body":{"todo.html":{}}}],["constructs",{"_index":573,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":330,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1118,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":478,"title":{},"body":{"components/GameComponent.html":{}}}],["converting",{"_index":1180,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":513,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":530,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":388,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":646,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["counted",{"_index":406,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":1163,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":919,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["creating",{"_index":1166,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1249,"title":{},"body":{"todo.html":{}}}],["crud",{"_index":1186,"title":{},"body":{"todo.html":{}}}],["csv",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["culture",{"_index":1127,"title":{},"body":{"todo.html":{}}}],["current",{"_index":390,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":422,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":338,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":687,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":688,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":675,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":521,"title":{},"body":{"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":809,"title":{},"body":{"classes/Team.html":{},"index.html":{},"todo.html":{}}}],["date.now",{"_index":459,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1177,"title":{},"body":{"todo.html":{}}}],["decides",{"_index":1078,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["default",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["deleted",{"_index":1059,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":277,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1049,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1056,"title":{},"body":{"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["dev",{"_index":1005,"title":{},"body":{"index.html":{}}}],["develop",{"_index":1120,"title":{},"body":{"todo.html":{}}}],["development",{"_index":1003,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1167,"title":{},"body":{"todo.html":{}}}],["directive",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1020,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1025,"title":{},"body":{"index.html":{},"todo.html":{}}}],["display",{"_index":435,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":865,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1024,"title":{},"body":{"index.html":{}}}],["dist/server",{"_index":1074,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1123,"title":{},"body":{"todo.html":{}}}],["div",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{}}}],["document",{"_index":1259,"title":{},"body":{"todo.html":{}}}],["documentation",{"_index":920,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["don't",{"_index":776,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":793,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1124,"title":{},"body":{"todo.html":{}}}],["dos",{"_index":1210,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1252,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1142,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1131,"title":{},"body":{"todo.html":{}}}],["dubious",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["dynamic",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1036,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":644,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":770,"title":{},"body":{"components/SignupComponent.html":{}}}],["earned",{"_index":807,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":658,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["efficient",{"_index":659,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["eliminated",{"_index":1201,"title":{},"body":{"todo.html":{}}}],["emergencies",{"_index":1101,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":637,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":878,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":834,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1235,"title":{},"body":{"todo.html":{}}}],["end",{"_index":393,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["endpoint",{"_index":1232,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":1253,"title":{},"body":{"todo.html":{}}}],["ends",{"_index":391,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":782,"title":{},"body":{"components/SignupComponent.html":{}}}],["entered",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{}}}],["environment",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1052,"title":{},"body":{"index.html":{}}}],["err",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["error",{"_index":988,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":989,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["essential",{"_index":1097,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":480,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1149,"title":{},"body":{"todo.html":{}}}],["event",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.target",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["event.total",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":621,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["example",{"_index":784,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1190,"title":{},"body":{"todo.html":{}}}],["execute",{"_index":1033,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":629,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exists",{"_index":364,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1217,"title":{},"body":{"todo.html":{}}}],["exploited",{"_index":1165,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1242,"title":{},"body":{"todo.html":{}}}],["export",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["fails",{"_index":1178,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1116,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":575,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1215,"title":{},"body":{"todo.html":{}}}],["favor",{"_index":1203,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1251,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1139,"title":{},"body":{"todo.html":{}}}],["feel",{"_index":790,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["field",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["file.name",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1013,"title":{},"body":{"index.html":{}}}],["fileupload",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload($event",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["finish",{"_index":1179,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":611,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":339,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":674,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":507,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":623,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":753,"title":{},"body":{"components/SignupComponent.html":{}}}],["fix",{"_index":1160,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1229,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1089,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1027,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1207,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1075,"title":{},"body":{"index.html":{},"todo.html":{}}}],["following",{"_index":1141,"title":{},"body":{"todo.html":{}}}],["font",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["forkjoin",{"_index":652,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":670,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":723,"title":{},"body":{"components/SignupComponent.html":{}}}],["formbuilders",{"_index":1237,"title":{},"body":{"todo.html":{}}}],["forms",{"_index":1239,"title":{},"body":{"todo.html":{}}}],["formsmodule",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["free",{"_index":791,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":326,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":880,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":978,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1038,"title":{},"body":{"index.html":{}}}],["gained",{"_index":433,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":692,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":334,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":335,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":151,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":323,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":153,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gecko",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1018,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":995,"title":{},"body":{"index.html":{}}}],["getadmin",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{}}}],["getcanstart",{"_index":859,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["getpractice",{"_index":819,"title":{},"body":{"injectables/TeamService.html":{}}}],["getquestions",{"_index":344,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{}}}],["gets",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":898,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":820,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":821,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":829,"title":{},"body":{"injectables/TeamService.html":{}}}],["getting",{"_index":993,"title":{"index.html":{},"todo.html":{}},"body":{}}],["gettoken",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["github:angular/web",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":730,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["go",{"_index":1040,"title":{},"body":{"index.html":{}}}],["good",{"_index":904,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1130,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1085,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":693,"title":{"guards/RegisterGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":694,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":409,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":756,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1094,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1095,"title":{},"body":{"todo.html":{}}}],["handle",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerror",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1255,"title":{},"body":{"todo.html":{}}}],["handling",{"_index":992,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["headers",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1039,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":412,"title":{},"body":{"components/GameComponent.html":{}}}],["helpers.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["helpful",{"_index":1260,"title":{},"body":{"todo.html":{}}}],["here",{"_index":1110,"title":{},"body":{"todo.html":{}}}],["heroku",{"_index":1002,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1050,"title":{},"body":{"index.html":{}}}],["holds",{"_index":565,"title":{},"body":{"classes/Question.html":{},"components/TimerComponent.html":{}}}],["hrs",{"_index":527,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["http",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["http://localhost:4200",{"_index":1010,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":598,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptionsjson",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptionswithauth",{"_index":583,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["https://angular.io/guide/practical",{"_index":1245,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1248,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/user",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1185,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1228,"title":{},"body":{"todo.html":{}}}],["human",{"_index":515,"title":{},"body":{"components/GameOverComponent.html":{}}}],["i.e",{"_index":356,"title":{},"body":{"components/GameComponent.html":{}}}],["id",{"_index":808,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["identifier",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":441,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["ignore",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["implements",{"_index":332,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1134,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":667,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":562,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1014,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":647,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indices",{"_index":664,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["inform",{"_index":1212,"title":{},"body":{"todo.html":{}}}],["information",{"_index":442,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["initiate",{"_index":706,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":367,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":167,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1262,"title":{},"body":{"todo.html":{}}}],["input",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["input#get",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{}}}],["inputs",{"_index":614,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["inside",{"_index":1275,"title":{},"body":{"todo.html":{}}}],["instance",{"_index":1081,"title":{},"body":{"index.html":{}}}],["instead",{"_index":917,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":750,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1111,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1000,"title":{},"body":{"index.html":{}}}],["interface",{"_index":1140,"title":{},"body":{"todo.html":{}}}],["internet",{"_index":1115,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":883,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":896,"title":{},"body":{"components/TimerComponent.html":{}}}],["io",{"_index":1202,"title":{},"body":{"todo.html":{}}}],["isn't",{"_index":754,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["isn\\'t",{"_index":792,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1162,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1146,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":405,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["js",{"_index":955,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":1035,"title":{},"body":{"index.html":{}}}],["keep",{"_index":772,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kinda",{"_index":662,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1270,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1267,"title":{},"body":{"todo.html":{}}}],["last",{"_index":1054,"title":{},"body":{"index.html":{},"todo.html":{}}}],["lasts",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":418,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1065,"title":{},"body":{"index.html":{}}}],["legend",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":660,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["limit",{"_index":399,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["literal",{"_index":592,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":411,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":832,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1103,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":345,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":361,"title":{},"body":{"components/GameComponent.html":{}}}],["localstorage",{"_index":1150,"title":{},"body":{"todo.html":{}}}],["log",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1143,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":331,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["login(password",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{}}}],["logs",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":759,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1168,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1155,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1264,"title":{},"body":{"todo.html":{}}}],["lot",{"_index":1151,"title":{},"body":{"todo.html":{}}}],["main",{"_index":329,"title":{},"body":{"components/GameComponent.html":{}}}],["make",{"_index":1136,"title":{},"body":{"todo.html":{}}}],["many",{"_index":432,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(event",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["matbuttonmodule",{"_index":545,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":547,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":549,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":544,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":287,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":551,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(this.questions.length",{"_index":472,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":553,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":555,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":557,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":560,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":400,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1184,"title":{},"body":{"todo.html":{}}}],["meaning",{"_index":1053,"title":{},"body":{"index.html":{}}}],["menu",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["message",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":1226,"title":{},"body":{"todo.html":{}}}],["million",{"_index":1125,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":514,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":871,"title":{},"body":{"components/TimerComponent.html":{}}}],["minify",{"_index":1196,"title":{},"body":{"todo.html":{}}}],["mins",{"_index":526,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":767,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":977,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["models/question",{"_index":450,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["models/team",{"_index":453,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modifying",{"_index":534,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":274,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":276,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":354,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1211,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1106,"title":{},"body":{"todo.html":{}}}],["moving",{"_index":1274,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":524,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":889,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":511,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1263,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":804,"title":{},"body":{"classes/Team.html":{}}}],["n",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["namespaces",{"_index":1227,"title":{},"body":{"todo.html":{}}}],["navigate",{"_index":1009,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":381,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["need",{"_index":777,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["new",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":1189,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":747,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":362,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["ng",{"_index":1017,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ngafterviewinit",{"_index":346,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":612,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":630,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":347,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":1104,"title":{},"body":{"todo.html":{}}}],["node",{"_index":1187,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1077,"title":{},"body":{"index.html":{}}}],["non",{"_index":1096,"title":{},"body":{"todo.html":{}}}],["nothing",{"_index":1076,"title":{},"body":{"index.html":{}}}],["now",{"_index":1200,"title":{},"body":{"todo.html":{}}}],["npm",{"_index":1004,"title":{},"body":{"index.html":{}}}],["null",{"_index":745,"title":{},"body":{"components/SignupComponent.html":{}}}],["number",{"_index":414,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["object",{"_index":440,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":639,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["observable",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":369,"title":{},"body":{"components/GameComponent.html":{}}}],["of(team",{"_index":854,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1100,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":348,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":349,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":627,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":608,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":613,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":635,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":713,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":402,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ones",{"_index":862,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":350,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera/ie",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":861,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1225,"title":{},"body":{"todo.html":{}}}],["otherwise",{"_index":833,"title":{},"body":{"injectables/TeamService.html":{}}}],["out",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1117,"title":{},"body":{"todo.html":{}}}],["output",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":615,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":357,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":508,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":509,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":505,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":522,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":519,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":512,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":517,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1045,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1086,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":944,"title":{"dependencies.html":{}},"body":{"todo.html":{}}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":697,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["papaparse",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["parallel",{"_index":1067,"title":{},"body":{"index.html":{}}}],["param",{"_index":496,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":952,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1147,"title":{},"body":{"todo.html":{}}}],["password",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{}}}],["path",{"_index":320,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pathmatch",{"_index":325,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["payment",{"_index":775,"title":{},"body":{"components/SignupComponent.html":{}}}],["people",{"_index":1213,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":378,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1244,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1061,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1205,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1058,"title":{},"body":{"index.html":{}}}],["play",{"_index":707,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["played",{"_index":540,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":506,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":532,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":541,"title":{},"body":{"components/GameOverComponent.html":{}}}],["point",{"_index":429,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":340,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":341,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1126,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":445,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["possibly",{"_index":1188,"title":{},"body":{"todo.html":{}}}],["post",{"_index":822,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":835,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":577,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["practice]{@link",{"_index":849,"title":{},"body":{"injectables/TeamService.html":{}}}],["practices",{"_index":1240,"title":{},"body":{"todo.html":{}}}],["prescribed",{"_index":1122,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":718,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":392,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":531,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{}}}],["prevents",{"_index":476,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1048,"title":{},"body":{"index.html":{},"todo.html":{}}}],["problem",{"_index":1219,"title":{},"body":{"todo.html":{}}}],["process",{"_index":520,"title":{},"body":{"components/GameOverComponent.html":{}}}],["prod",{"_index":1026,"title":{},"body":{"index.html":{}}}],["production",{"_index":1028,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1047,"title":{},"body":{"index.html":{}}}],["progress",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":994,"title":{},"body":{"index.html":{}}}],["proper",{"_index":1198,"title":{},"body":{"todo.html":{}}}],["properly",{"_index":640,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protractor",{"_index":1037,"title":{},"body":{"index.html":{}}}],["provided",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1230,"title":{},"body":{"todo.html":{}}}],["public",{"_index":567,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{}}}],["purposes",{"_index":1105,"title":{},"body":{"todo.html":{}}}],["put",{"_index":823,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":837,"title":{},"body":{"injectables/TeamService.html":{}}}],["question",{"_index":363,"title":{"classes/Question.html":{}},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questionhelper",{"_index":351,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":586,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":447,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questions",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["questions'},{'name",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions.component.css",{"_index":609,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":610,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questionscomponent",{"_index":156,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":451,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["re",{"_index":1073,"title":{},"body":{"index.html":{}}}],["read",{"_index":1247,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":516,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1042,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1214,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1044,"title":{},"body":{"index.html":{}}}],["reason",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{},"index.html":{}}}],["recognize",{"_index":1224,"title":{},"body":{"todo.html":{}}}],["recompile",{"_index":1071,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":324,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1273,"title":{},"body":{"todo.html":{}}}],["reexporting",{"_index":1220,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["refers",{"_index":1107,"title":{},"body":{"todo.html":{}}}],["register",{"_index":725,"title":{},"body":{"components/SignupComponent.html":{}}}],["register.guard",{"_index":319,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":774,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":318,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":789,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":710,"title":{},"body":{"components/SignupComponent.html":{}}}],["related",{"_index":582,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relevant",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1012,"title":{},"body":{"index.html":{}}}],["rely",{"_index":902,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":1043,"title":{},"body":{"index.html":{}}}],["reportprogress",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["requests",{"_index":661,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1233,"title":{},"body":{"todo.html":{}}}],["res",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["res.json",{"_index":1193,"title":{},"body":{"todo.html":{}}}],["res.send",{"_index":1192,"title":{},"body":{"todo.html":{}}}],["reset",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":885,"title":{},"body":{"components/TimerComponent.html":{}}}],["respective",{"_index":625,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":874,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["restarts",{"_index":1256,"title":{},"body":{"todo.html":{}}}],["result",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":668,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":669,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":671,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":672,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieves",{"_index":359,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{}}}],["return",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["rewrite",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{}}}],["right",{"_index":1079,"title":{},"body":{"index.html":{}}}],["root",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["roughly",{"_index":370,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":701,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":446,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["routermodule",{"_index":315,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":327,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":316,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{}}}],["routing.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":314,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1001,"title":{},"body":{"index.html":{}}}],["running",{"_index":1029,"title":{},"body":{"index.html":{}}}],["runs",{"_index":397,"title":{},"body":{"components/GameComponent.html":{}}}],["rxjs",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":523,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari/chrome",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":466,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["save(team",{"_index":840,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":518,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":510,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":638,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1016,"title":{},"body":{"index.html":{}}}],["school",{"_index":536,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":796,"title":{},"body":{"classes/Team.html":{}}}],["schools",{"_index":803,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":430,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":757,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1062,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1066,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1173,"title":{},"body":{"todo.html":{}}}],["second",{"_index":438,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["seconds",{"_index":352,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":342,"title":{},"body":{"components/GameComponent.html":{}}}],["secs",{"_index":525,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1169,"title":{},"body":{"todo.html":{}}}],["see",{"_index":715,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1158,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":589,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1156,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1119,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1007,"title":{},"body":{"index.html":{},"todo.html":{}}}],["serve",{"_index":355,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["server",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{}}}],["service",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["services",{"_index":1191,"title":{},"body":{"todo.html":{}}}],["services/admin.service",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":452,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":455,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":733,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":720,"title":{},"body":{"components/SignupComponent.html":{}}}],["setinterval",{"_index":875,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":888,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpractice",{"_index":824,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":842,"title":{},"body":{"injectables/TeamService.html":{}}}],["sets",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["setteam",{"_index":825,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":844,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":417,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["shouldn't",{"_index":1271,"title":{},"body":{"todo.html":{}}}],["show",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1112,"title":{},"body":{"todo.html":{}}}],["side",{"_index":1181,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":705,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["signing",{"_index":698,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":322,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":708,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":709,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":158,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":773,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":631,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":781,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":566,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{}}}],["slight",{"_index":1218,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1234,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1272,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1137,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":788,"title":{},"body":{"components/SignupComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["specifically",{"_index":1199,"title":{},"body":{"todo.html":{}}}],["src",{"_index":1276,"title":{},"body":{"todo.html":{}}}],["src/.../async",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":313,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":270,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":543,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":606,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":618,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":619,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":620,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":622,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":617,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":643,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":624,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":632,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":636,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":864,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":877,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":894,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":897,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":893,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":895,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":881,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":884,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":886,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":890,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":891,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":892,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":899,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":879,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/question.ts",{"_index":564,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/app/models/question.ts:13",{"_index":580,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:14",{"_index":579,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:15",{"_index":578,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:2",{"_index":572,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/team.ts",{"_index":794,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":801,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":813,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":814,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":816,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":815,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":812,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":811,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":817,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":810,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:13",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:19",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:27",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:30",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:44",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":504,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":328,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:117",{"_index":385,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:144",{"_index":389,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:154",{"_index":396,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:168",{"_index":413,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:171",{"_index":410,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":444,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":421,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":415,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":423,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":424,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":426,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":427,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":439,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":436,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":431,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":353,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":358,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":360,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:99",{"_index":377,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":703,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:16",{"_index":724,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:18",{"_index":728,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:20",{"_index":729,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":726,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:31",{"_index":714,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:36",{"_index":717,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:41",{"_index":719,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:51",{"_index":721,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":695,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:17",{"_index":699,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:22",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:24",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:27",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:32",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:38",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:51",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:61",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":581,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:15",{"_index":593,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:23",{"_index":591,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:36",{"_index":587,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":818,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:19",{"_index":847,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":846,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":845,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":827,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":843,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":826,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":831,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":836,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":838,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":841,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":830,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":858,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:18",{"_index":860,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":1238,"title":{},"body":{"todo.html":{}}}],["start",{"_index":382,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["started",{"_index":398,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":376,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["state('correct",{"_index":654,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":656,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["statistics",{"_index":1133,"title":{},"body":{"todo.html":{}}}],["still",{"_index":1164,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":876,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":887,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":828,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":416,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{}}}],["stored",{"_index":1023,"title":{},"body":{"index.html":{}}}],["string",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{},"todo.html":{}}}],["stuff",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{},"modules/MaterialModule.html":{},"todo.html":{}}}],["style",{"_index":648,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":722,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":787,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":711,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":683,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1055,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":727,"title":{},"body":{"components/SignupComponent.html":{}}}],["support",{"_index":1082,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["surprising",{"_index":269,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1083,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1064,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1208,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1051,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1008,"title":{},"body":{"index.html":{}}}],["table",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":403,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":760,"title":{},"body":{"components/SignupComponent.html":{}}}],["team",{"_index":343,"title":{"classes/Team.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{}}}],["team._id",{"_index":744,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":539,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":537,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.service",{"_index":594,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":538,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":749,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":848,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":712,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":797,"title":{},"body":{"classes/Team.html":{}}}],["teams",{"_index":769,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":454,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1109,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":867,"title":{},"body":{"components/TimerComponent.html":{}}}],["term",{"_index":1098,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1032,"title":{},"body":{"index.html":{},"todo.html":{}}}],["testing",{"_index":1099,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1031,"title":{},"body":{"index.html":{},"todo.html":{}}}],["textarea",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{}}}],["thing",{"_index":1222,"title":{},"body":{"todo.html":{}}}],["things",{"_index":1153,"title":{},"body":{"todo.html":{}}}],["think",{"_index":900,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":768,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.adminservice",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.password).subscribe",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token.token",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(input.files[0]).subscribe",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":684,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":686,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":483,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":905,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":914,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":464,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":665,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finishanimation",{"_index":678,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":497,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.gameover",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getquestions",{"_index":495,"title":{},"body":{"components/GameComponent.html":{}}}],["this.gettoken",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":863,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":600,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":602,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.post(uri.admin.login",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":852,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":605,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":604,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":857,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":853,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":597,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":601,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":469,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":500,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":907,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":906,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":457,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":467,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":856,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":850,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.put(team",{"_index":855,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":463,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":465,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":682,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":462,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":735,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":910,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":737,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":461,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":702,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.saving",{"_index":528,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":488,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["this.start",{"_index":911,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":915,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":680,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":685,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":666,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":673,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":909,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":746,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":741,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":468,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":456,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":738,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":739,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":458,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":494,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":851,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":599,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":743,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":596,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":742,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":748,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":460,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":535,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":912,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":482,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":489,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":475,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":503,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":491,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":498,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":734,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{}}}],["thoroughly",{"_index":1138,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1108,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1060,"title":{},"body":{"index.html":{}}}],["time",{"_index":401,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":798,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":868,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":869,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":160,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1241,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":732,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":799,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":98,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["token]{@link",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1216,"title":{},"body":{"todo.html":{}}}],["took",{"_index":1057,"title":{},"body":{"index.html":{}}}],["total",{"_index":372,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1093,"title":{},"body":{"todo.html":{}}}],["transactions",{"_index":1204,"title":{},"body":{"todo.html":{}}}],["transition",{"_index":649,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tried",{"_index":1197,"title":{},"body":{"todo.html":{}}}],["tries",{"_index":628,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":650,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":653,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1070,"title":{},"body":{"index.html":{},"todo.html":{}}}],["tslib",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1090,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":374,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":785,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1183,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1182,"title":{},"body":{"todo.html":{}}}],["undefined",{"_index":502,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":761,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":481,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":783,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1030,"title":{},"body":{"index.html":{},"todo.html":{}}}],["until",{"_index":779,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":383,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":839,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["uri.questions.save",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{}}}],["usage#exponential",{"_index":1246,"title":{},"body":{"todo.html":{}}}],["use",{"_index":1019,"title":{},"body":{"index.html":{},"todo.html":{}}}],["used",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["useful",{"_index":1132,"title":{},"body":{"todo.html":{}}}],["user",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["user's",{"_index":428,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["users",{"_index":704,"title":{},"body":{"components/SignupComponent.html":{}}}],["uses",{"_index":1063,"title":{},"body":{"index.html":{}}}],["using",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["value",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1277,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["version",{"_index":998,"title":{},"body":{"index.html":{},"todo.html":{}}}],["via",{"_index":1034,"title":{},"body":{"index.html":{},"todo.html":{}}}],["viewchild",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["viewchild('autosize",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["viewchild(timercomponent",{"_index":443,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{}}}],["virtualquiz",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1121,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1194,"title":{},"body":{"todo.html":{}}}],["wasn't",{"_index":1261,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1069,"title":{},"body":{"index.html":{}}}],["watched",{"_index":1221,"title":{},"body":{"todo.html":{}}}],["way",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["ways",{"_index":1152,"title":{},"body":{"todo.html":{}}}],["web",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1195,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["whether",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["width",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":916,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":913,"title":{},"body":{"components/TimerComponent.html":{}}}],["wipes",{"_index":529,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":771,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1266,"title":{},"body":{"todo.html":{}}}],["works",{"_index":1209,"title":{},"body":{"todo.html":{}}}],["worse",{"_index":901,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1154,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":408,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":805,"title":{},"body":{"classes/Team.html":{}}}],["zone.js",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                autosize\n                            \n                            \n                                consoleOutput\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:44\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:30\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            autosize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CdkTextareaAutosize\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('autosize', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:19\n                            \n                        \n\n                \n                    \n                        Some weird auto-sizing stuff \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:27\n                            \n                        \n\n                \n                    \n                        the password that the user has entered \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:22\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** @ignore */\n  constructor(private adminService: AdminService) { }\n\n  /** Some weird auto-sizing stuff */\n  @ViewChild('autosize', { static: false }) autosize: CdkTextareaAutosize;\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** the password that the user has entered */\n  password: string;\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token.token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Upload the questions to the server */\n  // todo rewrite as template reference variable as better practice\n  //  https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable\n  //   if possible (not sure that it is)\n  fileUpload($event): void {\n    const input = $event.target;\n    this.adminService.uploadQuestions(input.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                        {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:61\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:38\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:27\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:32\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:51\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:24\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsJSON, URI } from '../constants';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token: string;\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password): Observable {\n    // TODO find a better way to do this - can't handle strings for some reason\n    return this.http.post(URI.ADMIN.LOGIN, {password}, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.getToken() })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:99\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:117\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:144\n                \n            \n\n\n            \n                \n                    Called when the current breakStarted ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:154\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:171\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:168\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** @ignore */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    // sets up the seconds() method to actually get the time from the TimerComponent\n    // Dubious if this should actually be in AfterViewInit()\n    setTimeout(() => this.seconds = () => this.timer.milliseconds / 1000, 0);\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current breakStarted ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() { return 0; }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** @ignore */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/models/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:36\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:23\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../models/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  httpOptionsWithAuth: {};\n  /** @ignore */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.getToken() };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** @ignore */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** @ignore */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:31\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:36\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:41\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:51\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:18\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:20\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** @ignore */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes\nafter a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors\nafter a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO add compodoc for documentation\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\nTODO maybe some issues with strings and weird stuff in services in angular can fix with res.send() instead of res.json\ntodo may want to look into using webpack to package backend into a single file (be sure to minify). Last time tried though\n  there was an issue with the code not using the proper directory to look for things (specifically the practice questions)\n  this may not be an issue now that you have eliminated file io in favor of database transactions\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo slight problem with reexporting URI in ts - it isn't watched by ng serve so if a new thing is changed or added you\n  have to restart ng for it to recognize it\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password\ntodo it appears that formBuilders are now the standard way to do forms in angular. Might be worth converting.\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config? This may help with the reexporting URI stuff - or it might not\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo should you be using ignore for the constructors? What could you document about them that would be at all helpful?\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo consider moving the server folder inside the src folder\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
