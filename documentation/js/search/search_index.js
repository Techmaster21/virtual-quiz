var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.86,1,1.378,2,1.456,3,0.226,4,0.226,5,1.062,6,1.062,7,1.062,8,1.062,9,0.433,10,1.867,11,0.326,12,2.875,13,3.362,14,2.966,15,1.751,16,1.751,17,2.587,18,1.062,19,2.61,20,1.553,21,1.594,22,4.036,23,1.594,24,3.362,25,0.291,26,0.87,27,4.806,28,4.036,29,0.87,30,3.362,31,2.801,32,2.875,33,3.736,34,1.935,35,1.24,36,2.241,37,3.235,38,4.036,39,4.485,40,1.192,41,3.362,42,0.796,43,0.034,44,0.485,45,0.625,46,0.796,47,3.362,48,4.036,49,2.241,50,3.736,51,1.16,52,1.378,53,0.995,54,1.607,55,3.362,56,4.036,57,2.241,58,1.594,59,3.098,60,3.362,61,2.336,62,2.431,63,3.362,64,3.893,65,3.362,66,4.806,67,2.241,68,1.751,69,2.278,70,2.431,71,3.362,72,2.241,73,2.155,74,1.633,75,3.362,76,3.362,77,0.531,78,1.334,79,1.47,80,2.875,81,2.801,82,2.241,83,1.124,84,1.476,85,3.362,86,3.475,87,3.362,88,2.241,89,2.875,90,2.155,91,4.485,92,2.241,93,2.241,94,1.751,95,1.594,96,1.943,97,3.362,98,3.362,99,1.138,100,2.155,101,0.653,102,0.485,103,2.241,104,1.436,105,1.62,106,1.167,107,0.258,108,0.127,109,2.431,110,0.971,111,0.816,112,2.241,113,2.241,114,0.796,115,2.241,116,2.241,117,2.102,118,2.241,119,1.594,120,1.436,121,1.289,122,1.867,123,2.241,124,2.241,125,1.044,126,1.167,127,2.241,128,1.867,129,1.62,130,2.241,131,2.241,132,2.241,133,2.241,134,2.241,135,2.241,136,2.241,137,2.431,138,2.241,139,2.241,140,1.62,141,2.241,142,2.241,143,2.241,144,1.867,145,2.241,146,1.62,147,2.241,148,2.241,149,2.241,150,2.241,151,1.867,152,2.801,153,2.241,154,2.241,155,2.241,156,2.241,157,2.241,158,2.241,159,1.867,160,1.867,161,1.867,162,2.241,163,1.867,164,1.867,165,2.241,166,2.801,167,3.362,168,2.241,169,2.241,170,1.867,171,2.241,172,1.167,173,0.971,174,2.241,175,2.241,176,3.362,177,1.289,178,2.801,179,1.867,180,1.867,181,1.867,182,1.867,183,2.241,184,1.436,185,0.889,186,1.62,187,2.241,188,1.62,189,1.62,190,2.241,191,2.241,192,2.241,193,2.241,194,2.241,195,2.241,196,2.155,197,3.362,198,3.362,199,2.801,200,3.362,201,2.241,202,2.241,203,2.801,204,1.867,205,1.436,206,2.241,207,2.241,208,2.155,209,2.241,210,1.867,211,2.241,212,3.362,213,5.046,214,4.036,215,4.036,216,2.241,217,2.241,218,2.241,219,2.241,220,2.241,221,1.867,222,0.889,223,1.456,224,1.062,225,2.126,226,1.062,227,1.062,228,0.749,229,1.062,230,0.688,231,1.062,232,0.688,233,0.632,234,1.062,235,0.749,236,1.062,237,0.688,238,1.062,239,0.749,240,0.971,241,1.062,242,1.062,243,0.012,244,0.017,245,0.012]],["title/injectables/AdminService.html",[37,2.023,246,1.149]],["body/injectables/AdminService.html",[3,0.246,4,0.246,9,0.444,11,0.355,14,2.874,15,1.864,25,0.317,26,0.926,29,0.926,31,3.894,34,2.06,35,1.303,37,2.294,40,1.256,42,1.026,43,0.034,44,0.525,45,0.699,46,1.026,50,3.533,51,1.288,52,1.436,53,1.088,54,0.815,58,2.216,59,2.06,68,1.864,69,2.811,70,2.588,74,1.702,77,1.307,78,1.42,79,1.813,81,2.031,83,0.815,84,1.436,86,3.067,89,2.294,94,1.864,99,1.588,101,0.783,102,0.528,107,0.281,108,0.092,111,0.888,114,1.404,125,1.346,140,1.763,173,1.056,210,2.031,243,0.013,244,0.018,245,0.013,246,1.303,247,1.403,248,2.031,249,2.294,250,3.579,251,3.579,252,4.147,253,3.894,254,3.579,255,3.579,256,4.674,257,3.579,258,1.562,259,2.996,260,2.438,261,1.697,262,2.438,263,2.06,264,3.579,265,4.674,266,2.438,267,3.579,268,3.579,269,2.588,270,2.982,271,2.982,272,3.579,273,3.533,274,2.438,275,2.36,276,3.579,277,3.894,278,2.438,279,2.588,280,3.533,281,2.294,282,1.156,283,2.438,284,1.099,285,3.579,286,1.403,287,3.579,288,2.438,289,3.579,290,2.294,291,3.579,292,3.579,293,2.438,294,3.579,295,2.438,296,2.031,297,2.438,298,2.031,299,2.438,300,1.55,301,3.533,302,2.438,303,2.996,304,2.438,305,1.403,306,1.27,307,1.562,308,1.562,309,2.438,310,2.031,311,1.562,312,1.27,313,2.588,314,1.27,315,1.156,316,1.403,317,1.403,318,1.27,319,2.982,320,2.438,321,3.894,322,2.031,323,2.438,324,3.894,325,2.438,326,2.438,327,2.438,328,2.031,329,2.438,330,4.674,331,3.894,332,2.719,333,2.209,334,2.438,335,2.982,336,2.438,337,1.056,338,1.763,339,2.438,340,2.438,341,2.438,342,2.438,343,2.438,344,2.438,345,2.438,346,2.438,347,3.067,348,2.438,349,2.438,350,4.674,351,2.438,352,2.438,353,2.438,354,2.031,355,3.579,356,2.438,357,2.438,358,2.438,359,3.579,360,2.438,361,2.438,362,2.438,363,2.031,364,2.438,365,2.031,366,1.763]],["title/interfaces/Answer.html",[367,1.367,368,0.97]],["body/interfaces/Answer.html",[3,0.331,4,0.331,9,0.243,11,0.477,25,0.426,26,1.141,43,0.034,44,0.538,45,0.426,51,1.539,52,1.007,53,0.647,58,1.555,77,1.357,79,1.194,99,1.568,101,0.642,107,0.377,108,0.167,110,1.911,114,1.317,117,1.708,125,1.141,172,1.708,173,2.481,177,1.887,184,2.102,243,0.023,244,0.023,245,0.017,282,1.555,284,1.007,300,1.421,367,2.409,368,1.798,369,2.371,370,1.887,371,2.102,372,3.604,373,1.666,374,3.2,375,1.815,376,3.194,377,1.439,378,2.115,379,1.555,380,2.538,381,2.371,382,2.102,383,2.371,384,2.371,385,1.708,386,3.194,387,2.363,388,2.371,389,4.443,390,2.115,391,2.371,392,2.371,393,3.189,394,2.371,395,1.887,396,2.102,397,1.708,398,2.774,399,1.421,400,1.887,401,2.371,402,2.371,403,2.371,404,2.309,405,2.371,406,2.371,407,2.371,408,2.371,409,2.371,410,2.371,411,2.538,412,2.102,413,1.555,414,1.555,415,2.371,416,3.604,417,2.371,418,2.371,419,1.708,420,2.371,421,2.102,422,2.371,423,2.371,424,2.371,425,2.371,426,2.371,427,2.371,428,2.371,429,2.371,430,2.371,431,2.371,432,2.371]],["title/components/AppComponent.html",[0,0.565,228,1.056]],["body/components/AppComponent.html",[0,1.076,1,1.292,2,2.243,3,0.424,4,0.424,5,1.994,6,1.994,7,1.994,8,1.994,9,0.312,11,0.612,18,1.994,19,2.992,20,1.8,21,2.455,23,2.455,43,0.033,44,0.522,96,2.243,101,0.612,102,0.91,107,0.484,108,0.159,222,1.669,223,2.243,224,1.994,225,2.775,226,1.994,227,1.994,228,1.957,229,1.994,230,1.292,231,1.994,232,1.292,233,1.186,234,1.994,235,1.407,236,1.994,237,1.292,238,1.994,239,1.407,240,1.822,241,1.994,242,1.994,243,0.022,244,0.027,245,0.022,318,3.049,433,3.504,434,5.609,435,5.178,436,4.313]],["title/modules/AppModule.html",[437,1.497,438,2.023]],["body/modules/AppModule.html",[1,1.806,3,0.363,4,0.363,9,0.267,20,1.015,43,0.034,101,0.922,102,0.779,104,2.307,105,3.392,106,1.874,107,0.414,108,0.136,222,1.428,228,2.099,230,1.806,232,1.806,235,1.966,237,1.806,239,1.966,243,0.019,244,0.024,245,0.019,305,2.071,437,1.706,438,4.158,439,1.559,440,2.071,441,4.347,442,4.347,443,2.998,444,2.307,445,2.998,446,2.998,447,2.998,448,2.998,449,3.383,450,3.383,451,3.907,452,2.071,453,2.071,454,3.598,455,3.392,456,4.69,457,3.392,458,4.69,459,4.69,460,4.69,461,3.598,462,3.598,463,2.998,464,3.598,465,2.998,466,2.998,467,2.307,468,2.998,469,3.598,470,2.998,471,3.598,472,2.998]],["title/modules/AppRoutingModule.html",[437,1.497,449,1.816]],["body/modules/AppRoutingModule.html",[0,1.044,1,1.58,3,0.42,4,0.42,9,0.309,14,2.168,43,0.034,101,0.9,102,0.901,107,0.479,108,0.158,125,1.077,230,1.58,232,1.58,233,1.174,237,1.58,243,0.021,244,0.026,245,0.021,439,1.803,444,2.669,449,2.961,455,3.01,457,3.72,463,3.468,465,3.468,466,3.468,467,2.669,468,3.468,472,3.468,473,4.163,474,4.163,475,5.145,476,2.908,477,2.396,478,3.579,479,4.163,480,5.086,481,4.286,482,4.652,483,3.468,484,5.145,485,5.145,486,5.145,487,4.163]],["title/classes/Authorization.html",[108,0.119,333,1.644]],["body/classes/Authorization.html",[3,0.306,4,0.306,9,0.401,11,0.441,14,2.686,25,0.394,29,1.334,40,1.036,42,0.944,43,0.034,44,0.483,45,0.67,46,0.944,53,0.944,54,1.6,68,2.177,69,2.769,70,3.023,74,1.742,77,0.718,95,2.652,99,1.349,100,3.306,101,0.696,107,0.349,108,0.115,114,0.99,117,2.492,119,1.437,125,0.784,137,3.023,196,3.884,243,0.016,244,0.022,245,0.016,253,3.482,271,4.998,315,1.437,333,2.177,338,3.46,398,1.982,404,1.811,488,1.579,489,2.525,490,1.982,491,4.382,492,4.18,493,4.18,494,3.73,495,4.18,496,6,497,4.419,498,6,499,3.031,500,4.66,501,3.73,502,5.158,503,4.18,504,3.114,505,3.306,506,4.297,507,4.18,508,3.031,509,4.785,510,2.177,511,4.18,512,3.031,513,4.18,514,3.031,515,3.031,516,4.18,517,2.525,518,1.943,519,3.023,520,4.785,521,3.031,522,2.525,523,1.943,524,4.785,525,3.031,526,3.031,527,3.031,528,2.525,529,3.031,530,2.192,531,3.031,532,1.744,533,3.031,534,3.031,535,3.031,536,3.482,537,4.785,538,4.785,539,4.18,540,4.785]],["title/components/GameComponent.html",[0,0.565,230,0.97]],["body/components/GameComponent.html",[0,0.755,1,0.519,2,1.17,3,0.17,4,0.17,5,0.801,6,0.801,7,0.801,8,0.801,9,0.125,11,0.393,12,2.472,16,1.407,17,2.164,18,0.801,19,2.397,20,1.426,21,1.281,23,1.281,25,0.584,26,0.699,29,0.699,32,2.472,35,1.037,40,1.296,42,0.533,43,0.034,44,0.389,45,0.657,46,0.533,51,1.395,53,1.023,54,1.691,61,2.459,73,2.882,74,1.786,77,0.8,78,1.784,79,1.637,83,1.64,95,1.281,96,1.17,99,1.383,101,0.714,102,0.366,107,0.194,108,0.064,110,1.17,111,0.615,114,0.64,120,1.732,185,1.53,186,2.788,189,1.954,222,0.671,223,1.17,224,0.801,225,1.828,226,0.801,227,0.801,228,0.565,229,0.801,230,1.184,231,0.801,232,0.519,233,1.584,234,0.801,235,0.565,236,0.801,237,0.519,238,0.801,239,1.289,240,2.336,241,0.801,242,0.801,243,0.022,244,0.014,245,0.009,263,3.193,270,2.251,284,1.506,300,1.17,315,1.6,316,0.972,337,2.19,368,1.184,373,0.903,375,1.229,377,1.505,379,0.801,382,1.732,399,2.19,411,1.555,413,1.281,414,1.281,419,1.407,452,0.972,470,1.408,477,0.972,483,3.746,490,1.828,491,1.954,497,2.788,504,1.555,505,1.732,510,1.407,523,2.882,541,1.408,542,2.251,543,2.702,544,3.375,545,3.375,546,2.702,547,3.375,548,4.496,549,2.441,550,2.164,551,2.812,552,3.375,553,2.788,554,3.856,555,3.856,556,2.702,557,3.856,558,4.216,559,3.856,560,3.413,561,1.408,562,2.587,563,2.716,564,2.045,565,2.702,566,1.69,567,1.555,568,2.251,569,2.702,570,1.732,571,1.69,572,1.69,573,3.856,574,2.251,575,2.251,576,2.702,577,2.251,578,2.702,579,2.251,580,2.702,581,3.856,582,2.788,583,2.702,584,1.69,585,2.251,586,1.69,587,2.702,588,2.251,589,2.702,590,1.954,591,1.17,592,1.732,593,2.702,594,1.69,595,1.69,596,2.702,597,2.702,598,2.472,599,1.732,600,1.69,601,2.702,602,1.732,603,1.954,604,2.702,605,1.407,606,2.702,607,1.954,608,2.251,609,2.251,610,2.702,611,2.788,612,1.69,613,2.251,614,1.69,615,1.948,616,1.69,617,3.512,618,2.702,619,2.251,620,2.702,621,1.69,622,1.954,623,1.69,624,1.69,625,3.656,626,1.69,627,1.69,628,2.251,629,3.212,630,2.702,631,2.702,632,2.251,633,1.69,634,2.251,635,1.69,636,1.954,637,1.69,638,1.732,639,1.69,640,2.702,641,1.69,642,2.702,643,1.69,644,2.788,645,1.954,646,1.954,647,1.408,648,1.083,649,3.856,650,3.375,651,1.408,652,2.251,653,1.732,654,1.954,655,1.69,656,1.69,657,1.69,658,2.702,659,3.375,660,1.083,661,2.702,662,3.375,663,3.512,664,1.555,665,1.222,666,2.702,667,2.164,668,3.375,669,3.856,670,1.408,671,1.69,672,1.69,673,1.083,674,1.408,675,1.69,676,1.69,677,2.702,678,3.375,679,1.69,680,1.69,681,2.251,682,1.69,683,1.222,684,3.212,685,3.375,686,4.496,687,1.69,688,3.375,689,1.69,690,0.972,691,1.69,692,1.408,693,1.69,694,1.222]],["title/components/GameOverComponent.html",[0,0.565,232,0.97]],["body/components/GameOverComponent.html",[0,0.95,1,0.882,2,1.744,3,0.29,4,0.29,5,1.361,6,1.361,7,1.361,8,1.361,9,0.213,11,0.418,12,2.58,16,2.096,17,2.979,18,1.361,19,2.777,20,1.652,21,1.908,23,1.908,25,0.373,26,1.041,29,1.041,32,3.229,35,1.428,40,1.148,42,0.566,43,0.034,44,0.535,45,0.604,46,0.566,52,1.236,53,0.794,54,0.96,61,2.096,74,1.693,77,0.68,83,2.04,96,1.744,101,0.676,102,0.621,106,2.096,107,0.33,108,0.109,111,1.045,114,0.68,125,1.303,126,2.096,128,3.353,185,1.999,222,1.139,223,1.744,224,1.361,225,2.388,226,1.361,227,1.361,228,0.96,229,1.361,230,0.882,231,1.361,232,1.547,233,1.707,234,1.361,235,0.96,236,1.361,237,0.882,238,1.361,239,0.96,240,1.243,241,1.361,242,1.361,243,0.015,244,0.021,245,0.028,269,2.911,284,1.236,286,2.316,316,1.652,337,1.243,373,1.346,399,1.243,453,1.652,467,3.525,490,1.908,510,2.096,564,2.446,570,3.229,615,1.744,638,2.58,648,1.84,651,2.391,653,2.58,654,2.076,665,2.076,673,3.229,681,2.391,690,1.652,694,2.911,695,4.581,696,2.391,697,4.025,698,4.025,699,4.648,700,4.025,701,5.647,702,5.499,703,2.391,704,4.025,705,2.87,706,4.025,707,2.911,708,3.353,709,4.025,710,2.87,711,4.025,712,3.353,713,2.87,714,5.857,715,4.648,716,4.648,717,4.648,718,4.025,719,4.025,720,2.87,721,2.87,722,2.076,723,2.391,724,2.87,725,2.87,726,2.911,727,4.025,728,4.025,729,4.025,730,4.025,731,4.025]],["title/modules/MaterialModule.html",[437,1.497,450,1.816]],["body/modules/MaterialModule.html",[3,0.434,4,0.434,9,0.319,11,0.626,43,0.034,101,0.922,102,0.931,107,0.495,108,0.163,125,1.113,243,0.022,244,0.027,245,0.022,437,2.489,439,2.62,444,2.758,450,3.021,455,3.111,457,3.796,732,3.111,733,4.72,734,5.25,735,4.374,736,4.302,737,4.374,738,4.302,739,4.374,740,4.302,741,4.374,742,4.302,743,4.374,744,4.302,745,4.374,746,4.302,747,4.374,748,4.302,749,4.302,750,4.374,751,4.302,752,3.111]],["title/interfaces/PracticeQuestion.html",[367,1.367,380,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.33,4,0.33,9,0.243,11,0.476,25,0.425,26,1.139,43,0.034,44,0.537,45,0.425,51,1.538,52,1.005,53,0.645,58,1.55,77,1.356,79,1.191,99,1.567,101,0.641,107,0.376,108,0.167,110,1.907,114,1.316,117,1.703,125,1.139,172,1.703,173,2.479,177,1.882,184,2.096,243,0.023,244,0.023,245,0.017,282,1.55,284,1.005,300,1.417,367,2.407,368,1.707,369,2.365,370,1.882,371,2.096,372,3.599,373,1.664,374,3.197,375,1.812,376,3.19,377,1.48,378,2.113,379,1.55,380,3.063,381,3.184,382,2.096,383,2.365,384,2.365,385,1.703,386,3.19,387,2.359,388,2.365,389,4.441,390,2.113,391,2.365,392,2.365,393,3.184,394,2.365,395,1.882,396,2.096,397,1.703,398,2.773,399,1.417,400,1.882,401,2.365,402,2.365,403,2.365,404,2.306,405,2.365,406,2.365,407,2.365,408,2.365,409,2.365,410,2.365,411,2.533,412,2.096,413,1.55,414,1.55,415,2.365,416,3.599,417,2.365,418,2.365,419,1.703,420,2.365,421,2.096,422,2.365,423,2.365,424,2.365,425,2.365,426,2.365,427,2.365,428,2.365,429,2.365,430,2.365,431,2.365,432,2.365]],["title/classes/Question.html",[108,0.119,377,0.817]],["body/classes/Question.html",[3,0.41,4,0.41,9,0.301,11,0.737,25,0.527,26,1.31,35,1.556,40,1.251,42,0.801,43,0.033,44,0.41,45,0.751,46,0.801,77,1.512,107,0.467,108,0.154,243,0.021,244,0.026,245,0.021,377,1.683,390,2.49,398,2.974,488,2.114,683,3.992,753,3.382,754,2.935,755,3.382,756,4.537,757,4.059,758,4.059,759,5.065,760,5.521,761,5.521,762,5.521,763,4.599,764,4.059,765,4.059,766,4.059]],["title/classes/QuestionPreparer.html",[108,0.119,767,2.283]],["body/classes/QuestionPreparer.html",[3,0.321,4,0.321,9,0.236,11,0.463,20,1.218,25,0.413,29,1.361,40,1.062,42,0.968,43,0.034,44,0.495,45,0.638,46,0.968,51,1.502,53,0.627,54,1.064,64,3.548,77,1.375,84,0.977,90,2.77,99,1.601,101,0.629,107,0.366,108,0.186,110,2.459,114,1.023,119,1.508,125,1.567,129,2.3,144,2.65,243,0.016,244,0.022,245,0.016,337,1.378,368,1.617,370,3.029,373,1.064,374,2.486,375,1.158,377,1.468,379,1.508,390,2.089,404,2.459,411,3.029,488,1.657,490,2.048,491,4.331,532,1.83,542,3.599,625,3.124,664,2.486,667,2.039,767,3.124,768,2.65,769,5.263,770,2.77,771,4.321,772,4.321,773,4.321,774,3.181,775,4.321,776,5.263,777,3.599,778,3.599,779,4.321,780,3.181,781,3.599,782,4.907,783,4.321,784,3.181,785,4.321,786,4.321,787,4.585,788,3.181,789,3.599,790,3.124,791,3.181,792,3.181,793,3.181,794,3.181,795,3.181,796,3.181,797,3.181,798,3.181,799,3.181,800,3.181,801,3.599,802,3.181,803,3.181,804,3.181,805,4.321,806,3.181,807,4.321,808,3.181,809,3.181,810,3.181,811,3.181,812,3.181,813,3.181,814,3.181,815,4.321,816,4.321,817,3.181,818,3.181,819,3.181,820,3.181,821,3.181,822,2.039,823,2.3,824,2.65,825,2.65,826,2.3,827,2.65,828,3.181,829,3.181,830,3.181,831,3.181]],["title/injectables/QuestionService.html",[246,1.149,563,1.816]],["body/injectables/QuestionService.html",[3,0.341,4,0.341,9,0.251,11,0.492,15,2.344,25,0.439,26,1.164,29,1.164,35,1.554,40,1.168,42,0.887,43,0.034,44,0.454,45,0.73,46,0.887,51,1.164,52,1.382,53,0.887,68,2.344,69,2.133,84,1.038,94,2.344,99,0.953,101,0.858,102,0.731,107,0.389,108,0.191,111,1.23,114,1.278,125,1.164,243,0.017,244,0.023,245,0.017,246,1.639,247,1.944,249,2.884,258,2.166,259,3.458,261,2.133,275,2.663,284,1.382,303,2.166,305,1.944,306,1.76,307,2.166,308,2.166,312,1.76,314,1.76,315,1.602,317,1.944,318,1.76,332,3.458,333,2.635,368,1.382,375,1.639,377,1.453,379,1.602,419,2.344,553,3.901,563,2.589,564,2.554,605,2.344,615,2.503,754,3.254,778,3.749,832,2.815,833,3.254,834,5.059,835,4.5,836,4.5,837,4.5,838,5.394,839,3.379,840,4.5,841,3.749,842,3.379,843,3.379,844,3.749,845,3.749,846,3.379,847,2.815,848,2.815,849,2.815,850,3.379,851,3.379,852,3.749,853,3.379,854,5.394,855,4.494,856,3.379,857,4.215,858,3.379,859,3.379]],["title/classes/QuestionStore.html",[108,0.119,385,1.644]],["body/classes/QuestionStore.html",[3,0.269,4,0.269,9,0.198,11,0.388,25,0.346,26,0.987,29,0.987,34,2.197,40,1.293,42,1.017,43,0.034,44,0.596,45,0.67,46,1.017,51,1.598,52,0.818,53,1.09,54,1.492,58,1.81,77,1.339,78,1.057,79,1.624,99,1.723,101,0.555,107,0.307,108,0.169,110,2.11,114,1.222,117,1.387,125,0.987,172,1.387,173,2.493,177,2.197,184,2.447,243,0.02,244,0.02,245,0.014,282,1.263,284,1.172,300,1.654,367,2.11,368,1.497,370,3.467,371,1.707,372,2.76,373,1.276,374,2.197,375,1.39,376,2.447,377,1.26,378,2.193,379,1.263,380,2.197,381,1.926,382,2.447,383,2.76,384,2.76,385,1.988,386,3.44,387,2.544,388,3.226,389,4.444,390,2.284,391,3.226,392,3.226,393,3.729,394,2.76,395,2.197,396,2.447,397,1.988,398,2.729,399,1.654,400,2.567,401,1.926,402,1.926,403,1.926,404,2.449,405,1.926,406,1.926,407,1.926,408,1.926,409,1.926,410,1.926,411,2.804,412,2.447,413,1.81,414,1.81,415,2.76,416,3.226,417,1.926,418,1.926,419,1.988,420,2.76,421,2.86,422,2.76,423,1.926,424,1.926,425,1.926,426,1.926,427,1.926,428,1.926,429,1.926,430,1.926,431,1.926,432,1.926,488,1.387,553,1.926,860,3.817,861,3.817,862,2.664,863,2.664,864,2.664,865,2.664,866,2.664,867,2.664,868,2.664,869,2.664,870,2.664,871,2.664,872,2.664,873,2.664,874,2.664,875,2.664,876,2.664,877,2.664,878,2.664]],["title/components/QuestionsComponent.html",[0,0.565,235,1.056]],["body/components/QuestionsComponent.html",[0,0.958,1,0.737,2,1.532,3,0.242,4,0.242,5,1.137,6,1.137,7,1.137,8,1.137,9,0.178,11,0.349,16,1.843,18,1.137,19,2.658,20,1.581,21,1.677,23,1.677,25,0.672,26,0.915,29,0.915,35,1.291,40,1.234,42,0.829,43,0.034,44,0.499,45,0.695,46,0.829,51,1.339,53,0.829,54,1.405,61,1.843,62,2.558,73,2.973,77,0.838,80,2.268,84,1.087,95,2.199,96,1.532,101,0.753,102,0.519,107,0.276,108,0.091,111,0.874,114,0.568,119,1.137,120,3.17,121,3.161,125,0.621,146,2.558,186,3.354,203,1.999,208,1.538,222,0.952,223,1.532,224,1.137,225,2.199,226,1.137,227,1.137,228,0.802,229,1.137,230,0.737,231,1.137,232,0.737,233,0.677,234,1.137,235,1.551,236,1.137,237,0.737,238,1.137,239,0.802,240,1.039,241,1.137,242,1.137,243,0.024,244,0.018,245,0.012,263,2.669,273,3.864,284,1.425,286,2.036,300,1.532,306,1.25,315,1.137,337,1.039,368,1.816,375,1.801,377,1.45,379,1.137,390,1.963,490,1.677,549,3.87,550,3.17,551,4.12,563,2.978,567,1.381,582,2.558,599,1.538,615,2.143,628,2.947,632,2.947,634,2.947,647,1.999,663,2.947,684,1.999,756,2.558,787,2.947,801,1.999,841,1.999,879,1.999,880,4.202,881,4.202,882,4.202,883,3.538,884,4.638,885,3.538,886,2.947,887,3.538,888,4.202,889,2.399,890,3.538,891,2.399,892,2.399,893,2.399,894,2.399,895,3.501,896,2.399,897,3.538,898,2.399,899,3.538,900,2.947,901,2.036,902,3.538,903,3.538,904,3.538,905,4.638,906,2.399,907,4.202,908,3.538,909,2.399,910,2.947,911,3.538,912,3.538,913,3.538,914,3.538,915,2.268,916,3.501,917,4.12,918,2.558,919,2.558,920,3.501,921,4.202,922,2.399,923,1.999,924,2.399,925,2.399,926,2.399,927,3.538,928,2.399,929,3.538,930,3.538,931,2.399,932,1.999,933,1.381,934,2.399,935,2.399,936,2.399,937,2.399,938,2.399,939,2.399,940,2.399,941,2.399,942,2.399,943,2.399,944,3.538,945,2.399,946,2.399,947,2.399,948,2.399,949,2.399,950,2.399,951,2.399,952,2.399,953,2.399,954,2.399,955,2.399,956,3.538,957,2.399,958,3.538,959,3.538,960,2.399,961,2.399,962,1.999,963,2.399]],["title/guards/RegisterGuard.html",[478,2.023,964,2.023]],["body/guards/RegisterGuard.html",[3,0.407,4,0.407,9,0.3,11,0.588,16,2.104,25,0.525,29,1.306,35,1.692,40,1.093,42,0.797,43,0.034,44,0.407,45,0.525,46,0.797,53,0.797,74,2.101,99,1.139,101,0.802,102,0.874,107,0.465,108,0.153,111,1.471,114,1.196,233,1.627,243,0.021,244,0.026,245,0.021,246,1.839,284,1.551,286,2.905,317,2.324,318,2.104,337,1.75,399,1.75,477,2.324,478,3.236,481,5.048,504,2.905,505,3.236,562,3.537,564,2.625,570,3.236,592,3.236,648,2.589,653,2.589,670,4.206,690,2.324,703,3.365,964,3.236,965,3.365,966,3.365,967,5.049,968,5.049,969,5.049,970,4.039,971,4.206,972,4.039,973,5.049,974,4.206,975,4.039]],["title/components/SignupComponent.html",[0,0.565,237,0.97]],["body/components/SignupComponent.html",[0,0.796,1,0.579,2,1.276,3,0.19,4,0.19,5,0.894,6,0.894,7,0.894,8,0.894,9,0.14,11,0.274,12,1.889,16,1.535,17,2.324,18,0.894,19,2.483,20,1.477,21,1.397,23,1.397,25,0.245,26,0.762,29,0.762,32,2.627,33,3.415,35,1.114,40,1.159,42,0.372,43,0.034,44,0.497,45,0.383,46,0.372,51,1.06,53,0.808,54,1.371,59,2.712,61,2.455,68,1.535,73,3.021,74,1.493,78,1.765,79,1.619,83,2.079,84,1.565,85,3.021,87,3.704,90,3.021,96,1.276,99,0.831,101,0.686,102,0.408,104,1.209,107,0.217,108,0.071,111,0.687,125,1.06,164,3.415,166,1.571,173,2.042,185,2.022,199,2.454,205,1.889,221,3.415,222,0.748,223,1.276,224,0.894,225,1.943,226,0.894,227,0.894,228,0.631,229,0.894,230,0.579,231,0.894,232,0.579,233,1.621,234,0.894,235,0.631,236,0.894,237,1.259,238,0.894,239,0.631,240,0.817,241,0.894,242,0.894,243,0.01,244,0.015,245,0.01,269,2.131,284,1.565,316,1.085,337,1.926,354,2.454,368,0.905,373,0.985,375,1.073,377,0.762,387,2.416,399,2.133,404,1.276,477,1.085,482,4.739,490,1.943,494,2.964,497,2.131,505,2.627,510,1.535,523,2.627,550,1.889,560,3.873,561,1.571,562,2.712,564,2.133,570,1.889,574,2.454,579,2.454,582,2.131,591,1.776,592,1.889,598,1.889,599,2.627,603,2.131,605,1.535,611,3.685,615,2.042,629,2.454,636,2.964,638,1.889,648,1.209,653,2.324,654,3.216,664,2.359,665,1.364,667,1.889,673,2.627,674,2.454,690,1.695,723,2.454,726,3.216,822,1.889,823,2.131,849,1.571,852,1.571,886,3.415,901,2.359,915,2.627,971,2.454,976,1.571,977,2.131,978,2.946,979,3.873,980,3.626,981,2.946,982,3.626,983,3.626,984,4.447,985,3.626,986,4.099,987,3.157,988,2.946,989,1.886,990,2.454,991,2.946,992,1.886,993,4.099,994,1.886,995,1.886,996,2.946,997,1.886,998,2.454,999,4.099,1000,2.454,1001,1.886,1002,2.946,1003,1.886,1004,1.886,1005,3.927,1006,1.886,1007,1.886,1008,1.886,1009,1.886,1010,1.886,1011,1.886,1012,2.946,1013,2.946,1014,2.946,1015,2.946,1016,1.886,1017,1.886,1018,2.946,1019,2.946,1020,2.946,1021,1.886,1022,1.886,1023,1.886,1024,1.886,1025,1.886,1026,3.626,1027,2.946,1028,2.946,1029,3.626,1030,1.886,1031,2.946,1032,4.713,1033,2.946,1034,2.946,1035,4.099,1036,2.946,1037,2.946,1038,2.131,1039,2.454,1040,2.946,1041,2.946,1042,2.131,1043,4.099,1044,2.964,1045,2.454,1046,4.099,1047,2.454,1048,2.946,1049,2.454,1050,2.454,1051,4.713,1052,2.946,1053,1.571,1054,2.131,1055,2.454,1056,2.454,1057,2.964,1058,2.946,1059,4.713,1060,2.946,1061,2.946,1062,2.454,1063,2.454,1064,2.946,1065,2.946,1066,2.946,1067,2.946,1068,2.454,1069,2.454,1070,1.886,1071,1.886]],["title/classes/Team.html",[83,1.056,108,0.119]],["body/classes/Team.html",[3,0.323,4,0.323,9,0.237,11,0.631,25,0.416,26,1.122,35,1.332,40,1.28,42,0.631,43,0.033,44,0.532,45,0.769,46,1.207,59,2.831,61,3.123,77,1.401,83,2.16,95,1.516,107,0.368,108,0.121,185,2.256,233,1.603,243,0.016,244,0.022,245,0.022,347,3.558,373,1.45,377,1.273,378,1.952,398,3.032,404,2.131,414,1.516,488,1.665,549,4.111,550,3.154,615,2.798,622,3.558,683,4.205,726,4.111,998,4.593,1000,4.736,1063,4.098,1072,2.664,1073,4.736,1074,5.685,1075,5.685,1076,3.198,1077,3.198,1078,4.336,1079,4.92,1080,4.92,1081,4.593,1082,4.92,1083,4.92,1084,4.098,1085,3.198,1086,3.198,1087,3.198,1088,3.198,1089,3.198,1090,3.198,1091,3.198]],["title/injectables/TeamService.html",[246,1.149,564,1.367]],["body/injectables/TeamService.html",[3,0.259,4,0.259,9,0.19,11,0.373,15,1.935,25,0.333,26,0.961,29,0.961,34,2.138,35,1.342,40,1.27,42,1.078,43,0.034,44,0.551,45,0.753,46,1.078,52,1.779,53,1.078,54,0.858,58,1.761,69,2.781,74,1.744,77,1.134,78,1.018,79,1.851,83,2.168,84,1.561,94,1.935,99,1.672,101,0.771,102,0.555,107,0.295,108,0.165,109,2.687,111,0.934,114,1.351,125,0.961,126,1.935,140,1.855,173,1.111,233,1.048,243,0.013,244,0.019,245,0.013,246,1.353,247,1.476,249,2.382,252,4.234,258,1.645,259,3.069,261,1.761,275,2.704,277,3.989,279,2.687,280,3.639,281,2.382,282,1.216,284,1.141,286,2.138,296,2.137,298,2.137,300,1.609,301,3.639,303,2.382,305,1.476,306,1.336,307,1.645,308,1.645,312,1.336,314,1.336,315,1.216,316,1.476,317,1.476,318,1.336,319,3.095,321,3.989,322,2.137,324,3.095,331,2.137,332,1.645,333,1.336,335,2.137,363,2.137,365,2.137,366,1.855,373,1.242,387,2.409,398,2.512,419,1.935,490,1.761,510,1.935,564,1.609,638,2.382,660,3.069,833,2.687,933,3.049,1073,3.095,1081,2.137,1092,2.137,1093,3.715,1094,3.715,1095,3.095,1096,3.095,1097,2.566,1098,3.715,1099,2.566,1100,3.715,1101,2.566,1102,3.715,1103,2.566,1104,3.715,1105,2.566,1106,3.715,1107,3.715,1108,2.566,1109,2.566,1110,2.566,1111,2.566,1112,2.566,1113,2.566,1114,1.855,1115,2.566,1116,2.566,1117,2.566,1118,2.566,1119,4.368,1120,2.566,1121,2.566,1122,2.566,1123,2.566,1124,4.788,1125,2.566,1126,2.566,1127,2.566,1128,2.566,1129,2.566,1130,2.566,1131,2.566,1132,2.566,1133,2.566]],["title/injectables/TimeService.html",[246,1.149,987,2.023]],["body/injectables/TimeService.html",[3,0.414,4,0.414,9,0.304,11,0.597,15,2.654,25,0.533,29,1.318,35,1.703,40,1.103,42,0.809,43,0.034,44,0.414,45,0.533,46,0.809,51,1.318,53,0.809,94,2.654,101,0.868,102,0.887,107,0.472,108,0.155,111,1.493,114,0.971,185,2.302,233,1.437,243,0.021,244,0.026,245,0.021,246,1.856,247,2.359,249,3.267,258,2.628,259,3.719,261,2.416,275,2.629,290,3.267,305,2.359,306,2.136,307,2.628,308,2.628,312,2.136,314,2.136,315,1.944,317,2.359,318,2.136,387,2.416,453,2.933,591,2.208,833,3.685,855,3.416,987,3.267,1057,3.685,1134,3.416,1135,5.801,1136,4.1,1137,4.1,1138,4.246,1139,5.096,1140,5.096,1141,4.1]],["title/components/TimerComponent.html",[0,0.565,239,1.056]],["body/components/TimerComponent.html",[0,0.778,1,0.781,2,1.599,3,0.256,4,0.256,5,1.205,6,1.205,7,1.205,8,1.205,9,0.189,11,0.37,18,1.205,19,2.698,20,1.605,21,1.749,23,1.749,25,0.33,26,0.955,29,0.955,34,2.123,40,1.293,42,0.501,43,0.034,44,0.438,45,0.686,46,0.501,53,1.14,54,1.933,62,2.668,68,1.922,77,0.874,78,1.009,79,0.926,80,2.365,84,0.781,96,1.599,99,1.605,101,0.37,102,0.55,107,0.293,108,0.096,114,0.874,119,1.205,185,2.162,188,1.838,208,1.629,222,1.009,223,1.599,224,1.205,225,2.26,226,1.205,227,1.205,228,0.85,229,1.205,230,0.781,231,1.205,232,0.781,233,0.717,234,1.205,235,0.85,236,1.205,237,0.781,238,1.205,239,1.594,240,2.684,241,1.205,242,1.205,243,0.013,244,0.019,245,0.013,263,2.743,395,1.463,404,2.065,413,1.749,452,2.743,501,4.234,560,4.234,567,1.463,575,3.972,585,3.972,591,2.065,602,3.245,607,2.668,615,2.465,617,2.117,619,3.972,625,2.668,652,3.619,690,2.5,692,3.619,707,3.94,722,1.838,754,2.668,895,3.619,901,1.463,1042,2.668,1050,3.074,1138,2.117,1142,2.117,1143,3.69,1144,3.69,1145,3.69,1146,4.345,1147,3.69,1148,5.449,1149,4.345,1150,4.767,1151,4.767,1152,3.972,1153,5.063,1154,4.767,1155,2.542,1156,3.69,1157,2.542,1158,2.542,1159,3.69,1160,5.281,1161,2.542,1162,4.767,1163,2.542,1164,4.767,1165,3.69,1166,4.767,1167,2.542,1168,2.542,1169,2.542,1170,2.542,1171,2.542,1172,2.542,1173,3.69,1174,2.542,1175,2.542,1176,2.542,1177,2.542,1178,2.542,1179,2.542,1180,2.542,1181,1.838,1182,4.767,1183,4.345,1184,4.767,1185,2.542,1186,2.542,1187,2.542,1188,2.542,1189,2.542,1190,2.542,1191,2.542,1192,2.542,1193,2.542,1194,2.542]],["title/coverage.html",[1195,3.581]],["body/coverage.html",[0,1.031,1,0.946,9,0.229,10,2.566,20,0.869,37,1.975,43,0.034,45,0.4,83,1.03,84,0.946,108,0.206,208,4.214,228,1.03,230,0.946,232,0.946,235,1.03,237,0.946,239,1.03,243,0.016,244,0.022,245,0.016,246,1.891,248,2.566,275,2.004,312,1.605,313,2.228,314,1.605,333,1.605,367,1.831,368,0.946,370,2.988,371,3.093,377,0.797,378,1.223,380,1.773,385,2.202,400,1.773,413,3.053,433,2.566,439,1.334,467,1.975,478,1.975,489,2.566,501,3.756,519,2.228,541,2.566,562,2.777,563,1.773,564,1.334,591,1.334,644,2.228,645,2.228,646,2.228,695,2.566,696,2.566,732,2.228,753,2.566,767,2.228,768,2.566,832,2.566,879,2.566,918,2.228,919,2.228,964,1.975,966,2.566,976,2.566,987,1.975,1072,2.566,1092,2.566,1114,2.228,1134,2.566,1142,2.566,1195,2.566,1196,2.566,1197,3.081,1198,3.081,1199,6.485,1200,4.227,1201,3.081,1202,4.24,1203,4.227,1204,3.081,1205,3.081,1206,4.227,1207,4.227,1208,4.227,1209,2.566,1210,3.521,1211,2.566,1212,2.566,1213,3.521,1214,3.521,1215,2.566,1216,4.227,1217,4.683,1218,2.566,1219,2.566,1220,2.566,1221,2.566,1222,2.566,1223,3.081,1224,4.227,1225,3.935,1226,2.566,1227,2.228,1228,2.566,1229,2.566,1230,3.521,1231,3.521,1232,2.566,1233,2.566,1234,3.081,1235,3.081]],["title/dependencies.html",[440,2.183,1236,2.641]],["body/dependencies.html",[43,0.034,52,1.345,102,0.948,104,2.807,105,3.838,106,2.764,243,0.023,244,0.027,245,0.023,306,2.281,310,3.649,311,3.402,440,2.52,477,2.52,517,3.649,518,2.807,664,2.52,789,3.649,857,3.649,923,3.649,1237,6.309,1238,4.38,1239,5.307,1240,4.38,1241,4.38,1242,4.38,1243,4.38,1244,3.649,1245,4.38,1246,4.38,1247,4.38,1248,4.38,1249,4.38,1250,4.38,1251,4.421,1252,4.38,1253,4.38,1254,4.38,1255,3.838,1256,4.38,1257,3.649,1258,4.38,1259,4.38,1260,4.38,1261,4.38,1262,4.38,1263,4.38,1264,4.38]],["title/miscellaneous/functions.html",[1265,1.693,1266,3.161]],["body/miscellaneous/functions.html",[25,0.572,42,1.129,43,0.031,44,0.577,45,0.572,46,1.129,78,1.747,110,1.907,126,2.293,243,0.023,244,0.027,245,0.023,261,2.088,275,2.886,282,2.713,284,1.353,290,2.823,300,1.907,311,3.413,312,2.773,366,3.184,378,1.747,397,2.293,421,3.413,790,3.184,826,3.85,901,2.534,910,3.668,933,2.534,1038,3.184,1202,3.184,1225,3.184,1226,4.768,1227,3.184,1230,3.668,1231,4.768,1232,4.436,1233,4.436,1265,2.823,1266,3.668,1267,5.324,1268,3.668,1269,3.668,1270,4.403,1271,4.403,1272,5.324,1273,5.324,1274,4.403,1275,4.403,1276,3.668,1277,3.184,1278,4.403,1279,3.184]],["title/index.html",[25,0.343,172,1.376,602,1.693]],["body/index.html",[0,0.902,4,0.338,9,0.374,20,1.261,43,0.023,44,0.338,51,1.156,52,1.77,84,1.028,121,1.926,122,2.788,126,2.329,129,3.233,146,2.42,160,2.788,182,2.788,243,0.017,244,0.023,245,0.023,290,3.227,311,2.145,375,1.219,378,2.222,386,2.145,390,1.328,397,2.329,412,2.145,414,2.387,436,2.788,452,1.926,453,1.926,510,2.329,518,2.145,532,1.926,567,1.926,568,2.788,590,2.42,591,1.937,598,3.444,605,1.743,770,3.693,827,2.788,845,2.788,1053,2.788,1054,2.42,1055,2.788,1062,2.788,1152,2.788,1181,2.42,1255,2.42,1277,2.42,1279,2.42,1280,5.882,1281,3.347,1282,3.886,1283,5.035,1284,3.347,1285,3.347,1286,6.279,1287,3.347,1288,2.788,1289,3.347,1290,3.347,1291,6.052,1292,3.347,1293,5.035,1294,3.347,1295,4.471,1296,5.035,1297,2.788,1298,4.477,1299,2.788,1300,3.347,1301,3.347,1302,3.347,1303,2.788,1304,3.347,1305,4.477,1306,3.347,1307,3.725,1308,4.471,1309,3.347,1310,3.347,1311,3.347,1312,2.788,1313,3.347,1314,5.882,1315,4.194,1316,3.347,1317,5.761,1318,3.347,1319,2.788,1320,3.347,1321,3.347,1322,3.725,1323,4.477,1324,2.42,1325,4.471,1326,3.725,1327,3.347,1328,3.347,1329,3.347,1330,3.347,1331,4.194,1332,3.347,1333,2.788,1334,4.471,1335,3.347,1336,2.788,1337,3.347,1338,2.788,1339,2.788,1340,2.788,1341,5.035,1342,3.347,1343,3.347,1344,4.471,1345,3.347,1346,4.471,1347,2.788,1348,3.347,1349,3.347,1350,3.347,1351,3.347,1352,3.347,1353,3.347,1354,3.347,1355,4.471,1356,4.471,1357,4.471,1358,3.347,1359,3.347,1360,3.347,1361,3.347,1362,2.788,1363,4.471,1364,3.347,1365,4.471,1366,3.347,1367,3.347,1368,3.347,1369,3.347,1370,3.347,1371,3.347,1372,3.347,1373,3.725]],["title/modules.html",[439,1.862]],["body/modules.html",[43,0.029,106,2.588,178,4.139,205,3.665,243,0.026,244,0.029,245,0.026,438,3.185,439,2.152,449,2.859,450,2.859,1374,4.968,1375,6.02,1376,5.717]],["title/overview.html",[1377,3.581]],["body/overview.html",[1,1.738,2,1.857,43,0.033,222,1.701,228,2.082,230,1.738,232,1.738,235,1.892,237,1.738,239,1.892,243,0.022,244,0.027,245,0.022,247,2.467,369,3.1,437,2.033,438,4.202,439,1.857,440,2.467,441,3.572,442,3.572,443,3.572,444,2.748,445,3.572,446,3.572,447,3.572,448,3.572,449,3.255,450,3.255,451,4.364,452,2.467,453,2.467,476,2.233,488,2.233,664,2.467,667,2.748,822,2.748,823,3.1,824,3.572,825,3.572,964,2.748,1044,3.1,1377,3.572]],["title/routes.html",[476,2.239]],["body/routes.html",[43,0.03,243,0.026,244,0.03,245,0.026,476,2.658]],["title/todo.html",[119,1.252,172,1.376,602,1.693]],["body/todo.html",[0,0.908,3,0.258,14,2.27,15,1.331,20,1.045,43,0.029,44,0.258,51,1.369,52,1.468,53,0.504,58,1.211,59,2.507,64,1.848,69,1.756,74,1.847,80,1.638,83,1.697,84,1.468,89,1.638,94,1.331,95,1.756,100,1.638,106,1.331,109,3.151,110,1.107,117,1.331,119,3.072,121,1.47,126,1.331,137,1.848,159,2.128,161,2.128,163,3.63,170,3.981,173,1.107,177,1.47,179,2.128,180,3.086,181,2.128,185,1.47,188,1.848,196,1.638,204,2.128,205,1.638,233,1.229,240,1.888,243,0.013,244,0.019,245,0.013,261,1.211,263,1.47,275,1.756,281,1.638,282,1.756,347,1.848,367,1.107,368,0.785,373,0.854,376,1.638,377,1.312,378,1.47,390,1.014,395,1.47,396,1.638,397,1.331,437,1.211,440,1.47,476,1.331,500,3.086,504,1.47,506,2.128,522,2.128,528,3.63,530,1.848,532,1.47,536,2.128,567,1.47,577,2.128,590,1.848,591,1.605,592,3.252,598,1.638,599,1.638,605,1.929,607,1.848,613,3.086,615,1.605,622,1.848,660,1.638,752,1.848,755,2.128,763,2.128,770,3.063,790,1.848,822,1.638,826,1.848,900,2.128,901,1.47,915,2.374,916,3.63,917,2.128,920,2.128,932,2.128,933,2.75,965,2.128,974,2.128,977,1.848,979,2.679,990,3.63,1005,2.128,1038,2.679,1039,2.128,1045,2.128,1049,3.086,1054,3.151,1056,2.128,1068,2.128,1069,2.128,1084,2.128,1181,3.151,1196,2.128,1244,2.128,1255,1.848,1257,3.086,1276,2.128,1282,1.848,1288,3.086,1297,2.128,1298,3.086,1299,3.63,1303,3.086,1307,3.086,1312,2.128,1315,3.086,1322,2.128,1323,3.086,1324,1.848,1326,2.128,1331,2.128,1333,2.128,1338,2.128,1339,2.128,1340,2.128,1373,2.128,1378,2.555,1379,2.555,1380,2.555,1381,2.555,1382,2.555,1383,2.555,1384,2.555,1385,3.63,1386,2.555,1387,2.555,1388,2.555,1389,2.555,1390,2.555,1391,2.555,1392,2.128,1393,2.555,1394,2.555,1395,2.555,1396,2.555,1397,2.555,1398,2.555,1399,3.704,1400,2.555,1401,2.555,1402,2.555,1403,3.704,1404,3.086,1405,2.555,1406,2.555,1407,2.555,1408,2.128,1409,3.704,1410,2.555,1411,2.555,1412,3.704,1413,3.704,1414,2.555,1415,5.458,1416,2.555,1417,2.128,1418,2.555,1419,2.555,1420,2.555,1421,3.704,1422,3.704,1423,2.555,1424,2.555,1425,2.555,1426,2.555,1427,2.555,1428,2.555,1429,2.555,1430,2.128,1431,2.555,1432,2.555,1433,3.086,1434,2.555,1435,2.555,1436,2.555,1437,2.555,1438,2.555,1439,5.073,1440,2.555,1441,2.555,1442,2.555,1443,2.555,1444,2.555,1445,2.555,1446,2.555,1447,2.555,1448,2.555,1449,2.555,1450,2.555,1451,2.555,1452,2.555,1453,2.555,1454,3.704,1455,3.086,1456,2.555,1457,2.555,1458,2.555,1459,2.555,1460,2.555,1461,2.555,1462,2.555,1463,2.555,1464,2.555,1465,2.555,1466,2.555,1467,2.555,1468,4.358,1469,2.555,1470,2.555,1471,2.555,1472,3.704,1473,2.555,1474,2.555,1475,2.555,1476,2.555,1477,2.555,1478,2.555,1479,2.555,1480,3.704,1481,2.555,1482,2.555,1483,2.555,1484,2.555,1485,2.555,1486,3.704,1487,3.704,1488,3.704,1489,3.704,1490,2.555,1491,2.555,1492,2.555,1493,2.555,1494,2.555,1495,2.555,1496,2.555,1497,2.555,1498,2.555,1499,2.555,1500,2.555,1501,3.704,1502,2.555,1503,2.555,1504,2.555,1505,2.555,1506,2.128,1507,2.555,1508,2.555,1509,2.555,1510,2.128,1511,2.555,1512,2.555,1513,2.555,1514,2.555,1515,2.555,1516,2.555,1517,2.555,1518,2.555,1519,2.555,1520,2.555,1521,3.704,1522,2.555,1523,2.555,1524,2.555,1525,2.555,1526,2.555,1527,2.555,1528,2.555,1529,2.555,1530,2.555,1531,2.555,1532,2.555,1533,2.555,1534,2.555,1535,2.555,1536,2.555,1537,2.555,1538,2.555,1539,3.704,1540,2.555,1541,2.555,1542,2.555,1543,2.555,1544,2.555,1545,2.555,1546,2.555]],["title/miscellaneous/variables.html",[1265,1.693,1547,3.161]],["body/miscellaneous/variables.html",[9,0.138,14,1.874,20,0.823,25,0.379,43,0.034,44,0.188,45,0.769,51,1.144,52,0.896,69,0.883,74,0.678,77,0.852,78,2.428,79,2.211,83,0.623,84,1.105,86,2.11,89,1.194,90,1.871,95,1.706,96,0.807,100,1.871,120,1.871,121,1.072,151,1.552,152,1.552,185,1.861,189,2.11,196,1.194,223,0.807,243,0.01,244,0.015,245,0.01,261,0.883,279,2.11,281,1.194,303,1.871,313,2.11,314,1.52,328,1.552,332,2.61,337,0.807,338,1.347,367,0.807,368,1.251,373,1.568,374,3.071,375,0.678,377,1.43,378,1.861,385,1.874,387,0.883,390,2.159,399,0.807,400,2.07,413,0.883,414,0.883,439,1.558,476,0.97,480,1.552,494,1.347,504,1.679,518,2.306,519,2.944,523,1.194,530,1.347,532,1.679,562,3.299,588,1.552,591,2.031,603,2.11,605,0.97,608,1.552,609,1.552,611,1.347,636,1.347,644,2.11,645,2.11,646,2.11,660,1.871,673,1.194,694,2.601,707,2.601,708,1.552,712,1.552,722,1.347,732,1.347,733,1.552,735,1.552,737,1.552,739,1.552,741,1.552,743,1.552,745,1.552,747,1.552,750,1.552,752,1.347,756,3.86,770,2.834,777,1.552,781,1.552,844,1.552,847,2.431,848,1.552,915,1.871,918,2.11,919,2.11,933,2.07,962,2.997,977,1.347,979,1.347,1042,1.347,1044,1.347,1047,1.552,1057,2.11,1095,2.431,1096,2.431,1114,2.11,1202,1.347,1209,1.552,1210,4.084,1211,1.552,1212,1.552,1213,3.392,1214,1.552,1215,2.431,1217,1.552,1218,2.431,1219,2.431,1220,2.431,1221,2.431,1222,1.552,1225,1.347,1227,2.11,1228,1.552,1229,1.552,1251,1.552,1265,1.194,1268,4.67,1269,3.392,1277,2.601,1279,2.11,1282,1.347,1305,1.552,1319,1.552,1324,1.347,1336,2.997,1347,1.552,1362,1.552,1385,1.552,1392,1.552,1404,1.552,1408,1.552,1417,1.552,1430,1.552,1433,1.552,1455,3.392,1506,1.552,1510,1.552,1547,1.552,1548,1.863,1549,1.863,1550,1.863,1551,1.863,1552,1.863,1553,2.918,1554,1.863,1555,1.863,1556,1.863,1557,1.863,1558,1.863,1559,1.863,1560,1.863,1561,1.863,1562,3.597,1563,1.863,1564,1.863,1565,1.863,1566,1.863,1567,1.863,1568,1.863,1569,1.863,1570,1.863,1571,1.863,1572,1.863,1573,1.863,1574,1.863,1575,1.863,1576,1.863,1577,1.863,1578,2.918,1579,1.863,1580,1.863,1581,1.863,1582,2.918,1583,1.863,1584,2.918,1585,1.863,1586,1.863,1587,2.918,1588,1.863,1589,1.863,1590,1.863,1591,1.863,1592,1.863,1593,1.863,1594,1.863,1595,1.863,1596,1.863,1597,1.863,1598,1.863,1599,1.863,1600,1.863,1601,1.863,1602,1.863,1603,1.863,1604,1.863,1605,1.863,1606,1.863,1607,1.863,1608,1.863,1609,1.863,1610,1.863,1611,1.863,1612,1.863,1613,1.863,1614,1.863,1615,3.597,1616,1.863,1617,2.918,1618,1.863,1619,1.863,1620,2.918,1621,1.863,1622,1.863,1623,1.863,1624,1.863,1625,1.863,1626,1.863,1627,1.863,1628,1.863,1629,2.918,1630,1.863,1631,1.863,1632,1.863,1633,2.918,1634,1.863,1635,1.863,1636,1.863,1637,1.863,1638,1.863,1639,1.863,1640,1.863,1641,1.863,1642,1.863,1643,1.863,1644,1.863,1645,1.863,1646,1.863,1647,1.863,1648,2.918,1649,1.863,1650,1.863,1651,2.918,1652,1.863,1653,1.863,1654,1.863,1655,1.863,1656,1.863,1657,1.863,1658,1.863,1659,1.863,1660,2.918,1661,1.863,1662,2.918,1663,2.918,1664,1.863,1665,1.863,1666,1.863,1667,1.863,1668,1.863,1669,1.863,1670,1.863,1671,1.863,1672,2.918,1673,1.863,1674,1.863,1675,1.863,1676,1.863,1677,1.863,1678,1.863,1679,1.863,1680,2.918,1681,1.863,1682,1.863,1683,1.863,1684,1.863,1685,1.863,1686,1.863,1687,1.863,1688,1.863,1689,2.918,1690,1.863,1691,1.863,1692,1.863,1693,1.863,1694,1.863,1695,1.863,1696,1.863,1697,1.863,1698,1.863,1699,1.863,1700,2.918,1701,1.863,1702,1.863,1703,3.597,1704,2.918,1705,1.863,1706,1.863,1707,1.863,1708,1.863,1709,1.863,1710,1.863,1711,1.863,1712,1.863,1713,1.863,1714,1.863,1715,2.918,1716,1.863,1717,1.863,1718,1.863,1719,1.863,1720,4.421,1721,1.863,1722,1.863,1723,1.863,1724,1.863,1725,1.863,1726,1.863,1727,1.863,1728,1.863,1729,1.863,1730,1.863,1731,1.863,1732,2.918,1733,2.918,1734,1.863,1735,1.863,1736,2.918,1737,1.863,1738,1.863,1739,1.863,1740,1.863,1741,1.863,1742,1.863,1743,1.863,1744,1.863,1745,1.863,1746,1.863,1747,1.863,1748,1.863,1749,2.918,1750,1.863,1751,1.863,1752,1.863,1753,1.863,1754,1.863,1755,2.918,1756,2.918,1757,1.863,1758,1.863,1759,1.863,1760,1.863,1761,1.863,1762,1.863,1763,1.863,1764,1.863,1765,2.918,1766,1.863,1767,1.863,1768,1.863,1769,1.863,1770,1.863,1771,1.863,1772,1.863,1773,1.863,1774,2.918,1775,1.863,1776,1.863,1777,1.863,1778,1.863,1779,1.863,1780,1.863,1781,1.863,1782,1.863,1783,1.863,1784,1.863,1785,1.863,1786,1.863,1787,1.863,1788,1.863,1789,1.863,1790,1.863,1791,1.863,1792,1.863,1793,1.863,1794,1.863,1795,1.863]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":625,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1185,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":664,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["1.18.3",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1284,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":580,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":208,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":694,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1194,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":1021,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":211,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":1043,"title":{},"body":{"components/SignupComponent.html":{}}}],["19th",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1044,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1034,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":667,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.1.9",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["3.2.7",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":822,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":823,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":824,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":673,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":819,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":825,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":221,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9/9",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["_answers",{"_index":391,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":1073,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":388,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":392,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_token",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["a.points",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["absolute",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abused",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerated",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1520,"title":{},"body":{"todo.html":{}}}],["access",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":967,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["according",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["account",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":589,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":973,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":760,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":242,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":188,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":522,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":227,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":495,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":503,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":37,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":544,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":724,"title":{},"body":{"components/GameOverComponent.html":{}}}],["against",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1469,"title":{},"body":{"todo.html":{}}}],["agriculture",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alaskan",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["all(/^(?!.*\\/api",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowed",{"_index":505,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allowing",{"_index":1518,"title":{},"body":{"todo.html":{}}}],["allows",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":845,"title":{},"body":{"injectables/QuestionService.html":{},"index.html":{}}}],["already",{"_index":1005,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1336,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angu\\u2026",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":1282,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":923,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":305,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":736,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":738,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":740,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":742,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":744,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":746,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":748,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":751,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":477,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":880,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":929,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":914,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":916,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["another",{"_index":1035,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":368,"title":{"interfaces/Answer.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":888,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":841,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":390,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answers(given",{"_index":409,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":811,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":1055,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1455,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/admin/check_token",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/can_start",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get_all",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":462,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":434,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":435,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":228,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":848,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":438,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":449,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1488,"title":{},"body":{"todo.html":{}}}],["architectural",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["architecture",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":787,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":952,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":802,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":812,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":815,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":816,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["art",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1318,"title":{},"body":{"index.html":{}}}],["artist",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ascending",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["assigns",{"_index":820,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["asteroid",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":421,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{}}}],["asyncdata",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1274,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":502,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":493,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":333,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":539,"title":{},"body":{"classes/Authorization.html":{}}}],["authorize",{"_index":1544,"title":{},"body":{"todo.html":{}}}],["authorizes",{"_index":1447,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["automatic",{"_index":609,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1303,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autonomy",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowrongguess",{"_index":645,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":205,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{}}}],["await",{"_index":426,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1435,"title":{},"body":{"todo.html":{}}}],["azerbaijan",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["b.points",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["back",{"_index":1522,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1298,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":961,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":927,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1454,"title":{},"body":{"todo.html":{}}}],["bank",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":749,"title":{},"body":{"modules/MaterialModule.html":{}}}],["barber",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1038,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["basilica",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basis",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautification",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["before",{"_index":504,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":1082,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["belt",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":1339,"title":{},"body":{"index.html":{},"todo.html":{}}}],["between",{"_index":1042,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["bildungsroman",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{}}}],["blob([data",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{}}}],["body",{"_index":857,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bond",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":286,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":215,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1362,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["box",{"_index":213,"title":{},"body":{"components/AdminComponent.html":{}}}],["boy",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":523,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":547,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":577,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":548,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":646,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1375,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{},"todo.html":{}}}],["browser/animations",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1502,"title":{},"body":{"todo.html":{}}}],["bud",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buddy",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1317,"title":{},"body":{"index.html":{}}}],["built",{"_index":1307,"title":{},"body":{"index.html":{},"todo.html":{}}}],["button",{"_index":599,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":960,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":396,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":619,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1148,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":1180,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":575,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":481,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canada",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canstart",{"_index":1010,"title":{},"body":{"components/SignupComponent.html":{}}}],["carbon",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carmen",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["case",{"_index":347,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":429,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":307,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":855,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TimeService.html":{}}}],["catcherror(this.handleerroradmin",{"_index":330,"title":{},"body":{"injectables/AdminService.html":{}}}],["catcherror(this.handleerroruser",{"_index":1124,"title":{},"body":{"injectables/TeamService.html":{}}}],["categories",{"_index":1391,"title":{},"body":{"todo.html":{}}}],["category",{"_index":756,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["caveats",{"_index":1516,"title":{},"body":{"todo.html":{}}}],["center",{"_index":1462,"title":{},"body":{"todo.html":{}}}],["century",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cerium",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1365,"title":{},"body":{"index.html":{}}}],["changes",{"_index":907,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":950,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":947,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":948,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["characteristic",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charge",{"_index":382,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":532,"title":{},"body":{"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["check_token",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":835,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":837,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":1150,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["checktoken",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["checktoken(req",{"_index":507,"title":{},"body":{"classes/Authorization.html":{}}}],["chemical",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemistry",{"_index":1408,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["chicha",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["china",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorofluorocarbons",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choices",{"_index":762,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":199,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["circulation",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cities",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":108,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":488,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":200,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1151,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1159,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":620,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":689,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1283,"title":{},"body":{"index.html":{}}}],["click",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{}}}],["clicked",{"_index":186,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1144,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":731,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1312,"title":{},"body":{"index.html":{},"todo.html":{}}}],["coffee",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collection",{"_index":424,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":427,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":962,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":900,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["column",{"_index":202,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1373,"title":{},"body":{"index.html":{},"todo.html":{}}}],["comment",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":1514,"title":{},"body":{"todo.html":{}}}],["compared",{"_index":1495,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":991,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":1063,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":1057,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":582,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["completely",{"_index":361,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":226,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":353,"title":{},"body":{"injectables/AdminService.html":{}}}],["concat(['school,team",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["conduction",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":1465,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":935,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["connection",{"_index":1429,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1475,"title":{},"body":{"todo.html":{}}}],["considered",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":1033,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["console.log",{"_index":176,"title":{},"body":{"components/AdminComponent.html":{}}}],["console.log(`an",{"_index":430,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.log(errors",{"_index":797,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["console.log(teams",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["consoleoutput",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":315,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":1078,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":757,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":889,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":561,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":1076,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":703,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":759,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":490,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":847,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1398,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":672,"title":{},"body":{"components/GameComponent.html":{}}}],["contributes",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convection",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":706,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copied",{"_index":190,"title":{},"body":{"components/AdminComponent.html":{}}}],["copy",{"_index":721,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":375,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":374,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":918,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":821,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":608,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":1524,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1195,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":826,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["created",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":803,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1526,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1461,"title":{},"body":{"todo.html":{}}}],["crop",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto",{"_index":310,"title":{},"body":{"injectables/AdminService.html":{},"dependencies.html":{}}}],["cst",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1407,"title":{},"body":{"todo.html":{}}}],["current",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":622,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["currentquestion",{"_index":549,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":958,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":959,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":946,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["dangerous",{"_index":1546,"title":{},"body":{"todo.html":{}}}],["data",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["database",{"_index":378,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":425,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":652,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1430,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dbpassword",{"_index":1220,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["dbuser",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1371,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deco",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":509,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team",{"_index":533,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.schoolname",{"_index":534,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.teamnumber",{"_index":535,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":524,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":639,"title":{},"body":{"components/GameComponent.html":{}}}],["default",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1352,"title":{},"body":{"index.html":{}}}],["denakk\\u2019e",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denali",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":440,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{},"todo.html":{}}}],["dependency",{"_index":1340,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1349,"title":{},"body":{"index.html":{}}}],["depth",{"_index":1532,"title":{},"body":{"todo.html":{}}}],["descending",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{}}}],["describe",{"_index":372,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["designed",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1297,"title":{},"body":{"index.html":{},"todo.html":{}}}],["develop",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["developed",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1279,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1527,"title":{},"body":{"todo.html":{}}}],["diffusion",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dioxide",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directive",{"_index":224,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":241,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1316,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1295,"title":{},"body":{"index.html":{}}}],["display",{"_index":634,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1143,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1319,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1367,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1403,"title":{},"body":{"todo.html":{}}}],["div",{"_index":201,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1196,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["doesn't",{"_index":177,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["doesnt",{"_index":191,"title":{},"body":{"components/AdminComponent.html":{}}}],["dog",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["domesticated",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domsanitizer",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{}}}],["don",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":1053,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":1071,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":354,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1404,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1438,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1464,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["during",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["dyno",{"_index":1513,"title":{},"body":{"todo.html":{}}}],["e2e",{"_index":1328,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":915,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":1047,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["earned",{"_index":1083,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":930,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["edge",{"_index":1496,"title":{},"body":{"todo.html":{}}}],["edwardian",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":931,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":223,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["emergencies",{"_index":1390,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":910,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1156,"title":{},"body":{"components/TimerComponent.html":{}}}],["end",{"_index":598,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ended",{"_index":1508,"title":{},"body":{"todo.html":{}}}],["endpoint",{"_index":1448,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":506,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":596,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enough",{"_index":175,"title":{},"body":{"components/AdminComponent.html":{}}}],["enter",{"_index":1059,"title":{},"body":{"components/SignupComponent.html":{}}}],["environment",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1345,"title":{},"body":{"index.html":{}}}],["err",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":432,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":282,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["error.error",{"_index":363,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["errorobject",{"_index":1275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":790,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":796,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1482,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1386,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":674,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1517,"title":{},"body":{"todo.html":{}}}],["event",{"_index":273,"title":{},"body":{"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":357,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.total",{"_index":358,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":346,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":895,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":272,"title":{},"body":{"injectables/AdminService.html":{}}}],["everything",{"_index":182,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["example",{"_index":1061,"title":{},"body":{"components/SignupComponent.html":{}}}],["exchange",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":1325,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":903,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":184,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":574,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["expire",{"_index":1539,"title":{},"body":{"todo.html":{}}}],["expired",{"_index":280,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["expires",{"_index":1541,"title":{},"body":{"todo.html":{}}}],["expiring",{"_index":1545,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1525,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1453,"title":{},"body":{"todo.html":{}}}],["export",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":518,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":381,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["eyes",{"_index":1534,"title":{},"body":{"todo.html":{}}}],["failed",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{}}}],["fails",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["failures",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":761,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":399,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1538,"title":{},"body":{"todo.html":{}}}],["fast",{"_index":174,"title":{},"body":{"components/AdminComponent.html":{}}}],["feature",{"_index":1463,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1417,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["federal",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feel",{"_index":1068,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["figaro",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["figure",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":350,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":351,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1305,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload(file",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":204,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["filter(team",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1138,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["fine",{"_index":181,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["finish",{"_index":1507,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":884,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":550,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":945,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":698,"title":{},"body":{"components/GameOverComponent.html":{}}}],["finishing",{"_index":1493,"title":{},"body":{"todo.html":{}}}],["firefox",{"_index":218,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":897,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["fix",{"_index":1521,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1445,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1378,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1321,"title":{},"body":{"index.html":{}}}],["flashy",{"_index":1498,"title":{},"body":{"todo.html":{}}}],["flute",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus",{"_index":1436,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1368,"title":{},"body":{"index.html":{}}}],["following",{"_index":1510,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["font",{"_index":209,"title":{},"body":{"components/AdminComponent.html":{}}}],["foods",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":538,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":393,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":924,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":941,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{}}}],["formcontrol",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["found",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1311,"title":{},"body":{"index.html":{}}}],["free",{"_index":1069,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["frontend",{"_index":1296,"title":{},"body":{"index.html":{}}}],["full",{"_index":486,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":501,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1266,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funny",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{}}}],["further",{"_index":1330,"title":{},"body":{"index.html":{}}}],["gained",{"_index":632,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":963,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":233,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":231,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":545,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":546,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":230,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":483,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":232,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gas",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gecko",{"_index":219,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1315,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1281,"title":{},"body":{"index.html":{}}}],["geography",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georgian",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_all",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getadmin",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":875,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1135,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":860,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":422,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpracticequestions",{"_index":868,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":553,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1175,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteamfromserver",{"_index":1093,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1098,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteams",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["getteams(link",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{}}}],["getter",{"_index":861,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":415,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getting",{"_index":172,"title":{"index.html":{},"todo.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":296,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["gioachino",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["giovanni",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["given",{"_index":404,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":301,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["giver",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1531,"title":{},"body":{"todo.html":{}}}],["go",{"_index":1332,"title":{},"body":{"index.html":{}}}],["goddess",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1181,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["gradient",{"_index":1530,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1376,"title":{},"body":{"modules.html":{}}}],["greenhouse",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gross",{"_index":1529,"title":{},"body":{"todo.html":{}}}],["guard",{"_index":964,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":965,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":611,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":1036,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1383,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1384,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":312,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":366,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["handleerroradmin",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroradmin(error",{"_index":276,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroruser",{"_index":1094,"title":{},"body":{"injectables/TeamService.html":{}}}],["handleerroruser(error",{"_index":1100,"title":{},"body":{"injectables/TeamService.html":{}}}],["handlers",{"_index":1466,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":279,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":1276,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["happens",{"_index":1540,"title":{},"body":{"todo.html":{}}}],["having",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["headers",{"_index":332,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["heat",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":207,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1331,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":411,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{}}}],["heroku",{"_index":1287,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1343,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hobby",{"_index":1511,"title":{},"body":{"todo.html":{}}}],["holds",{"_index":754,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["holes",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href",{"_index":171,"title":{},"body":{"components/AdminComponent.html":{}}}],["hrs",{"_index":718,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlanchorelement",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{}}}],["htmlinputelement",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{}}}],["http",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1302,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":277,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpevent",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":302,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":360,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":348,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":352,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":303,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":851,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":331,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptions).pipe",{"_index":335,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptionsjson",{"_index":1114,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1119,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":313,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":834,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":304,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":339,"title":{},"body":{"injectables/AdminService.html":{}}}],["https://angular.io/guide/practical",{"_index":1457,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1460,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1444,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1490,"title":{},"body":{"todo.html":{}}}],["human",{"_index":708,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["humans",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hurt",{"_index":1533,"title":{},"body":{"todo.html":{}}}],["i.e",{"_index":569,"title":{},"body":{"components/GameComponent.html":{}}}],["iconic",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":1084,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["identifier",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":638,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":938,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":752,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1306,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":919,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":801,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":808,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":830,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["infoit",{"_index":1543,"title":{},"body":{"todo.html":{}}}],["inform",{"_index":1535,"title":{},"body":{"todo.html":{}}}],["information",{"_index":510,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"index.html":{}}}],["init",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{}}}],["initiate",{"_index":978,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":576,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":246,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1471,"title":{},"body":{"todo.html":{}}}],["input",{"_index":917,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["inputs",{"_index":887,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["install",{"_index":1294,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1289,"title":{},"body":{"index.html":{}}}],["instance",{"_index":412,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instanceof",{"_index":525,"title":{},"body":{"classes/Authorization.html":{}}}],["instead",{"_index":395,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":1032,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1285,"title":{},"body":{"index.html":{}}}],["interface",{"_index":367,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":369,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1160,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1173,"title":{},"body":{"components/TimerComponent.html":{}}}],["iridium",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is\\u2026",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isn't",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":1070,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1523,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1501,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":607,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["j",{"_index":813,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":777,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join('\\n",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{}}}],["join(__dirname",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":311,"title":{},"body":{"injectables/AdminService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["json",{"_index":844,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":329,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":517,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":515,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":521,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1327,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1049,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kenai",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kinda",{"_index":934,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1476,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1474,"title":{},"body":{"todo.html":{}}}],["kuwait",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kuyokuk",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["largest",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1347,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["late",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":618,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1359,"title":{},"body":{"index.html":{}}}],["legend",{"_index":222,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":932,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["liechtenstein",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":603,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.click",{"_index":193,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.href",{"_index":192,"title":{},"body":{"components/AdminComponent.html":{}}}],["list",{"_index":804,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":843,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":613,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loading",{"_index":1392,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":554,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":573,"title":{},"body":{"components/GameComponent.html":{}}}],["local",{"_index":1278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localstorage.getitem('admintoken",{"_index":320,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.getitem('usertoken",{"_index":1116,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.removeitem('admintoken",{"_index":364,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.removeitem('usertoken",{"_index":1133,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.setitem('admintoken",{"_index":323,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.setitem('usertoken",{"_index":1117,"title":{},"body":{"injectables/TeamService.html":{}}}],["located",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location.reload",{"_index":365,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["log",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":285,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1441,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":543,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":287,"title":{},"body":{"injectables/AdminService.html":{}}}],["loginform",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{}}}],["logs",{"_index":289,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":1039,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1439,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1473,"title":{},"body":{"todo.html":{}}}],["loss",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lot",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["magic",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":542,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["mainly",{"_index":1542,"title":{},"body":{"todo.html":{}}}],["maize",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["many",{"_index":631,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["map(event",{"_index":342,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(result",{"_index":1122,"title":{},"body":{"injectables/TeamService.html":{}}}],["map(team",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["marriage",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matbuttonmodule",{"_index":735,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":737,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":739,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":244,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":733,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":450,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":741,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":814,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":666,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":356,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":743,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":745,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":747,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":750,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":604,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1468,"title":{},"body":{"todo.html":{}}}],["mckinley",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meaning",{"_index":1346,"title":{},"body":{"index.html":{}}}],["means",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medal",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory",{"_index":1257,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["menu",{"_index":671,"title":{},"body":{"components/GameComponent.html":{}}}],["mesoamericans",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":500,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["millet",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["million",{"_index":1405,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":707,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1149,"title":{},"body":{"components/TimerComponent.html":{}}}],["mins",{"_index":717,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":1045,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1265,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":316,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modern",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modifying",{"_index":725,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":437,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{},"todo.html":{}}}],["modules",{"_index":439,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1251,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["monaco",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongo",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1255,"title":{},"body":{"dependencies.html":{},"index.html":{},"todo.html":{}}}],["monocots",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":567,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1440,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mount",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":1487,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":217,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":715,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1166,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":702,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1472,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":1080,"title":{},"body":{"classes/Team.html":{}}}],["mythology",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":198,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namesake",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaces",{"_index":1443,"title":{},"body":{"todo.html":{}}}],["native",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["navigate",{"_index":1301,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":590,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":1054,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["needed",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["new",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newbery",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newteam",{"_index":1029,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":497,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":498,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1314,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":555,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":457,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":885,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":904,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["nitrous",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1290,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1309,"title":{},"body":{"index.html":{}}}],["nodemon",{"_index":1370,"title":{},"body":{"index.html":{}}}],["non",{"_index":1385,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["nothing",{"_index":1369,"title":{},"body":{"index.html":{}}}],["now",{"_index":1506,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":1291,"title":{},"body":{"index.html":{}}}],["nshima",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":536,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["number",{"_index":615,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["number,points",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{}}}],["numbers",{"_index":806,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["obelisk",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":373,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":912,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":778,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":275,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["obtained",{"_index":1292,"title":{},"body":{"index.html":{}}}],["occur",{"_index":578,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":431,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1127,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1389,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":556,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":593,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":557,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":901,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":881,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":886,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":908,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":986,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":605,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["one?\\u201d",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ones",{"_index":1140,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":558,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opera/ie",{"_index":220,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1139,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{}}}],["otherwise",{"_index":1484,"title":{},"body":{"todo.html":{}}}],["out",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["output",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":570,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":234,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":699,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":700,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":696,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":713,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":704,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":705,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":710,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":467,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1335,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1377,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["oxide",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ozone",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1236,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":968,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":472,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":465,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["palladium",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papa",{"_index":791,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":789,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":793,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1361,"title":{},"body":{"index.html":{}}}],["param",{"_index":683,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":788,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":792,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":799,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":795,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1244,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1515,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1491,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":376,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["password').tostring",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":480,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":485,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":1052,"title":{},"body":{"components/SignupComponent.html":{}}}],["peak",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["people",{"_index":1536,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":355,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":587,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1456,"title":{},"body":{"todo.html":{}}}],["period",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["periodically",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1354,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1434,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1351,"title":{},"body":{"index.html":{}}}],["play",{"_index":979,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":729,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":697,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":723,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":730,"title":{},"body":{"components/GameOverComponent.html":{}}}],["plutonium",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":629,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":551,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":642,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":1342,"title":{},"body":{"index.html":{}}}],["post",{"_index":1095,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1102,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":763,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":387,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["practice_questions",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":380,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":400,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["practicequestions(given",{"_index":402,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1451,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":769,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":773,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":768,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":774,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":784,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":780,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":993,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":597,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":722,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["prevents",{"_index":670,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["primarily",{"_index":1308,"title":{},"body":{"index.html":{}}}],["priority",{"_index":1492,"title":{},"body":{"todo.html":{}}}],["private",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1338,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":712,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["process.env.mongodb_password",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_user",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":781,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["processrow",{"_index":771,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":779,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1320,"title":{},"body":{"index.html":{}}}],["production",{"_index":1277,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1337,"title":{},"body":{"index.html":{}}}],["progress",{"_index":270,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{}}}],["project",{"_index":1280,"title":{},"body":{"index.html":{}}}],["promise",{"_index":389,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["properly",{"_index":913,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1329,"title":{},"body":{"index.html":{}}}],["provided",{"_index":291,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":317,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1446,"title":{},"body":{"todo.html":{}}}],["public",{"_index":398,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"injectables/TeamService.html":{}}}],["pulls",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":1096,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1104,"title":{},"body":{"injectables/TeamService.html":{}}}],["qatar",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["question",{"_index":377,"title":{"classes/Question.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":828,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":559,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":838,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":644,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":767,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":236,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":406,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":882,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":883,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":810,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":235,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":563,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":385,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["radiation",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":785,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1366,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":459,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1459,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":709,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1333,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1537,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1334,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1341,"title":{},"body":{"index.html":{}}}],["recently",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recompile",{"_index":1364,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":484,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1479,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":189,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":971,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":479,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":1051,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":478,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":1067,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":982,"title":{},"body":{"components/SignupComponent.html":{}}}],["reign",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":833,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relating",{"_index":492,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1304,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1179,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["renowned",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replicate",{"_index":1509,"title":{},"body":{"todo.html":{}}}],["reportprogress",{"_index":336,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":338,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":520,"title":{},"body":{"classes/Authorization.html":{}}}],["req.headers.authorization[0",{"_index":540,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":496,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":933,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1449,"title":{},"body":{"todo.html":{}}}],["res",{"_index":196,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.sendfile(clientpath",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.status(403).json('403",{"_index":537,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('expired",{"_index":526,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('invalid",{"_index":527,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1162,"title":{},"body":{"components/TimerComponent.html":{}}}],["resides",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respective",{"_index":899,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":271,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":327,"title":{},"body":{"injectables/AdminService.html":{}}}],["rest",{"_index":1310,"title":{},"body":{"index.html":{}}}],["restart",{"_index":1152,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1467,"title":{},"body":{"todo.html":{}}}],["result",{"_index":243,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":1123,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":939,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1",{"_index":1121,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[1].push(i",{"_index":940,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":428,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":245,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":942,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":943,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["resume",{"_index":1065,"title":{},"body":{"components/SignupComponent.html":{}}}],["retrieval",{"_index":394,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":419,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":384,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrying",{"_index":1504,"title":{},"body":{"todo.html":{}}}],["return",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["reverse",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{}}}],["rice",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":1372,"title":{},"body":{"index.html":{}}}],["river",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roman",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":318,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":229,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["rossini",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roughly",{"_index":579,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":974,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":562,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":475,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":487,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":476,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":464,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":474,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":782,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":829,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":817,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":818,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":831,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":798,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":805,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["royal",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1286,"title":{},"body":{"index.html":{}}}],["running",{"_index":1293,"title":{},"body":{"index.html":{}}}],["runs",{"_index":601,"title":{},"body":{"components/GameComponent.html":{}}}],["russia",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":306,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":308,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":714,"title":{},"body":{"components/GameOverComponent.html":{}}}],["sad",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{}}}],["safari",{"_index":180,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["safari/chrome",{"_index":216,"title":{},"body":{"components/AdminComponent.html":{}}}],["safety",{"_index":531,"title":{},"body":{"classes/Authorization.html":{}}}],["samarium",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sanitizer",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":660,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1107,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":711,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":701,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":911,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1313,"title":{},"body":{"index.html":{}}}],["school",{"_index":726,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":998,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolnamecontrol",{"_index":1012,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.disable",{"_index":1027,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.setvalue(team.schoolname",{"_index":1016,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.value",{"_index":1023,"title":{},"body":{"components/SignupComponent.html":{}}}],["schools",{"_index":1079,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":630,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":1037,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1355,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1360,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1426,"title":{},"body":{"todo.html":{}}}],["second",{"_index":636,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["seconds",{"_index":560,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":552,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":519,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":716,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1528,"title":{},"body":{"todo.html":{}}}],["see",{"_index":990,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seems",{"_index":1505,"title":{},"body":{"todo.html":{}}}],["seen",{"_index":1519,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":840,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["sending",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":269,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1299,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":568,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"dependencies.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":647,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":648,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":1006,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":173,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["setanswers(given",{"_index":877,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setdburl",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setinterval",{"_index":1153,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1165,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpracticequestions(given",{"_index":870,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":873,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":300,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["settimeout",{"_index":617,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken(giventoken",{"_index":298,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["seville",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha3",{"_index":309,"title":{},"body":{"injectables/AdminService.html":{}}}],["sha3(password).tostring",{"_index":326,"title":{},"body":{"injectables/AdminService.html":{}}}],["sha3(process.env.admin_password",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/question",{"_index":379,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shiloh",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shiny",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shouldn't",{"_index":1477,"title":{},"body":{"todo.html":{}}}],["show",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shuffle",{"_index":772,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":783,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":786,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["side",{"_index":1442,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":977,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":969,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":482,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":238,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":980,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":981,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":237,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signupform",{"_index":983,"title":{},"body":{"components/SignupComponent.html":{}}}],["simple",{"_index":1050,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":905,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":1058,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":755,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":210,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":214,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":794,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":800,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slow",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sluggish",{"_index":1494,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1450,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1478,"title":{},"body":{"todo.html":{}}}],["something",{"_index":170,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["somewhere",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["soooo",{"_index":168,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorry",{"_index":1066,"title":{},"body":{"components/SignupComponent.html":{}}}],["sort",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["sort((a",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorts",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["spain\\u2019s",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../admin",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1268,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../practicequestions.ts",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1269,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":473,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":433,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":732,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":879,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":892,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":893,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":894,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":891,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":896,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":890,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":898,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":906,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":909,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1142,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1155,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1171,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1174,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1170,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1172,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1158,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1161,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1163,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1167,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1168,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1169,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1176,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1157,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":1072,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":1077,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:21",{"_index":1088,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:22",{"_index":1089,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":1091,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":1090,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":1087,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":1086,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":1085,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:14",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:16",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:29",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:34",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:39",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:50",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:80",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":695,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":541,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":594,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":595,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":600,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":614,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":612,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":641,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":621,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":616,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":623,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":624,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":626,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":627,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":633,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":637,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":635,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":565,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":566,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":571,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":572,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":584,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":586,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":976,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:17",{"_index":1001,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":997,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:24",{"_index":1003,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:26",{"_index":1004,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:28",{"_index":988,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:37",{"_index":989,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:53",{"_index":992,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:58",{"_index":994,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:68",{"_index":995,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":966,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":970,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":972,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:19",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:25",{"_index":295,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:28",{"_index":297,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:37",{"_index":299,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":283,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:48",{"_index":288,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:55",{"_index":274,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:63",{"_index":293,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:73",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:81",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:99",{"_index":278,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":832,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":836,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":842,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":839,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":1092,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1097,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1111,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1110,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:23",{"_index":1109,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:26",{"_index":1112,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:35",{"_index":1113,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:45",{"_index":1103,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:54",{"_index":1105,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:60",{"_index":1108,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:71",{"_index":1099,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:84",{"_index":1101,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1134,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1136,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1137,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":489,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:34",{"_index":499,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:45",{"_index":512,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":508,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/practicequestions.ts",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":370,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1225,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":753,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":766,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":765,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":764,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":758,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":591,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":602,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":585,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["state('correct",{"_index":926,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":928,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["static",{"_index":491,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1433,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":1480,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":1154,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":1164,"title":{},"body":{"components/TimerComponent.html":{}}}],["store",{"_index":414,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":371,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":863,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":862,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":864,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":865,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":869,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":871,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":872,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":874,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":876,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":878,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":867,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":866,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":386,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["storing",{"_index":383,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["string",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["stuff",{"_index":734,"title":{},"body":{"modules/MaterialModule.html":{}}}],["style",{"_index":920,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":996,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":1064,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":984,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":954,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1348,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":1002,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sugarcane",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":178,"title":{},"body":{"components/AdminComponent.html":{},"modules.html":{}}}],["supported",{"_index":1500,"title":{},"body":{"todo.html":{}}}],["sure",{"_index":528,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["surprising",{"_index":362,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1374,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":345,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronous",{"_index":183,"title":{},"body":{"components/AdminComponent.html":{}}}],["synchronously",{"_index":1358,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1437,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1344,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1300,"title":{},"body":{"index.html":{}}}],["table",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1234,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":606,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":1040,"title":{},"body":{"components/SignupComponent.html":{}}}],["tap",{"_index":1115,"title":{},"body":{"injectables/TeamService.html":{}}}],["tap(result",{"_index":1120,"title":{},"body":{"injectables/TeamService.html":{}}}],["target",{"_index":1481,"title":{},"body":{"todo.html":{}}}],["team",{"_index":83,"title":{"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":1128,"title":{},"body":{"injectables/TeamService.html":{}}}],["team.points",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":727,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname},${team.teamnumber},${team.points",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["team.service",{"_index":846,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":728,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":1030,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamexists",{"_index":985,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":1000,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["teamnumbercontrol",{"_index":1014,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.disable",{"_index":1028,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.setvalue(team.teamnumber",{"_index":1017,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.value",{"_index":1024,"title":{},"body":{"components/SignupComponent.html":{}}}],["teams",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":564,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":23,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1145,"title":{},"body":{"components/TimerComponent.html":{}}}],["teosinte",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":1387,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1324,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1388,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1323,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":328,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":206,"title":{},"body":{"components/AdminComponent.html":{}}}],["thermos",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thing",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1177,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":1046,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":410,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":403,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":407,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._token",{"_index":321,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this.adminservice",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.checktoken().subscribe",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.getteams().subscribe(teams",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.loggedin",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.loginform.value.password).subscribe",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.token",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(file.files[0]).subscribe",{"_index":195,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":955,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":957,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.breakend",{"_index":677,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":668,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1182,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1190,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":197,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":658,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":936,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.file",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.finishanimation",{"_index":949,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":684,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":417,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":679,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":343,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":418,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":682,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":408,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":401,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":405,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.http.get(uri.admin.check_token",{"_index":344,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1141,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":853,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":856,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.team.get",{"_index":1132,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.get(uri.team.get_all",{"_index":334,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.admin.login",{"_index":325,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1118,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":859,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":858,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1131,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1125,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":341,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":850,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":854,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":663,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":688,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1184,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1183,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":650,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":661,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1130,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1126,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":809,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1129,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":678,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":657,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":659,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":953,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":656,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":1009,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1187,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":1018,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":655,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":975,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.sanitizer.bypasssecuritytrusturl(url",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.saving",{"_index":719,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":687,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":686,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":807,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.signupform.get('schoolname",{"_index":1013,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('teamnumber",{"_index":1015,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.start",{"_index":1188,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1191,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":951,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":956,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":937,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":944,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1186,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":1026,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":654,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.team._id",{"_index":1022,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":662,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":649,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":1019,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":1020,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":651,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":681,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.teamexists",{"_index":1031,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver().subscribe(team",{"_index":1011,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":1025,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.practice",{"_index":852,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":665,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.team",{"_index":653,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.token",{"_index":849,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.timer",{"_index":692,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":676,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":693,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":669,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":691,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":680,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":685,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":1008,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":324,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this['_",{"_index":416,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1416,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1486,"title":{},"body":{"todo.html":{}}}],["thought",{"_index":169,"title":{},"body":{"components/AdminComponent.html":{}}}],["thus",{"_index":1353,"title":{},"body":{"index.html":{}}}],["tiber",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":185,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":1074,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":240,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1146,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1147,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":239,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1452,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":987,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":1075,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":119,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token(giventoken",{"_index":322,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["token]{@link",{"_index":319,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["tokenexpirederror",{"_index":513,"title":{},"body":{"classes/Authorization.html":{}}}],["tokens",{"_index":281,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["tonsorial",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":1350,"title":{},"body":{"index.html":{}}}],["total",{"_index":581,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["transfer",{"_index":1432,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":775,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":921,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1485,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tries",{"_index":902,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":922,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":925,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":337,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":423,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":827,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":776,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":583,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":1062,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tz(start",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u201cthe",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":690,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":1041,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":675,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":1060,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1322,"title":{},"body":{"index.html":{},"todo.html":{}}}],["united",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unix",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":187,"title":{},"body":{"components/AdminComponent.html":{}}}],["until",{"_index":1056,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":592,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1106,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":359,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":349,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":292,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":294,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":314,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":340,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1458,"title":{},"body":{"todo.html":{}}}],["use",{"_index":770,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["user",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":628,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":511,"title":{},"body":{"classes/Authorization.html":{}}}],["username",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userroutes",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":494,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1357,"title":{},"body":{"index.html":{}}}],["using",{"_index":290,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usually",{"_index":1503,"title":{},"body":{"todo.html":{}}}],["valid",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["validators",{"_index":1007,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.required",{"_index":999,"title":{},"body":{"components/SignupComponent.html":{}}}],["value",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":420,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["vapor",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":225,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":413,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1547,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":588,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["vatican",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":514,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":516,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":397,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":1326,"title":{},"body":{"index.html":{},"todo.html":{}}}],["victorian",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":643,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild(timercomponent",{"_index":640,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{}}}],["virginia\\u2026",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtual",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":436,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["vs",{"_index":1512,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wasn't",{"_index":1470,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1363,"title":{},"body":{"index.html":{}}}],["water",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1193,"title":{},"body":{"components/TimerComponent.html":{}}}],["ways",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webkit",{"_index":212,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1489,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":1356,"title":{},"body":{"index.html":{}}}],["weren't",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{}}}],["west",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whatnot",{"_index":1499,"title":{},"body":{"todo.html":{}}}],["wheat",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":284,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["whipping",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whittier",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":203,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1192,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1189,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.url.createobjecturl(blob",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{}}}],["window.url.revokeobjecturl(url",{"_index":194,"title":{},"body":{"components/AdminComponent.html":{}}}],["winner",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wipes",{"_index":720,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":1048,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":530,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["wonky",{"_index":1497,"title":{},"body":{"todo.html":{}}}],["wont",{"_index":1483,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1288,"title":{},"body":{"index.html":{},"todo.html":{}}}],["worked",{"_index":529,"title":{},"body":{"classes/Authorization.html":{}}}],["works",{"_index":179,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["world",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["worse",{"_index":1178,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1421,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":610,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":1081,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["yukon",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consoleOutput\n                            \n                            \n                                file\n                            \n                            \n                                loginForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                getTeams\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload(file: HTMLInputElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:80\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            HTMLInputElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams(link: HTMLAnchorElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:50\n                \n            \n\n\n            \n                \n                    Gets the teams from the server, sorts them by points, and outputs in a nice csv format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                            HTMLAnchorElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:22\n                \n            \n\n\n            \n                \n                    Checks if token is valid on page init \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:39\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:14\n                            \n                        \n\n                \n                    \n                        The link to the team CSV file \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    password: new FormControl('')\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:34\n                            \n                        \n\n                \n                    \n                        The login form containing the password \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:29\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n  /** The link to the team CSV file */\n  file;\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService, private sanitizer: DomSanitizer) { }\n\n  /** Checks if token is valid on page init */\n  ngOnInit() {\n    if (this.adminService.loggedIn()) {\n      this.adminService.checkToken().subscribe();\n    }\n  }\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** The login form containing the password */\n  loginForm = new FormGroup({\n    password: new FormControl('')\n  });\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.loginForm.value.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.token = token;\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Gets the teams from the server, sorts them by points, and outputs in a nice csv format */\n  getTeams(link: HTMLAnchorElement) {\n    this.adminService.getTeams().subscribe(teams => {\n      console.log(teams);\n      if (!teams) {\n        return;\n      }\n      const data = teams\n        .filter(team => team.points) // remove teams with no points\n        .sort((a, b) => a.points - b.points) // sort teams according to points in ascending order\n        .map(team => `${team.schoolName},${team.teamNumber},${team.points}`) // map to strings\n        .concat(['School,Team Number,Points']) // add header\n        .reverse() // change to descending order\n        .join('\\n');\n      const blob = new Blob([data], {type: 'text/csv'});\n      const url = window.URL.createObjectURL(blob);\n      this.file = this.sanitizer.bypassSecurityTrustUrl(url);\n      // todo this would be funny if it weren't so sad (i have no idea why this is needed but it fails with\n      //   'Failed - no file' on chrome on the first click if this isn't here soooo)\n      // i thought it might have something to do with href not getting set fast enough but console.log doesn't support\n      // this - works on safari just fine\n      // everything here should be synchronous so the file should exist by the time the link is clicked\n      // unless link isn't actually a reference, but rather a copied value. console.log doesnt support this.\n      link.href = url;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    });\n\n  }\n\n  /** Upload the questions to the server */\n  fileUpload(file: HTMLInputElement): void {\n    this.adminService.uploadQuestions(file.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n     Get teams as CSV \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                       Get teams as CSV               {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkToken\n                            \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getTeams\n                            \n                            \n                                    Private\n                                handleErrorAdmin\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:19\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \ncheckToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:73\n                \n            \n\n\n            \n                \n                    Checks that the current admin token is valid \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:81\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:55\n                \n            \n\n\n            \n                \n                    Gets all of the teams from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorAdmin(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:99\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:48\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:63\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:25\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:28\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:37\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient, HttpErrorResponse,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SHA3 } from 'crypto-js';\n\nimport { handleError, httpOptionsText, URI } from '../constants';\nimport { Team } from '../models/team';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The token for the admin user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('adminToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.token !== '';\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, SHA3(password).toString(), {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Gets all of the teams from the server */\n  getTeams(): Observable {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.TEAM.GET_ALL, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.token })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Checks that the current admin token is valid */\n  checkToken() {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.ADMIN.CHECK_TOKEN, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorAdmin(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('adminToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ReactiveFormsModule\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:34\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:45\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TokenExpiredError, verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          if (err instanceof TokenExpiredError) {\n            return res.status(403).json('Expired token');\n          } else {\n            return res.status(403).json('Invalid token');\n          }\n        } else {\n          // todo not sure why this worked without the safety check before\n          if (decoded.team) {\n            req.headers.authorization = [decoded.type, decoded.team.schoolName, decoded.team.teamNumber];\n          } else {\n            req.headers.authorization = [decoded.type, null, null];\n          }\n          next();\n        }\n      });\n    } else {\n      res.status(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'user' || req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.team = this.team;\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.team;\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.team;\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.team = undefined;\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.token };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.practice) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.practice) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.team === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                signupForm\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:37\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:53\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:58\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:68\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signupForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                        The signup form that contains the school name and team number \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:24\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:26\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** The signup form that contains the school name and team number */\n  signupForm = new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  });\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n    if (this.teamService.token !== '') {\n      this.teamService.getTeamFromServer().subscribe(team => {\n        if (team) {\n          const schoolNameControl = this.signupForm.get('schoolName');\n          const teamNumberControl = this.signupForm.get('teamNumber');\n          schoolNameControl.setValue(team.schoolName);\n          teamNumberControl.setValue(team.teamNumber);\n          this.team = team;\n        }\n      });\n    }\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.practice = true;\n    this.teamService.team = this.team;\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    const schoolNameControl = this.signupForm.get('schoolName');\n    const teamNumberControl = this.signupForm.get('teamNumber');\n    this.team.schoolName = schoolNameControl.value;\n    this.team.teamNumber = teamNumberControl.value;\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (!team) {\n          this.submitted = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.team = newTeam;\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n          this.teamExists = true;\n        } else {\n          this.submitted = true;\n          this.teamExists = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.team = team;\n          this.teamService.team = this.team;\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        Submit\n      \n      \n        -->\n        That team has already registered. Resume game?\n        -->\n        -->\n        That team has already registered and finished the game.\n        -->\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                  Submit                    -->        That team has already registered. Resume game?        -->        -->        That team has already registered and finished the game.        -->                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:21\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:22\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                            \n                                    Public\n                                practice\n                            \n                            \n                                    Public\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTeamFromServer\n                            \n                            \n                                    Private\n                                handleErrorUser\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team?: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:71\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorUser(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:84\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:45\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:54\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:60\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:23\n                            \n                        \n\n                \n                    \n                        The token for the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:26\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:35\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  public team: Team;\n  /** Whether or not this is a practice game */\n  public practice: boolean;\n  /** The token for the user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('userToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('userToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      tap(result => this.token = result[1]),\n      map(result => result[0]),\n      catchError(this.handleErrorUser)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(this.handleErrorUser)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team?: Team): Observable {\n    if (team) {\n      return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n        catchError(this.handleErrorUser)\n      );\n    } else {\n      const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n      return this.http.get(URI.TEAM.GET, httpOptions).pipe(\n        catchError(this.handleErrorUser)\n      );\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorUser(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('userToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/practiceQuestions.ts\n            \n            variable\n            practiceQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            function\n            setDbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            crypto-js : ^3.1.9-1\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            mongodb-memory-server : ^5.1.5\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                        \n                            setDbURL   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setDbURL\n                        \n                        \n                    \n                \n            \n            \n                \nsetDbURL()\n                \n            \n\n\n\n\n            \n                \n                    Sets dbURL based on whether we are using the production database or a local development version \n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nAll that is needed to run or work on this project is an installed version of node and npm. Everything else can be \nobtained by running npm install in the directory of this project.\nDevelopment server\nRun npm start for a frontend dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nBackend information\nThe backend of this project is built primarily using nodejs, along with express for REST,\nand mongodb for the database.\nFrontend information\nThe frontend of this project is built primarily using the Angular framework.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile them when they are changed and watch the js file and re-run it when it is changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However, that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  todo add unit tests.\n  todo add integration tests.\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO There are a lot of new ways to do things that might be worth looking in to\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails? - could start up in memory database, use that and periodically check if database is up,\n  and if it's up, transfer the teams and stats data.\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo can you move mongodb-memory-server to dev-dependencies? If not, how can you make it so you can?\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\nPriority for finishing:\ntodo app (animations in particular) is sluggish on safari compared to chrome\n  animations on edge are wonky - flashy and whatnot\n  Make sure to state that chrome is most supported browser - if any issues move to chrome. However, other browsers will usually work.\n    -- might be worth retrying, safari seems fine now.\ntodo finish stats module\ntodo not every team has a non null time ended - why? -- see if you can replicate\nTODO create admin interface that has the following functionality:\n  Built in documentation\n    - hobby vs free dyno\n    - common potential issues with csv parsing; caveats; etc.\ntodo look into only sending one question at a time, and only allowing each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n\nCan you use route guards to help secure api?\ntodo use some less gross colors for animations - maybe a gradient or something, or something that gives it depth. something\nthat doesn't hurt my eyes would be a good start.\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\nmay expire)\ntodo what happens when user token expires? Why does it need to expire? if it is mainly just used to fill in login infoit is also used to authorize though, and a non expiring token is dangerous\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbPassword   (src/.../constants.ts)\n                        \n                        \n                            dbURL   (src/.../server.ts)\n                        \n                        \n                            dbUser   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            practiceQuestions   (src/.../practiceQuestions.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SHA3(process.env.ADMIN_PASSWORD || 'password').toString()\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_PASSWORD\n                        \n                    \n\n                \n                    \n                        Database password \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_USER\n                        \n                    \n\n                \n                    \n                        Database username \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/practiceQuestions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    question: 'By area, which country is the considered the second largest in the world, to Russia?',\n    category: 'Geography',\n    answers: [\n      'Azerbaijan',\n      'Canada',\n      'United States',\n      'Russia',\n      'China'\n    ],\n    correctAnswer: 'Canada'\n  },\n  {\n    question: 'The characteristic color of a shiny coffee thermos is designed to prevent heat loss by which of the following processes?',\n    category: 'Heat Exchange',\n    answers: [\n      'Convection',\n      'Radiation',\n      'Slow Diffusion',\n      'Conduction',\n      'Circulation'\n    ],\n    correctAnswer: 'Radiation'\n  },\n  {\n    question: 'Which native Denakk\\u2019e name for the Alaskan peak Mount McKinley means \\u201cThe High One?\\u201d',\n    category: 'Location, Location',\n    answers: [\n      'Yukon',\n      'Kenai',\n      'Denali',\n      'Kuyokuk',\n      'Whittier'\n    ],\n    correctAnswer: 'Denali'\n  },\n  {\n    question: 'While humans have recently accelerated the greenhouse effect, which mostly non-human created gas ' +\n      'contributes most to this process?',\n    category: 'Got Some Gas',\n    answers: [\n      'Water vapor',\n      'Ozone',\n      'Carbon Dioxide',\n      'Nitrous Oxide',\n      'Chlorofluorocarbons'\n    ],\n    correctAnswer: 'Water vapor'\n  },\n  {\n    question: 'The largest object in our asteroid belt, named after the Roman goddess of agriculture, is the namesake ' +\n      'of which chemical element?',\n    category: 'Astronomy, Chemistry, and Mythology',\n    answers: [\n      'Cerium',\n      'Iridium',\n      'Plutonium',\n      'Samarium',\n      'Palladium'\n    ],\n    correctAnswer: 'Cerium'\n  },\n  {\n    question: 'This modern crop is a domesticated teosinte developed by early Mesoamericans which can be found in foods ' +\n      'such as nshima, chicha, and angu\\u2026',\n    category: 'Monocots',\n    answers: [\n      'Rice',\n      'Sugarcane',\n      'Maize',\n      'Wheat',\n      'Millet'\n    ],\n    correctAnswer: 'Maize'\n  },\n  {\n    question: 'Which city-state, located on the west bank of the Tiber River, is renowned for its basilica and obelisk?',\n    category: 'Autonomy',\n    answers: [\n      'Monaco',\n      'Qatar',\n      'Liechtenstein',\n      'Vatican City',\n      'Kuwait'\n    ],\n    correctAnswer: 'Vatican City'\n  },\n  {\n    question: 'Which opera by Gioachino Rossini features Figaro, a tonsorial artist who resides in one of Spain\\u2019s ' +\n      'largest cities?',\n    category: 'Figaro! Figaro! Figaro!',\n    answers: [\n      'Carmen',\n      'The Marriage of Figaro',\n      'The Magic Flute',\n      'Don Giovanni',\n      'The Barber of Seville'\n    ],\n    correctAnswer: 'The Barber of Seville'\n  },\n  {\n    question: 'The architectural period developed during and named after the reign of an iconic royal figure of the late' +\n      ' 19th century is\\u2026',\n    category: 'Architecture',\n    answers: [\n      'Georgian',\n      'Art deco',\n      'Victorian',\n      'Edwardian',\n      'Federal'\n    ],\n    correctAnswer: 'Victorian'\n  },\n  {\n    question: 'This Newbery Medal winner is a bildungsroman about a boy and an abused dog who form a bond in West Virginia\\u2026',\n    category: 'A Bildungsroman',\n    answers: [\n      'Bud, Not Buddy',\n      'The Giver',\n      'The Whipping Boy',\n      'Shiloh',\n      'Holes'\n    ],\n    correctAnswer: 'Shiloh'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The questions that will form the basis of practiceQuestions, questions, and answers during development. \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    GET_ALL: '/api/team/get_all',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/can_start'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login',\n    CHECK_TOKEN: '/api/admin/check_token'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
