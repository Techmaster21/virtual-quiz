var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.922,1,1.494,2,1.65,3,0.268,4,0.268,5,2.111,6,1.259,7,1.259,8,1.259,9,0.382,10,2.212,11,0.386,12,2.191,13,3.808,14,3.077,15,1.983,16,1.259,17,2.727,18,1.622,19,1.805,20,4.453,21,1.805,22,3.808,23,0.345,24,0.985,25,5.15,26,4.453,27,0.985,28,3.808,29,4.053,30,2.754,31,1.368,32,2.655,33,3.436,34,1.16,35,3.808,36,0.751,37,0.034,38,0.56,39,0.495,40,0.751,41,3.808,42,2.655,43,4.053,44,1.258,45,1.273,46,1.92,47,0.959,48,1.489,49,2.655,50,2.441,51,1.875,52,3.808,53,3.808,54,0.629,55,1.65,56,1.387,57,3.118,58,3.172,59,1.494,60,3.71,61,3.301,62,3.71,63,2.655,64,3.518,65,2.754,66,4.865,67,2.655,68,2.655,69,1.983,70,1.983,71,2.107,72,3.172,73,3.808,74,1.074,75,2.191,76,0.648,77,0.575,78,2.655,79,1.702,80,0.306,81,0.144,82,1.92,83,1.15,84,0.967,85,0.629,86,2.655,87,2.655,88,1.65,89,2.319,90,2.655,91,1.983,92,1.702,93,1.92,94,2.212,95,2.655,96,2.754,97,1.511,98,1.92,99,1.15,100,2.655,101,2.655,102,2.754,103,2.212,104,2.212,105,0.749,106,2.655,107,2.655,108,2.441,109,3.808,110,3.808,111,2.754,112,3.172,113,3.808,114,2.655,115,2.655,116,3.172,117,2.655,118,1.702,119,2.655,120,2.655,121,2.441,122,2.655,123,2.212,124,2.655,125,3.808,126,5.36,127,4.453,128,4.453,129,2.655,130,2.655,131,2.655,132,2.655,133,2.655,134,2.212,135,1.054,136,1.805,137,1.259,138,2.306,139,1.259,140,1.259,141,0.888,142,1.259,143,0.815,144,1.259,145,0.815,146,0.749,147,1.259,148,0.888,149,1.259,150,0.815,151,1.259,152,0.888,153,1.15,154,1.259,155,1.259,156,0.014,157,0.02,158,0.014]],["title/injectables/AdminService.html",[33,2.023,159,1.149]],["body/injectables/AdminService.html",[3,0.268,4,0.268,9,0.45,11,0.386,12,2.191,14,2.792,15,1.983,23,0.345,24,0.985,27,0.985,31,1.368,33,2.441,34,1.245,36,1.016,37,0.034,38,0.593,39,0.669,40,1.016,43,3.71,44,1.332,45,1.273,46,3.22,47,1.057,48,0.888,51,1.771,54,1.308,55,1.65,56,1.875,58,2.212,59,1.17,61,3.118,64,2.754,69,1.983,74,1.622,75,2.191,76,0.749,77,0.575,80,0.306,81,0.1,84,0.967,85,1.382,88,2.491,105,1.256,123,2.212,156,0.014,157,0.02,158,0.014,159,1.387,160,1.528,161,2.212,162,2.441,163,3.808,164,3.808,165,5.15,166,3.808,167,4.053,168,4.865,169,3.808,170,3.808,171,1.702,172,3.118,173,2.655,174,1.805,175,3.808,176,4.865,177,2.655,178,3.808,179,3.808,180,2.754,181,2.754,182,3.172,183,3.808,184,2.655,185,1.983,186,2.655,187,1.627,188,3.808,189,1.528,190,3.808,191,2.655,192,3.808,193,2.754,194,3.808,195,2.111,196,3.808,197,2.655,198,1.805,199,3.808,200,3.808,201,2.655,202,3.808,203,1.511,204,2.655,205,3.172,206,2.754,207,2.655,208,2.655,209,2.754,210,2.655,211,1.528,212,1.383,213,1.702,214,2.655,215,1.702,216,1.383,217,2.754,218,1.383,219,1.259,220,1.528,221,1.383,222,3.808,223,3.808,224,3.808,225,1.65,226,2.655,227,2.655,228,2.212,229,2.655,230,2.441,231,3.808,232,2.655,233,1.92,234,1.259,235,2.655,236,1.92,237,2.655,238,2.655,239,2.655,240,2.655,241,2.655,242,2.655,243,2.655,244,3.22,245,2.655,246,2.655,247,4.865,248,2.655,249,2.655,250,2.655,251,2.212,252,3.808,253,2.655,254,2.655,255,2.655,256,3.808,257,2.655,258,2.655,259,2.655]],["title/interfaces/Answer.html",[260,1.367,261,0.97]],["body/interfaces/Answer.html",[3,0.32,4,0.32,9,0.236,11,0.462,23,0.413,24,1.116,37,0.034,38,0.605,39,0.413,44,1.527,45,1.062,47,0.626,54,1.344,56,1.156,74,1.551,76,0.628,80,0.365,81,0.163,83,1.869,85,1.303,89,1.653,97,1.26,99,2.123,105,1.217,156,0.022,157,0.022,158,0.016,185,1.653,187,1.062,198,1.505,203,1.26,260,2.382,261,1.783,262,2.295,263,1.827,264,2.035,265,3.544,266,1.639,267,3.525,268,1.785,269,3.142,270,1.423,271,2.278,272,1.505,273,2.483,274,2.295,275,2.035,276,2.295,277,2.295,278,1.653,279,3.142,280,2.295,281,4.418,282,2.278,283,2.295,284,2.295,285,3.12,286,2.295,287,1.827,288,2.035,289,1.827,290,3.023,291,2.295,292,2.295,293,3.264,294,2.295,295,2.295,296,2.278,297,2.295,298,2.295,299,2.295,300,2.295,301,2.295,302,2.295,303,2.483,304,2.035,305,1.375,306,2.295,307,2.295,308,2.295,309,3.544,310,2.295,311,2.295,312,1.653,313,2.295,314,1.827,315,2.295,316,2.295,317,2.295,318,2.295,319,2.295,320,2.295,321,2.295,322,2.295,323,2.295,324,1.827,325,2.295,326,1.827,327,2.295]],["title/components/AppComponent.html",[0,0.565,141,1.056]],["body/components/AppComponent.html",[0,1.071,1,1.27,2,2.22,3,0.417,4,0.417,5,1.961,6,1.961,7,1.961,8,1.961,9,0.307,11,0.602,16,1.961,17,2.984,18,1.796,19,2.429,21,2.429,37,0.033,38,0.59,71,2.22,76,0.602,77,0.895,80,0.476,81,0.157,135,1.641,136,2.429,137,1.961,138,2.759,139,1.961,140,1.961,141,1.946,142,1.961,143,1.27,144,1.961,145,1.27,146,1.166,147,1.961,148,1.383,149,1.961,150,1.27,151,1.961,152,1.383,153,1.792,154,1.961,155,1.961,156,0.021,157,0.026,158,0.021,221,3.031,328,3.446,329,5.568,330,5.124,331,4.269]],["title/modules/AppModule.html",[332,1.644,333,2.023]],["body/modules/AppModule.html",[1,1.792,3,0.353,4,0.353,9,0.26,18,0.988,37,0.034,76,0.919,77,0.758,79,2.245,80,0.403,81,0.133,135,1.39,141,2.091,143,1.792,145,1.792,148,1.951,150,1.792,152,1.951,156,0.018,157,0.024,158,0.018,211,2.015,332,1.824,333,4.149,334,1.517,335,2.245,336,4.29,337,4.29,338,2.917,339,2.245,340,2.917,341,2.917,342,2.917,343,2.917,344,3.358,345,3.358,346,3.838,347,2.015,348,2.015,349,3.502,350,3.332,351,4.607,352,3.838,353,2.245,354,3.332,355,4.607,356,4.607,357,4.607,358,3.502,359,3.502,360,2.917,361,3.502,362,2.917,363,2.917,364,2.245,365,2.917,366,3.502,367,2.917,368,3.502,369,2.917]],["title/modules/AppRoutingModule.html",[332,1.644,344,1.816]],["body/modules/AppRoutingModule.html",[0,1.038,1,1.563,3,0.413,4,0.413,9,0.304,14,2.131,37,0.034,76,0.897,77,0.885,80,0.471,81,0.155,105,1.154,143,1.563,145,1.563,146,1.154,150,1.563,156,0.021,157,0.026,158,0.021,334,1.772,339,2.622,344,2.929,350,2.958,354,3.68,360,3.408,362,3.408,363,3.408,364,2.622,365,3.408,369,3.408,370,4.091,371,4.091,372,5.089,373,2.885,374,2.354,375,3.551,376,4.091,377,5.064,378,4.24,379,4.615,380,3.408,381,5.089,382,5.089,383,5.089,384,4.091]],["title/classes/Authorization.html",[81,0.119,234,1.497]],["body/classes/Authorization.html",[3,0.307,4,0.307,9,0.402,11,0.443,14,2.692,23,0.396,27,1.337,34,1.038,36,0.946,37,0.034,38,0.552,39,0.672,40,0.946,47,0.946,48,1.604,51,1.746,54,0.721,70,2.918,74,1.353,75,2.974,76,0.698,80,0.35,81,0.115,85,0.721,88,2.486,89,2.184,105,0.859,108,3.888,156,0.016,157,0.022,158,0.016,182,5.003,219,1.444,234,1.988,236,3.468,290,2.184,296,1.816,385,1.586,386,2.537,387,1.988,388,4.386,389,4.193,390,4.193,391,3.737,392,4.193,393,4.193,394,6.005,395,4.422,396,6.005,397,3.045,398,4.667,399,3.737,400,5.168,401,4.193,402,2.974,403,3.313,404,4.305,405,4.193,406,3.045,407,2.688,408,4.193,409,3.493,410,4.796,411,2.413,412,4.193,413,3.045,414,3.045,415,3.045,416,4.193,417,2.537,418,2.202,419,3.032,420,5.42,421,3.045,422,2.537,423,1.952,424,4.193,425,3.045,426,4.796,427,4.796,428,4.193]],["title/components/GameComponent.html",[0,0.565,143,0.97]],["body/components/GameComponent.html",[0,0.733,1,0.49,2,1.117,3,0.161,4,0.161,5,0.756,6,0.756,7,0.756,8,0.756,9,0.118,11,0.375,12,2.146,16,0.756,17,2.351,18,1.398,19,1.223,21,1.223,23,0.569,24,0.667,27,0.667,31,0.997,34,1.285,36,0.509,37,0.034,38,0.429,39,0.644,40,0.509,44,1.373,47,1.004,48,1.658,50,2.808,51,1.748,54,0.769,55,1.898,56,1.595,70,1.344,71,1.117,74,1.354,76,0.699,77,0.345,80,0.184,81,0.06,83,1.117,84,0.581,85,0.611,92,1.654,96,1.865,97,1.024,135,0.633,136,1.223,137,0.756,138,1.768,139,0.756,140,0.756,141,0.534,142,0.756,143,1.146,144,0.756,145,0.49,146,1.563,147,0.756,148,0.534,149,0.756,150,0.49,151,0.756,152,1.247,153,2.299,154,0.756,155,0.756,156,0.021,157,0.013,158,0.008,181,1.865,187,1.605,198,1.223,203,1.968,219,1.539,225,2.148,261,1.146,266,0.863,268,1.182,270,1.489,272,0.756,275,1.654,303,1.484,305,1.117,312,1.344,347,0.918,367,1.329,374,0.918,380,3.65,387,1.768,388,1.865,395,2.697,402,1.484,403,1.654,411,1.484,423,2.808,429,1.329,430,2.149,431,2.58,432,1.484,433,2.348,434,3.247,435,3.247,436,2.58,437,3.247,438,4.381,439,2.348,440,2.348,441,2.654,442,2.705,443,3.247,444,1.905,445,2.697,446,3.73,447,3.73,448,2.697,449,2.58,450,3.73,451,4.095,452,3.73,453,3.335,454,1.329,455,2.521,456,2.654,457,1.998,458,2.58,459,1.595,460,1.484,461,2.149,462,2.58,463,1.654,464,1.595,465,1.595,466,3.73,467,1.865,468,2.149,469,2.58,470,2.149,471,2.58,472,2.149,473,2.58,474,3.73,475,2.391,476,2.58,477,1.595,478,2.149,479,1.595,480,2.58,481,2.149,482,2.58,483,1.865,484,1.223,485,1.654,486,2.58,487,1.595,488,3.107,489,1.595,490,3.509,491,2.58,492,2.58,493,2.391,494,1.654,495,1.595,496,2.58,497,1.654,498,1.865,499,2.58,500,1.616,501,1.484,502,2.58,503,2.149,504,2.149,505,2.149,506,2.58,507,2.697,508,1.595,509,2.149,510,1.595,511,1.898,512,1.595,513,3.412,514,2.58,515,2.149,516,2.58,517,1.595,518,1.654,519,1.595,520,1.595,521,3.586,522,1.595,523,1.595,524,2.149,525,3.107,526,2.58,527,2.58,528,2.149,529,1.595,530,2.149,531,1.595,532,2.149,533,1.595,534,1.654,535,1.595,536,2.58,537,1.595,538,2.58,539,1.595,540,2.697,541,1.865,542,1.865,543,1.329,544,1.023,545,1.023,546,3.73,547,3.247,548,1.329,549,2.149,550,1.329,551,1.595,552,1.595,553,1.595,554,2.58,555,3.247,556,1.023,557,2.58,558,3.247,559,3.412,560,1.654,561,1.154,562,2.58,563,2.082,564,3.247,565,3.73,566,1.329,567,1.595,568,1.595,569,1.023,570,1.329,571,1.595,572,1.595,573,2.58,574,3.247,575,1.595,576,1.595,577,1.023,578,1.154,579,2.149,580,1.595,581,1.154,582,3.107,583,3.247,584,4.381,585,1.595,586,3.247,587,1.595,588,1.023,589,1.595,590,1.329,591,1.595,592,1.154]],["title/components/GameOverComponent.html",[0,0.565,145,0.97]],["body/components/GameOverComponent.html",[0,0.937,1,0.85,2,1.699,3,0.279,4,0.279,5,1.312,6,1.312,7,1.312,8,1.312,9,0.205,11,0.403,12,2.257,16,1.312,17,2.753,18,1.638,19,1.859,21,1.859,23,0.359,24,1.014,27,1.014,31,1.399,34,1.132,36,0.546,37,0.034,38,0.602,39,0.592,40,0.546,45,1.311,47,0.773,48,0.925,51,1.659,54,0.655,71,1.699,76,0.663,77,0.599,80,0.318,81,0.105,84,1.007,85,0.655,105,1.398,135,1.098,136,1.859,137,1.312,138,2.35,139,1.312,140,1.312,141,0.925,142,1.312,143,0.85,144,1.312,145,1.522,146,1.696,147,1.312,148,0.925,149,1.312,150,0.85,151,1.312,152,0.925,153,1.198,154,1.312,155,1.312,156,0.014,157,0.02,158,0.028,180,2.836,187,1.311,189,2.257,203,1.098,225,1.198,266,1.311,348,1.592,353,2.514,364,3.483,387,1.859,411,2.257,432,2.257,433,3.294,441,2.257,444,2.406,448,3.584,457,2.421,463,3.177,500,2.147,511,1.699,534,2.514,544,1.773,545,1.773,548,2.305,561,2,569,3.177,577,1.773,578,2,579,2.305,592,2.836,593,4.527,594,2.305,595,3.922,596,3.922,597,4.556,598,3.922,599,5.588,600,5.434,601,2.305,602,3.922,603,2.766,604,3.922,605,2.836,606,3.922,607,3.922,608,2.766,609,3.922,610,3.922,611,2.514,612,2.766,613,5.807,614,4.556,615,4.556,616,4.556,617,3.922,618,3.922,619,2.766,620,2.766,621,2.305,622,2.305,623,2.305,624,2.766,625,2.766,626,2.836,627,3.922,628,3.922,629,3.922,630,3.922,631,3.922,632,3.922]],["title/modules/MaterialModule.html",[332,1.644,345,1.816]],["body/modules/MaterialModule.html",[3,0.428,4,0.428,9,0.314,11,0.617,37,0.034,76,0.92,77,0.917,80,0.488,81,0.16,105,1.195,156,0.022,157,0.027,158,0.022,332,2.709,334,2.609,339,2.716,345,2.993,350,3.065,354,3.761,633,3.065,634,4.689,635,5.202,636,4.333,637,4.238,638,4.333,639,4.238,640,4.333,641,4.238,642,4.333,643,4.238,644,4.333,645,4.238,646,4.333,647,4.238,648,4.333,649,4.238,650,3.53,651,4.333,652,4.238,653,3.065]],["title/interfaces/PracticeQuestion.html",[260,1.367,273,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.319,4,0.319,9,0.235,11,0.461,23,0.411,24,1.114,37,0.034,38,0.605,39,0.411,44,1.526,45,1.059,47,0.624,54,1.343,56,1.153,74,1.549,76,0.627,80,0.364,81,0.163,83,1.865,85,1.301,89,1.649,97,1.256,99,2.12,105,1.214,156,0.022,157,0.022,158,0.016,185,1.649,187,1.059,198,1.501,203,1.256,260,2.38,261,1.688,262,2.289,263,1.821,264,2.029,265,3.539,266,1.637,267,3.522,268,1.782,269,3.137,270,1.466,271,2.275,272,1.501,273,3.023,274,3.114,275,2.029,276,2.289,277,2.289,278,1.649,279,3.137,280,2.289,281,4.416,282,2.275,283,2.289,284,2.289,285,3.114,286,2.289,287,1.821,288,2.029,289,1.821,290,3.02,291,2.289,292,2.289,293,3.262,294,2.289,295,2.289,296,2.275,297,2.289,298,2.289,299,2.289,300,2.289,301,2.289,302,2.289,303,2.478,304,2.029,305,1.371,306,2.289,307,2.289,308,2.289,309,3.539,310,2.289,311,2.289,312,1.649,313,2.289,314,1.821,315,2.289,316,2.289,317,2.289,318,2.289,319,2.289,320,2.289,321,2.289,322,2.289,323,2.289,324,1.821,325,2.289,326,1.821,327,2.289]],["title/classes/Question.html",[81,0.119,270,0.817]],["body/classes/Question.html",[3,0.402,4,0.402,9,0.295,11,0.728,23,0.517,24,1.294,31,1.537,34,1.243,36,0.785,37,0.033,38,0.458,39,0.746,40,0.785,54,1.508,80,0.458,81,0.151,156,0.02,157,0.026,158,0.02,270,1.68,282,2.709,290,3.257,385,2.074,581,3.957,654,3.317,655,2.879,656,3.317,657,5.209,658,3.982,659,3.982,660,5.004,661,5.472,662,5.472,663,5.472,664,4.559,665,3.982,666,3.982,667,3.982]],["title/classes/QuestionPreparer.html",[81,0.119,668,2.283]],["body/classes/QuestionPreparer.html",[3,0.31,4,0.31,9,0.228,11,0.447,18,1.19,23,0.399,27,1.342,34,1.043,36,0.951,37,0.034,38,0.555,39,0.626,40,0.951,44,1.488,47,0.606,48,1.028,54,1.363,59,0.944,65,3.052,74,1.584,76,0.614,80,0.354,81,0.182,83,2.434,85,1,91,1.601,105,1.697,111,3.486,156,0.016,157,0.022,158,0.016,225,1.332,261,1.594,263,2.986,266,1.028,267,2.706,268,1.119,270,1.453,272,1.457,282,2.248,296,2.434,303,2.986,385,1.601,387,2.001,388,4.3,430,3.516,521,3.052,560,2.706,563,1.971,668,3.052,669,2.561,670,5.189,671,2.706,672,4.221,673,4.221,674,4.221,675,3.074,676,4.221,677,5.189,678,3.516,679,3.516,680,4.221,681,3.074,682,4.221,683,4.82,684,4.221,685,3.074,686,4.221,687,4.221,688,4.53,689,3.074,690,3.516,691,2.223,692,3.052,693,3.074,694,3.074,695,3.074,696,3.074,697,3.074,698,3.074,699,3.074,700,3.074,701,3.074,702,3.074,703,2.561,704,3.074,705,3.516,706,3.074,707,3.074,708,3.074,709,4.221,710,3.074,711,4.221,712,3.074,713,3.074,714,3.074,715,3.074,716,3.074,717,3.074,718,3.074,719,4.221,720,4.221,721,3.074,722,3.074,723,3.074,724,3.074,725,3.074,726,1.971,727,2.223,728,2.561,729,2.561,730,2.223,731,2.561,732,3.074,733,3.074,734,3.074,735,3.074]],["title/injectables/QuestionService.html",[159,1.149,456,1.816]],["body/injectables/QuestionService.html",[3,0.331,4,0.331,9,0.243,11,0.477,15,2.296,23,0.426,24,1.14,27,1.14,31,1.53,34,1.153,36,0.869,37,0.034,38,0.507,39,0.722,40,0.869,44,1.14,45,1.474,47,0.869,59,1.006,69,2.296,74,0.924,76,0.851,77,0.709,80,0.377,81,0.189,84,1.193,85,1.262,88,1.909,105,1.243,156,0.017,157,0.023,158,0.017,159,1.605,160,1.885,162,2.826,171,2.1,172,3.415,174,2.09,187,1.474,195,2.636,206,2.369,209,2.369,211,1.885,212,1.707,213,2.1,215,2.1,216,1.707,218,1.707,219,1.553,220,1.885,221,1.707,230,3.415,233,3.853,234,2.362,261,1.354,268,1.605,270,1.438,272,1.553,312,2.296,407,2.826,445,3.853,456,2.536,457,2.535,501,2.536,511,2.48,655,3.187,679,3.672,736,2.73,737,3.187,738,4.981,739,4.408,740,4.408,741,4.408,742,5.328,743,3.277,744,4.408,745,3.672,746,3.277,747,3.277,748,3.672,749,4.408,750,3.277,751,2.73,752,3.277,753,3.277,754,3.277,755,4.408,756,3.277,757,5.328,758,3.277,759,4.15,760,3.277,761,3.277]],["title/classes/QuestionStore.html",[81,0.119,278,1.644]],["body/classes/QuestionStore.html",[3,0.257,4,0.257,9,0.189,11,0.371,23,0.332,24,0.957,27,0.957,30,2.676,34,1.282,36,1,37,0.034,38,0.674,39,0.659,40,1,44,1.588,45,0.853,47,1.076,48,1.456,54,1.324,55,1.105,56,1.586,74,1.712,76,0.539,80,0.294,81,0.165,83,2.069,85,1.201,89,1.329,97,1.469,99,2.291,105,1.044,156,0.019,157,0.019,158,0.013,185,1.928,187,1.238,198,1.755,203,1.469,260,2.069,261,1.467,263,3.441,264,1.636,265,2.676,266,1.238,267,2.372,268,1.348,269,2.372,270,1.236,271,2.363,272,1.21,273,2.13,274,1.845,275,2.372,276,2.676,277,2.676,278,1.928,279,3.39,280,3.149,281,4.416,282,2.467,283,3.149,284,3.149,285,3.667,286,2.676,287,2.13,288,2.372,289,2.13,290,2.967,291,3.149,292,1.845,293,3.278,294,1.845,295,1.845,296,2.421,297,1.845,298,1.845,299,1.845,300,1.845,301,1.845,302,1.845,303,2.749,304,2.372,305,1.603,306,2.676,307,2.676,308,2.676,309,3.149,310,1.845,311,1.845,312,1.928,313,2.676,314,2.506,315,2.676,316,1.845,317,1.845,318,1.845,319,1.845,320,1.845,321,1.845,322,1.845,323,1.845,324,1.469,325,1.845,326,1.469,327,1.845,385,1.329,445,1.845,762,3.701,763,3.701,764,2.552,765,2.552,766,2.552,767,2.552,768,2.552,769,2.552,770,2.552,771,2.552,772,2.552,773,2.552,774,2.552,775,2.552,776,2.552,777,2.552,778,2.552,779,2.552,780,2.552]],["title/components/QuestionsComponent.html",[0,0.565,148,1.056]],["body/components/QuestionsComponent.html",[0,0.944,1,0.703,2,1.48,3,0.231,4,0.231,5,1.085,6,1.085,7,1.085,8,1.085,9,0.17,11,0.333,16,1.085,17,2.625,18,1.562,19,1.619,21,1.619,23,0.661,24,0.884,27,0.884,31,1.255,34,1.22,36,0.806,37,0.034,38,0.558,39,0.685,40,0.806,44,1.316,46,3.277,47,0.806,48,1.367,50,2.905,54,0.809,57,2.19,59,1.049,70,2.361,71,1.48,76,0.74,77,0.495,80,0.263,81,0.087,84,0.833,85,0.542,91,1.192,92,3.108,93,3.918,102,3.507,105,0.645,116,1.907,121,1.467,135,0.908,136,1.619,137,1.085,138,2.149,139,1.085,140,1.085,141,0.765,142,1.085,143,0.703,144,1.085,145,0.703,146,0.645,147,1.085,148,1.516,149,1.085,150,0.703,151,1.085,152,0.765,153,0.991,154,1.085,155,1.085,156,0.023,157,0.018,158,0.012,187,1.516,189,1.966,198,1.619,212,1.192,219,1.085,225,0.991,261,1.799,268,1.766,270,1.432,272,1.085,282,2.101,387,1.619,432,1.966,439,3.811,440,3.507,441,1.966,442,4.04,456,2.927,460,1.317,475,2.19,488,3.776,490,2.905,494,1.467,511,2.101,524,2.846,528,2.846,530,2.846,543,1.907,559,2.846,582,1.907,657,2.846,688,2.846,705,1.907,745,1.907,781,1.907,782,4.087,783,4.087,784,4.087,785,3.416,786,4.532,787,3.416,788,2.846,789,3.416,790,2.846,791,4.087,792,2.289,793,3.416,794,2.289,795,2.289,796,2.289,797,2.289,798,3.405,799,2.289,800,3.416,801,2.289,802,3.416,803,3.416,804,1.966,805,3.416,806,3.416,807,3.416,808,4.532,809,2.289,810,2.846,811,4.087,812,3.416,813,2.289,814,2.846,815,3.416,816,3.416,817,3.416,818,3.416,819,2.19,820,2.955,821,2.47,822,2.47,823,3.405,824,4.087,825,2.289,826,1.907,827,2.289,828,2.289,829,2.289,830,3.416,831,2.289,832,3.416,833,3.416,834,2.289,835,2.289,836,1.317,837,2.289,838,2.289,839,2.289,840,2.289,841,2.289,842,2.289,843,2.289,844,2.289,845,2.289,846,2.289,847,3.416,848,2.289,849,2.289,850,2.289,851,2.289,852,2.289,853,2.289,854,2.289,855,2.289,856,2.289,857,2.289,858,2.289,859,3.416,860,2.289,861,3.416,862,3.416,863,2.289,864,2.289,865,1.907,866,2.289]],["title/guards/RegisterGuard.html",[375,2.023,867,2.023]],["body/guards/RegisterGuard.html",[3,0.4,4,0.4,9,0.294,11,0.576,23,0.515,27,1.29,31,1.677,34,1.079,36,0.781,37,0.034,38,0.456,39,0.515,40,0.781,47,0.781,51,2.086,74,1.117,76,0.794,77,0.857,80,0.456,81,0.15,84,1.442,85,1.181,146,1.616,156,0.02,157,0.026,158,0.02,159,1.816,187,1.668,189,2.87,203,1.572,220,2.279,221,2.063,225,1.716,374,2.279,375,3.197,378,5.023,402,2.87,403,3.197,432,2.279,455,3.522,457,2.612,463,3.197,485,3.197,545,2.539,566,4.155,578,2.864,588,2.539,601,3.299,867,3.197,868,3.299,869,3.299,870,4.987,871,4.987,872,4.987,873,3.96,874,4.155,875,3.96,876,4.987,877,4.155,878,3.96]],["title/components/SignupComponent.html",[0,0.565,150,0.97]],["body/components/SignupComponent.html",[0,0.796,1,0.579,2,1.275,3,0.19,4,0.19,5,0.893,6,0.893,7,0.893,8,0.893,9,0.14,11,0.274,12,1.694,16,0.893,17,2.482,18,1.477,19,1.396,21,1.396,23,0.245,24,0.762,27,0.762,29,3.413,31,1.113,34,1.159,36,0.372,37,0.034,38,0.603,39,0.383,40,0.372,44,1.06,47,0.808,48,1.37,50,3.02,51,1.492,55,1.925,56,1.619,59,1.565,60,3.019,62,3.703,65,3.407,71,1.275,74,0.83,76,0.686,77,0.408,79,1.208,80,0.217,81,0.071,84,0.686,99,2.207,112,2.453,118,1.887,134,3.413,135,0.748,136,1.396,137,0.893,138,1.942,139,0.893,140,0.893,141,0.63,142,0.893,143,0.579,144,0.893,145,0.579,146,1.539,147,0.893,148,0.63,149,0.893,150,1.258,151,0.893,152,0.63,153,0.816,154,0.893,155,0.893,156,0.01,157,0.015,158,0.01,180,2.129,187,1.703,203,1.954,225,1.275,251,2.453,261,0.904,266,0.985,268,1.072,270,0.762,293,2.711,296,1.275,374,1.084,379,4.738,387,1.942,391,2.963,395,2.129,403,2.626,407,1.887,411,1.694,423,2.626,432,1.694,433,2.621,441,2.711,444,2.431,448,2.963,453,3.872,454,1.57,455,2.711,457,2.133,463,1.887,467,2.129,472,2.453,475,1.887,484,1.942,485,1.887,493,1.887,494,2.626,498,2.129,500,2.207,501,1.694,507,3.684,511,2.041,525,2.453,532,3.413,534,1.887,544,1.208,545,1.208,550,2.453,560,2.626,561,1.362,563,1.887,569,2.626,570,2.453,577,1.887,588,1.887,622,2.453,626,3.56,726,1.887,727,2.129,788,3.413,804,2.357,819,2.626,874,2.453,879,1.57,880,2.129,881,2.944,882,3.872,883,3.624,884,2.944,885,3.624,886,3.624,887,4.445,888,3.624,889,4.097,890,3.156,891,2.944,892,1.884,893,2.453,894,2.944,895,1.884,896,4.097,897,1.884,898,1.884,899,2.944,900,1.884,901,2.453,902,4.097,903,2.453,904,1.884,905,2.944,906,1.884,907,1.884,908,3.413,909,1.884,910,1.884,911,1.884,912,1.884,913,1.884,914,2.944,915,2.944,916,2.944,917,1.884,918,1.884,919,1.884,920,1.884,921,1.884,922,1.884,923,1.57,924,1.884,925,3.624,926,2.944,927,1.884,928,1.884,929,4.712,930,2.944,931,2.944,932,4.097,933,1.884,934,4.097,935,2.944,936,2.944,937,2.453,938,2.453,939,2.944,940,2.944,941,2.129,942,4.097,943,2.963,944,2.453,945,4.097,946,3.407,947,2.944,948,2.944,949,2.453,950,2.453,951,4.097,952,2.944,953,1.57,954,2.129,955,2.453,956,2.453,957,2.963,958,2.944,959,4.712,960,2.944,961,2.944,962,2.453,963,2.453,964,2.944,965,2.944,966,2.944,967,2.453,968,2.944,969,1.884,970,1.884]],["title/classes/Team.html",[81,0.119,444,1.253]],["body/classes/Team.html",[3,0.299,4,0.299,9,0.22,11,0.598,23,0.385,24,1.064,31,1.263,34,1.276,36,0.584,37,0.033,38,0.588,39,0.766,40,1.209,54,1.442,70,1.542,80,0.341,81,0.112,88,2.555,146,1.566,156,0.015,157,0.021,158,0.021,234,2.24,244,3.417,266,1.375,270,1.222,271,2.047,290,3.33,296,2.047,305,1.282,385,1.542,439,4.016,440,3.417,441,3.394,444,2.559,500,2.406,511,2.78,518,3.029,581,4.2,626,4.016,901,4.47,903,4.626,946,3.417,963,3.937,971,2.466,972,4.626,973,5.553,974,5.553,975,2.96,976,2.96,977,4.112,978,4.725,979,4.725,980,5.553,981,4.725,982,4.725,983,3.937,984,2.96,985,2.96,986,2.96,987,2.96,988,2.96,989,2.96,990,2.96,991,2.96]],["title/injectables/TeamService.html",[159,1.149,457,1.367]],["body/injectables/TeamService.html",[3,0.247,4,0.247,9,0.181,11,0.356,15,1.869,23,0.318,24,0.928,27,0.928,31,1.305,34,1.272,36,1.062,37,0.034,38,0.62,39,0.732,40,1.062,45,1.916,47,1.145,48,1.2,51,1.307,54,1.109,56,1.897,59,1.438,69,1.869,74,1.657,76,0.758,77,0.529,80,0.282,81,0.161,82,2.595,84,0.891,85,1.357,88,2.333,97,1.858,99,2.516,105,0.69,146,1.012,156,0.013,157,0.018,158,0.013,159,1.307,160,1.408,162,2.3,167,3.9,171,1.568,172,3.001,174,1.701,185,2.714,187,1.2,189,3.098,195,2.672,198,2.219,211,1.408,212,1.274,213,1.568,215,1.568,216,1.274,218,1.274,219,1.16,220,1.408,221,1.274,230,2.724,234,1.701,266,1.2,312,1.869,387,1.701,411,2.065,444,2.588,457,1.554,467,2.595,518,2.3,534,2.3,544,1.568,556,3.001,577,2.3,611,2.3,737,2.595,836,2.998,923,2.038,972,2.989,992,2.038,993,4.682,994,4.682,995,3.588,996,2.989,997,2.989,998,3.588,999,3.588,1000,2.446,1001,2.446,1002,2.446,1003,3.588,1004,3.588,1005,2.446,1006,2.446,1007,3.588,1008,2.989,1009,3.588,1010,3.588,1011,2.446,1012,3.588,1013,2.446,1014,3.588,1015,3.588,1016,2.446,1017,3.588,1018,2.446,1019,3.588,1020,2.446,1021,2.446,1022,2.446,1023,1.769,1024,3.588,1025,3.588,1026,4.25,1027,2.446,1028,2.446,1029,4.25,1030,2.446,1031,2.446,1032,2.446,1033,2.446,1034,2.446]],["title/injectables/TimeService.html",[159,1.149,890,2.023]],["body/injectables/TimeService.html",[3,0.406,4,0.406,9,0.299,11,0.586,15,2.624,23,0.523,27,1.303,31,1.689,34,1.09,36,0.794,37,0.034,38,0.463,39,0.523,40,0.794,44,1.303,47,0.794,69,2.624,76,0.863,77,0.871,80,0.463,81,0.152,84,1.465,85,0.953,99,2.182,146,1.421,156,0.021,157,0.026,158,0.021,159,1.834,160,2.316,162,3.229,171,2.58,172,3.694,174,2.388,193,3.643,195,2.607,211,2.316,212,2.096,213,2.58,215,2.58,216,2.096,218,2.096,219,1.908,220,2.316,221,2.096,230,2.58,348,2.899,484,2.388,500,2.497,737,3.643,890,3.229,957,3.643,1035,3.353,1036,5.763,1037,4.025,1038,4.025,1039,4.197,1040,5.038,1041,5.038,1042,4.025]],["title/components/TimerComponent.html",[0,0.565,152,1.056]],["body/components/TimerComponent.html",[0,0.758,1,0.746,2,1.547,3,0.245,4,0.245,5,1.152,6,1.152,7,1.152,8,1.152,9,0.18,11,0.354,16,1.152,17,2.667,18,1.587,19,1.693,21,1.693,23,0.316,24,0.924,27,0.924,30,2.582,34,1.283,36,0.479,37,0.034,38,0.487,39,0.676,40,0.479,47,1.128,48,1.913,54,0.846,55,1.053,56,0.885,57,2.289,59,0.746,71,1.547,74,1.587,76,0.354,77,0.526,80,0.28,81,0.092,85,0.846,91,1.266,97,1.417,121,1.558,135,0.964,136,1.693,137,1.152,138,2.213,139,1.152,140,1.152,141,0.813,142,1.152,143,0.746,144,1.152,145,0.746,146,0.685,147,1.152,148,0.813,149,1.152,150,0.746,151,1.152,152,1.561,153,2.668,154,1.152,155,1.152,156,0.013,157,0.018,158,0.013,287,1.398,296,2.022,347,2.686,399,4.194,407,2.289,453,4.194,460,1.398,468,3.888,478,3.888,484,2.213,490,2.992,497,3.187,500,2.328,503,2.975,511,2.437,513,2.024,515,3.888,521,2.582,549,3.527,588,2.714,590,3.527,605,3.886,621,2.024,655,2.582,790,2.975,798,3.527,804,1.398,941,2.582,950,2.975,1039,2.024,1043,2.024,1044,3.571,1045,3.571,1046,3.571,1047,4.234,1048,3.571,1049,5.374,1050,4.234,1051,4.667,1052,4.667,1053,3.888,1054,4.972,1055,4.667,1056,2.43,1057,3.571,1058,2.43,1059,2.43,1060,3.571,1061,5.199,1062,2.43,1063,4.667,1064,2.43,1065,4.667,1066,3.571,1067,4.667,1068,2.43,1069,2.43,1070,2.43,1071,2.43,1072,2.43,1073,2.43,1074,3.571,1075,2.43,1076,2.43,1077,2.43,1078,2.024,1079,2.43,1080,2.43,1081,2.43,1082,2.43,1083,1.757,1084,4.667,1085,4.234,1086,4.667,1087,2.43,1088,2.43,1089,2.43,1090,2.43,1091,2.43,1092,2.43,1093,2.43,1094,2.43,1095,2.43,1096,2.43]],["title/coverage.html",[1097,3.581]],["body/coverage.html",[0,1.03,1,0.943,9,0.228,10,2.557,18,0.866,33,1.968,37,0.034,39,0.399,59,0.943,81,0.206,97,2.54,121,4.204,141,1.027,143,0.943,145,0.943,148,1.027,150,0.943,152,1.027,156,0.016,157,0.022,158,0.016,159,1.888,161,2.557,195,1.999,216,1.599,217,2.22,218,1.599,234,1.455,260,1.827,261,0.943,263,2.984,264,3.088,270,0.794,271,1.33,273,1.767,278,2.196,328,2.557,334,1.33,364,1.968,375,1.968,386,2.557,399,3.483,419,2.22,429,2.557,444,1.218,455,2.772,456,1.767,457,1.33,484,1.455,540,2.22,541,2.22,542,2.22,593,2.557,594,2.557,633,2.22,654,2.557,668,2.22,669,2.557,736,2.557,781,2.557,821,2.22,822,2.22,867,1.968,869,2.557,879,2.557,890,1.968,971,2.557,992,2.557,1023,2.22,1035,2.557,1043,2.557,1097,2.557,1098,2.557,1099,3.07,1100,3.07,1101,6.448,1102,4.217,1103,4.217,1104,4.237,1105,4.217,1106,4.217,1107,3.07,1108,4.217,1109,4.217,1110,2.557,1111,3.513,1112,2.557,1113,2.557,1114,3.513,1115,3.513,1116,2.557,1117,4.217,1118,4.528,1119,2.557,1120,2.557,1121,2.557,1122,3.07,1123,4.217,1124,4.013,1125,2.557,1126,2.557,1127,3.513,1128,3.513,1129,2.557,1130,2.557,1131,3.07,1132,3.07]],["title/dependencies.html",[335,2.432,1133,2.641]],["body/dependencies.html",[37,0.034,77,0.94,79,2.785,156,0.022,157,0.027,158,0.022,212,2.263,335,2.785,352,4.4,353,3.385,374,2.5,417,3.62,418,3.142,690,3.62,759,3.62,820,3.819,826,3.62,1134,6.3,1135,4.345,1136,5.281,1137,4.345,1138,4.345,1139,4.345,1140,4.345,1141,3.62,1142,4.345,1143,4.345,1144,3.819,1145,4.345,1146,4.345,1147,4.345,1148,4.4,1149,4.345,1150,4.345,1151,4.345,1152,4.345,1153,4.345,1154,4.345,1155,4.345,1156,4.345,1157,4.345,1158,3.62,1159,4.345,1160,4.345,1161,4.345,1162,4.345]],["title/miscellaneous/functions.html",[1163,1.693,1164,3.161]],["body/miscellaneous/functions.html",[23,0.582,36,1.137,37,0.031,38,0.663,39,0.582,40,1.137,55,1.939,83,1.939,156,0.023,157,0.028,158,0.023,174,2.122,195,2.899,216,2.8,314,3.094,324,3.316,611,2.869,692,3.236,730,3.888,804,2.575,814,3.728,836,2.575,1104,3.236,1127,3.728,1128,4.801,1129,4.479,1130,4.479,1144,3.888,1163,2.869,1164,3.728,1165,5.376,1166,3.728,1167,4.475,1168,4.475,1169,5.376,1170,5.376,1171,4.475,1172,4.475,1173,4.475,1174,3.728]],["title/index.html",[23,0.343,326,1.52,497,1.693]],["body/index.html",[0,0.913,4,0.346,9,0.337,18,1.282,37,0.023,38,0.395,44,1.176,45,1.94,59,1.054,93,2.482,94,2.859,98,2.482,103,2.859,156,0.018,157,0.023,158,0.023,193,2.482,268,1.25,271,2.351,279,2.2,282,1.487,289,1.975,304,2.2,305,2.209,331,2.859,347,1.975,348,1.975,460,1.975,461,2.859,483,2.482,484,2.156,493,3.479,501,1.975,611,2.914,671,3.72,691,2.482,703,3.788,731,2.859,810,2.859,953,2.859,954,2.482,955,2.859,962,2.859,1053,2.859,1083,2.482,1144,2.482,1175,5.098,1176,3.432,1177,3.687,1178,5.098,1179,3.432,1180,3.432,1181,6.269,1182,3.432,1183,2.859,1184,5.919,1185,3.432,1186,3.788,1187,2.859,1188,3.432,1189,3.432,1190,3.432,1191,2.859,1192,3.432,1193,4.704,1194,3.432,1195,2.859,1196,3.432,1197,5.919,1198,4.247,1199,3.432,1200,4.834,1201,3.432,1202,2.859,1203,3.432,1204,3.432,1205,3.432,1206,2.859,1207,4.547,1208,3.788,1209,4.522,1210,2.482,1211,4.547,1212,3.788,1213,3.432,1214,3.432,1215,3.432,1216,3.432,1217,4.247,1218,3.432,1219,2.859,1220,4.547,1221,3.432,1222,2.859,1223,3.432,1224,2.859,1225,2.859,1226,5.098,1227,3.432,1228,4.547,1229,3.432,1230,4.547,1231,2.859,1232,3.432,1233,3.432,1234,3.432,1235,3.432,1236,3.432,1237,3.432,1238,3.432,1239,4.547,1240,4.547,1241,4.547,1242,3.432,1243,3.432,1244,3.432,1245,3.432,1246,2.859,1247,4.547,1248,3.432,1249,4.547,1250,3.432,1251,3.432,1252,3.432,1253,3.432,1254,3.432,1255,3.432,1256,3.432,1257,3.788]],["title/modules.html",[334,1.862]],["body/modules.html",[37,0.029,118,3.657,156,0.025,157,0.029,158,0.025,333,3.173,334,2.144,344,2.848,345,2.848,353,3.173,1258,4.95,1259,4.95,1260,6.011,1261,5.705]],["title/overview.html",[1262,3.581]],["body/overview.html",[1,1.726,2,1.829,37,0.033,135,1.675,141,2.075,143,1.726,145,1.726,148,1.879,150,1.726,152,1.879,156,0.022,157,0.027,158,0.022,160,2.429,262,3.053,332,2.199,333,4.197,334,1.829,335,2.706,336,3.517,337,3.517,338,3.517,339,2.706,340,3.517,341,3.517,342,3.517,343,3.517,344,3.233,345,3.233,346,4.323,347,2.429,348,2.429,373,2.199,385,2.199,560,2.706,563,2.706,726,2.706,727,3.053,728,3.517,729,3.517,867,2.706,943,3.053,1262,3.517]],["title/routes.html",[373,2.239]],["body/routes.html",[37,0.03,156,0.026,157,0.03,158,0.026,373,2.654]],["title/todo.html",[91,1.376,326,1.52,497,1.693]],["body/todo.html",[0,0.905,3,0.255,14,2.479,15,1.319,18,1.038,37,0.029,38,0.424,44,1.408,45,1.591,47,0.499,51,1.841,57,1.623,59,1.462,61,1.623,69,1.319,72,2.109,75,1.457,82,3.441,83,1.097,88,1.594,89,1.319,91,3.376,98,1.831,102,1.831,104,3.066,108,1.623,111,1.831,118,1.623,146,1.223,153,1.878,156,0.013,157,0.019,158,0.013,174,1.2,181,1.831,185,1.319,195,1.745,244,1.831,260,1.097,261,0.778,266,0.847,269,1.623,270,1.364,271,1.097,282,1.097,287,1.457,288,1.623,289,2.117,293,1.457,305,1.594,314,1.457,324,2.495,373,1.319,398,3.066,402,1.457,404,2.109,409,2.109,422,2.109,444,1.888,460,1.457,470,2.109,475,1.623,483,1.831,485,2.359,490,1.623,493,1.623,494,2.359,500,1.097,501,2.117,509,3.066,511,1.594,518,1.623,556,1.623,623,2.109,650,2.109,653,1.831,656,2.109,664,2.109,671,2.779,692,1.831,726,1.623,730,1.831,804,1.457,819,2.359,820,1.831,823,2.109,836,2.738,868,2.109,877,2.109,880,1.831,882,2.661,893,3.066,908,2.109,937,3.066,938,2.109,944,2.109,946,2.661,949,3.066,954,3.135,956,2.109,967,2.109,983,2.109,1008,2.109,1078,2.109,1083,2.661,1098,2.109,1141,2.109,1174,2.109,1177,2.661,1186,3.066,1187,3.611,1191,3.066,1195,2.109,1198,3.066,1200,2.109,1208,3.066,1209,3.611,1210,2.661,1212,2.109,1217,2.109,1219,2.109,1224,2.109,1225,2.109,1257,2.109,1263,2.532,1264,2.532,1265,2.532,1266,2.532,1267,2.532,1268,2.532,1269,2.532,1270,2.532,1271,2.532,1272,2.532,1273,3.68,1274,3.68,1275,2.532,1276,2.532,1277,2.109,1278,2.532,1279,2.532,1280,2.109,1281,2.532,1282,3.68,1283,2.532,1284,2.532,1285,2.532,1286,2.532,1287,2.532,1288,2.532,1289,2.532,1290,2.532,1291,2.532,1292,2.532,1293,2.532,1294,2.532,1295,2.532,1296,2.532,1297,3.68,1298,3.066,1299,2.532,1300,2.532,1301,2.532,1302,2.532,1303,3.68,1304,2.532,1305,2.532,1306,3.68,1307,3.68,1308,2.532,1309,5.274,1310,2.532,1311,2.532,1312,2.532,1313,2.532,1314,2.532,1315,3.68,1316,3.68,1317,2.532,1318,2.532,1319,2.532,1320,2.532,1321,2.532,1322,2.532,1323,2.532,1324,2.532,1325,2.532,1326,2.532,1327,3.68,1328,2.532,1329,2.532,1330,2.532,1331,2.532,1332,3.68,1333,2.532,1334,2.532,1335,2.532,1336,3.68,1337,2.532,1338,2.532,1339,2.532,1340,5.055,1341,2.532,1342,3.066,1343,2.532,1344,2.532,1345,2.532,1346,2.532,1347,2.532,1348,2.532,1349,2.532,1350,2.109,1351,2.532,1352,2.532,1353,2.532,1354,3.68,1355,2.532,1356,2.532,1357,4.335,1358,2.532,1359,2.532,1360,2.532,1361,2.532,1362,2.532,1363,2.532,1364,2.532,1365,2.532,1366,2.532,1367,2.532,1368,2.532,1369,2.532,1370,2.532,1371,2.532,1372,2.532,1373,2.532,1374,2.532,1375,2.109,1376,2.532,1377,2.532,1378,2.532,1379,2.532,1380,2.532,1381,2.532,1382,2.532,1383,2.532,1384,2.532,1385,2.532,1386,2.532,1387,2.532,1388,2.532,1389,2.532,1390,3.68,1391,2.532,1392,2.532,1393,2.532,1394,2.532,1395,2.532,1396,2.532,1397,2.532,1398,2.532,1399,2.532,1400,2.532,1401,2.532,1402,2.532,1403,2.532,1404,2.532,1405,2.532,1406,3.68,1407,2.532,1408,2.109,1409,2.532,1410,2.532,1411,2.532,1412,2.532,1413,2.532,1414,2.532,1415,2.532,1416,2.532,1417,2.532,1418,2.532,1419,2.532,1420,2.532,1421,2.532,1422,2.532,1423,2.532,1424,2.532,1425,2.532,1426,2.532,1427,2.532,1428,2.532,1429,3.68,1430,3.68,1431,2.532,1432,2.532]],["title/miscellaneous/variables.html",[1163,1.693,1433,3.161]],["body/miscellaneous/variables.html",[9,0.177,14,2.179,18,0.992,23,0.457,37,0.034,39,0.794,44,1.082,45,1.176,51,0.867,54,0.991,55,2.71,56,2.264,59,1.285,61,2.255,64,1.722,70,2.179,71,1.031,75,2.024,88,1.031,92,2.255,96,2.544,97,0.945,99,1.031,108,1.526,156,0.012,157,0.018,158,0.012,174,1.129,203,0.945,205,3.485,206,2.544,209,2.544,217,2.544,218,1.832,225,1.031,228,1.984,233,3.342,236,1.722,260,1.031,261,1.419,266,1.649,268,0.867,270,0.91,271,2.002,278,2.179,305,1.031,334,1.812,373,1.24,377,1.984,391,1.722,402,2.024,418,3.025,419,3.342,423,1.526,444,0.945,455,3.453,481,1.984,484,2.447,498,2.544,500,2.236,504,1.984,505,1.984,507,1.722,540,2.544,541,2.544,542,2.544,556,2.255,569,1.526,592,3.025,605,3.025,633,1.722,634,1.984,636,1.984,638,1.984,640,1.984,642,1.984,644,1.984,646,1.984,648,1.984,651,1.984,653,1.722,671,3.16,678,1.984,691,2.544,748,1.984,751,1.984,819,2.255,821,2.544,822,2.544,836,2.408,865,2.931,880,1.722,882,1.722,941,1.722,943,1.722,957,2.544,996,2.931,997,2.931,1023,2.544,1104,1.722,1110,1.984,1111,4.448,1112,1.984,1113,1.984,1114,3.85,1115,1.984,1116,2.931,1118,1.984,1119,2.931,1120,2.931,1121,2.931,1124,1.984,1125,1.984,1126,1.984,1148,1.984,1158,1.984,1163,1.526,1166,4.867,1177,1.722,1183,1.984,1193,1.984,1202,1.984,1206,3.485,1210,1.722,1222,3.485,1231,1.984,1246,1.984,1277,1.984,1280,1.984,1298,1.984,1342,3.85,1350,1.984,1375,1.984,1408,1.984,1433,1.984,1434,4.184,1435,2.381,1436,2.381,1437,2.381,1438,3.518,1439,2.381,1440,2.381,1441,2.381,1442,2.381,1443,2.381,1444,2.381,1445,2.381,1446,2.381,1447,2.381,1448,2.381,1449,2.381,1450,2.381,1451,2.381,1452,2.381,1453,2.381,1454,2.381,1455,2.381,1456,2.381,1457,2.381,1458,2.381,1459,2.381,1460,2.381,1461,2.381,1462,2.381,1463,3.518,1464,2.381,1465,2.381,1466,3.518,1467,2.381,1468,2.381,1469,2.381,1470,2.381,1471,2.381,1472,2.381,1473,2.381,1474,2.381,1475,2.381,1476,2.381,1477,2.381,1478,2.381,1479,2.381,1480,2.381,1481,2.381,1482,3.518,1483,2.381,1484,2.381,1485,2.381,1486,2.381,1487,2.381,1488,2.381,1489,2.381,1490,2.381,1491,2.381,1492,2.381,1493,2.381,1494,2.381,1495,2.381,1496,2.381,1497,2.381,1498,2.381,1499,2.381,1500,2.381,1501,3.518,1502,2.381,1503,2.381,1504,2.381,1505,2.381,1506,2.381,1507,2.381,1508,2.381,1509,2.381,1510,2.381,1511,2.381,1512,2.381,1513,2.381,1514,2.381,1515,2.381,1516,2.381,1517,2.381,1518,2.381,1519,2.381,1520,2.381]]],"invertedIndex":[["",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":521,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1087,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":560,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1179,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":473,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":592,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1096,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":917,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":942,"title":{},"body":{"components/SignupComponent.html":{}}}],["2",{"_index":943,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":931,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":563,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":726,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":727,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":728,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":569,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":723,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":729,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_answers",{"_index":283,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":972,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":280,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":284,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["absolute",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1331,"title":{},"body":{"todo.html":{}}}],["access",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":870,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{}}}],["account",{"_index":1288,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":482,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":876,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":661,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":1078,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":422,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":393,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":164,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":401,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":33,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":623,"title":{},"body":{"components/GameOverComponent.html":{},"todo.html":{}}}],["against",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1403,"title":{},"body":{"todo.html":{}}}],["all(/^(?!.*\\/api",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1329,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":403,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":749,"title":{},"body":{"injectables/QuestionService.html":{}}}],["already",{"_index":908,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1344,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1222,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":1177,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":826,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":637,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":639,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":641,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":643,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":645,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":647,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":649,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":652,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":374,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":782,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":832,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":818,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":820,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{},"todo.html":{}}}],["another",{"_index":934,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":261,"title":{"interfaces/Answer.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":791,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":745,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":282,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{}}}],["answers(given",{"_index":301,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":715,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":955,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1342,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/canstart",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":329,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":330,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":141,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":751,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":333,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":344,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1429,"title":{},"body":{"todo.html":{}}}],["array",{"_index":688,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":855,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":706,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":716,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":719,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":720,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["artifacts",{"_index":1201,"title":{},"body":{"index.html":{}}}],["assigns",{"_index":724,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["async",{"_index":314,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":1129,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":400,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":390,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":234,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":428,"title":{},"body":{"classes/Authorization.html":{}}}],["authorized",{"_index":165,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":1345,"title":{},"body":{"todo.html":{}}}],["automatic",{"_index":505,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1191,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autowrongguess",{"_index":541,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["await",{"_index":319,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1365,"title":{},"body":{"todo.html":{}}}],["back",{"_index":1333,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1186,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":864,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":830,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1303,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1390,"title":{},"body":{"todo.html":{}}}],["bar",{"_index":650,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["base",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":937,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["beautification",{"_index":1265,"title":{},"body":{"todo.html":{}}}],["before",{"_index":402,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":981,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["between",{"_index":941,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":759,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1246,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1347,"title":{},"body":{"todo.html":{}}}],["box",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{}}}],["break",{"_index":423,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":437,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":470,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":438,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":542,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1260,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1200,"title":{},"body":{"index.html":{},"todo.html":{}}}],["built",{"_index":1316,"title":{},"body":{"todo.html":{}}}],["button",{"_index":494,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":863,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":288,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":515,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1049,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":1082,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":468,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":378,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canstart",{"_index":913,"title":{},"body":{"components/SignupComponent.html":{}}}],["case",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":322,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1276,"title":{},"body":{"todo.html":{}}}],["category",{"_index":657,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{}}}],["caveats",{"_index":1320,"title":{},"body":{"todo.html":{}}}],["center",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["change",{"_index":810,"title":{},"body":{"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1249,"title":{},"body":{"index.html":{}}}],["changes",{"_index":811,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":853,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":850,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":851,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["charge",{"_index":275,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":691,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":739,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":741,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":1051,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":407,"title":{},"body":{"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["checktoken",{"_index":392,"title":{},"body":{"classes/Authorization.html":{}}}],["checktoken(req",{"_index":405,"title":{},"body":{"classes/Authorization.html":{}}}],["chemistry",{"_index":1302,"title":{},"body":{"todo.html":{}}}],["choices",{"_index":663,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["class",{"_index":81,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":385,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1052,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1060,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":516,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":587,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1178,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":488,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1045,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":632,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1195,"title":{},"body":{"index.html":{},"todo.html":{}}}],["collection",{"_index":317,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":320,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":865,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":803,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1348,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1257,"title":{},"body":{"index.html":{},"todo.html":{}}}],["comment",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":1317,"title":{},"body":{"todo.html":{}}}],["compared",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":894,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":963,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":957,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":475,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["config",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1266,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":838,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1287,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1349,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["consist",{"_index":930,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1343,"title":{},"body":{"todo.html":{}}}],["console.log(`an",{"_index":323,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.log(errors",{"_index":699,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["consoleoutput",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":977,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":658,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":792,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":454,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":975,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":601,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":660,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":387,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1292,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":568,"title":{},"body":{"components/GameComponent.html":{}}}],["converting",{"_index":1353,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":604,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":620,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":268,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":267,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["correctcolor",{"_index":821,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":725,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":504,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":1335,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1097,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":730,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["creates",{"_index":707,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1338,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["crud",{"_index":1359,"title":{},"body":{"todo.html":{}}}],["cst",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1301,"title":{},"body":{"todo.html":{}}}],["current",{"_index":490,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":518,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":439,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":861,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":862,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":849,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":611,"title":{},"body":{"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":271,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":318,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":549,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1350,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1255,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":410,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":424,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":535,"title":{},"body":{"components/GameComponent.html":{}}}],["default",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1236,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":335,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1225,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1233,"title":{},"body":{"index.html":{}}}],["describe",{"_index":265,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["dev",{"_index":1185,"title":{},"body":{"index.html":{}}}],["develop",{"_index":1294,"title":{},"body":{"todo.html":{}}}],["development",{"_index":1183,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1339,"title":{},"body":{"todo.html":{}}}],["directive",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1199,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1203,"title":{},"body":{"index.html":{}}}],["display",{"_index":530,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1044,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1202,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1251,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1297,"title":{},"body":{"todo.html":{}}}],["div",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1098,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["doesn't",{"_index":306,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["doesnt",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["don't",{"_index":953,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":970,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1298,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1369,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1314,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1305,"title":{},"body":{"todo.html":{}}}],["dynamic",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1214,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":819,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":947,"title":{},"body":{"components/SignupComponent.html":{}}}],["earned",{"_index":982,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":833,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["efficient",{"_index":834,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["emergencies",{"_index":1275,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":814,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1057,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":1009,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1385,"title":{},"body":{"todo.html":{}}}],["end",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["endpoint",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":404,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":491,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":959,"title":{},"body":{"components/SignupComponent.html":{}}}],["environment",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1229,"title":{},"body":{"index.html":{}}}],["err",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":327,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":324,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":692,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":698,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1416,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1271,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":570,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1321,"title":{},"body":{"todo.html":{}}}],["event",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.target",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{}}}],["event.total",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":798,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["example",{"_index":961,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1363,"title":{},"body":{"todo.html":{}}}],["execute",{"_index":1211,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":806,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":307,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":467,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1376,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1337,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1389,"title":{},"body":{"todo.html":{}}}],["export",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":339,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":418,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":274,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["fails",{"_index":1351,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1290,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":662,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1374,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1398,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1312,"title":{},"body":{"todo.html":{}}}],["feel",{"_index":967,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1193,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload($event",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1039,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["finish",{"_index":1352,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":786,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":440,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":848,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":596,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":800,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":932,"title":{},"body":{"components/SignupComponent.html":{}}}],["fix",{"_index":1332,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1263,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1205,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1366,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1252,"title":{},"body":{"index.html":{}}}],["following",{"_index":1313,"title":{},"body":{"todo.html":{}}}],["font",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{}}}],["forbidden",{"_index":427,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":285,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":827,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":844,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{}}}],["formcontrol",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["free",{"_index":968,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":383,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":399,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1164,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1216,"title":{},"body":{"index.html":{}}}],["gained",{"_index":528,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":866,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":435,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":436,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":143,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":380,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":145,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gecko",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1198,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1176,"title":{},"body":{"index.html":{}}}],["getadmin",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":777,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1036,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":166,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":762,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":315,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpractice",{"_index":993,"title":{},"body":{"injectables/TeamService.html":{}}}],["getpracticequestions",{"_index":770,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":445,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1076,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":994,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":995,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1004,"title":{},"body":{"injectables/TeamService.html":{}}}],["getter",{"_index":763,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":308,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getting",{"_index":326,"title":{"index.html":{},"todo.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":167,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["github:angular/web",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":296,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{}}}],["go",{"_index":1218,"title":{},"body":{"index.html":{}}}],["good",{"_index":1083,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1304,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1261,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":867,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":868,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":507,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":935,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1268,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1269,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["having",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":704,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["headers",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1217,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":303,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1128,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1284,"title":{},"body":{"todo.html":{}}}],["heroku",{"_index":1182,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1227,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holds",{"_index":655,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["hrs",{"_index":617,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1190,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":754,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptionsjson",{"_index":1023,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1029,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":738,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["https",{"_index":1386,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/practical",{"_index":1392,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/user",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1358,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1378,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["human",{"_index":606,"title":{},"body":{"components/GameOverComponent.html":{}}}],["i.e",{"_index":462,"title":{},"body":{"components/GameComponent.html":{}}}],["id",{"_index":983,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["identifier",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":534,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":432,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1308,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":841,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":653,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1194,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":822,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":705,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":712,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":734,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["inform",{"_index":1371,"title":{},"body":{"todo.html":{}}}],["information",{"_index":411,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["initiate",{"_index":881,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":469,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":159,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":160,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1405,"title":{},"body":{"todo.html":{}}}],["input",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["input#get",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{}}}],["inputs",{"_index":789,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["instance",{"_index":304,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instead",{"_index":287,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":929,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1285,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1180,"title":{},"body":{"index.html":{}}}],["interface",{"_index":260,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":262,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1289,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1061,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1074,"title":{},"body":{"components/TimerComponent.html":{}}}],["isn't",{"_index":933,"title":{},"body":{"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":969,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1334,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1318,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":503,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["j",{"_index":717,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":678,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join(__dirname",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1144,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":748,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":417,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":415,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":421,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1213,"title":{},"body":{"index.html":{}}}],["keep",{"_index":949,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kinda",{"_index":837,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["last",{"_index":1231,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":514,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1243,"title":{},"body":{"index.html":{}}}],["legend",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":835,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["limit",{"_index":498,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":708,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":747,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":509,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":1007,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1277,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":446,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":466,"title":{},"body":{"components/GameComponent.html":{}}}],["localstorage",{"_index":1322,"title":{},"body":{"todo.html":{}}}],["located",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1315,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":431,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["loginform",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["logs",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":938,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1340,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1327,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1407,"title":{},"body":{"todo.html":{}}}],["lot",{"_index":1323,"title":{},"body":{"todo.html":{}}}],["main",{"_index":430,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["make",{"_index":1309,"title":{},"body":{"todo.html":{}}}],["many",{"_index":527,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(event",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["matbuttonmodule",{"_index":636,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":638,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":640,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":634,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":345,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":642,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":718,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":562,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":644,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":646,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":648,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":651,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1357,"title":{},"body":{"todo.html":{}}}],["meaning",{"_index":1230,"title":{},"body":{"index.html":{}}}],["menu",{"_index":567,"title":{},"body":{"components/GameComponent.html":{}}}],["message",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":398,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["million",{"_index":1299,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":605,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1050,"title":{},"body":{"components/TimerComponent.html":{}}}],["mins",{"_index":616,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":944,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1163,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":544,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modifying",{"_index":624,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":332,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":334,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1148,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongo",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":460,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1370,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1280,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["moz",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":614,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1067,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":600,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":979,"title":{},"body":{"classes/Team.html":{}}}],["n",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["namespaces",{"_index":1377,"title":{},"body":{"todo.html":{}}}],["navigate",{"_index":1189,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":483,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":954,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["new",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":1362,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":926,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":395,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":396,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1197,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":447,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":787,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":807,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":448,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":1278,"title":{},"body":{"todo.html":{}}}],["node",{"_index":1360,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1254,"title":{},"body":{"index.html":{}}}],["non",{"_index":1270,"title":{},"body":{"todo.html":{}}}],["nothing",{"_index":1253,"title":{},"body":{"index.html":{}}}],["now",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":1184,"title":{},"body":{"index.html":{}}}],["null",{"_index":924,"title":{},"body":{"components/SignupComponent.html":{}}}],["number",{"_index":511,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["numbers",{"_index":710,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["object",{"_index":266,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":816,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":679,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":471,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":325,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1031,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1274,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":449,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":486,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":450,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":804,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":783,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":788,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":812,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":889,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":501,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ones",{"_index":1041,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":433,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":451,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera/ie",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1040,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":409,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["otherwise",{"_index":1008,"title":{},"body":{"injectables/TeamService.html":{},"todo.html":{}}}],["out",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1291,"title":{},"body":{"todo.html":{}}}],["output",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":790,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":463,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":597,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":598,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":594,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":612,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":602,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":603,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":608,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1221,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1262,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1133,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":871,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["papa",{"_index":693,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":690,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":695,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1245,"title":{},"body":{"index.html":{}}}],["param",{"_index":581,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":689,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":694,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":701,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":697,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1141,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1319,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1432,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":269,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":377,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":382,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":952,"title":{},"body":{"components/SignupComponent.html":{}}}],["people",{"_index":1372,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["perfectly",{"_index":1426,"title":{},"body":{"todo.html":{}}}],["perform",{"_index":480,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1391,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1238,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1364,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1235,"title":{},"body":{"index.html":{}}}],["play",{"_index":882,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":630,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":595,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":622,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":631,"title":{},"body":{"components/GameOverComponent.html":{}}}],["point",{"_index":525,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":441,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":442,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1300,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":538,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["possibly",{"_index":1361,"title":{},"body":{"todo.html":{}}}],["post",{"_index":996,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1010,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":664,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["practice]{@link",{"_index":1025,"title":{},"body":{"injectables/TeamService.html":{}}}],["practice_questions",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":273,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":291,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practicequestions(given",{"_index":294,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1387,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":670,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":674,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":669,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":675,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":685,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":681,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1296,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":896,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":492,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":621,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{}}}],["prevents",{"_index":566,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1224,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":610,"title":{},"body":{"components/GameOverComponent.html":{}}}],["process.env.admin_password",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":682,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow",{"_index":672,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":680,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1204,"title":{},"body":{"index.html":{}}}],["production",{"_index":1206,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1223,"title":{},"body":{"index.html":{}}}],["progress",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":1175,"title":{},"body":{"index.html":{}}}],["promise",{"_index":281,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["properly",{"_index":817,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1215,"title":{},"body":{"index.html":{}}}],["provided",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":162,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["public",{"_index":290,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}}}],["pulls",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["purposes",{"_index":1279,"title":{},"body":{"todo.html":{}}}],["put",{"_index":997,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1012,"title":{},"body":{"injectables/TeamService.html":{}}}],["question",{"_index":270,"title":{"classes/Question.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":732,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":452,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":742,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":540,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":668,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":298,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":784,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":785,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":714,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":148,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":456,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":278,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":686,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1250,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":607,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1219,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1373,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1220,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1226,"title":{},"body":{"index.html":{}}}],["recompile",{"_index":1248,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":381,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["refers",{"_index":1281,"title":{},"body":{"todo.html":{}}}],["register",{"_index":874,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":376,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":951,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":375,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":966,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":885,"title":{},"body":{"components/SignupComponent.html":{}}}],["related",{"_index":737,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relating",{"_index":389,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":163,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1192,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1081,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":703,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["reportprogress",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":420,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":394,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":836,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1383,"title":{},"body":{"todo.html":{}}}],["res",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.json('invalid",{"_index":425,"title":{},"body":{"classes/Authorization.html":{}}}],["res.sendfile(clientpath",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.set(403).json('403",{"_index":426,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1063,"title":{},"body":{"components/TimerComponent.html":{}}}],["respective",{"_index":802,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":1053,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["result",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":842,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":843,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":321,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":845,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":846,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieval",{"_index":286,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":312,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":277,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["return",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["rewrite",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{}}}],["right",{"_index":1256,"title":{},"body":{"index.html":{}}}],["root",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["roughly",{"_index":472,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":877,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":455,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":372,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":384,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":373,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":371,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":683,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":733,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":721,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":722,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":735,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":700,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":709,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["run",{"_index":1181,"title":{},"body":{"index.html":{}}}],["running",{"_index":1207,"title":{},"body":{"index.html":{}}}],["runs",{"_index":496,"title":{},"body":{"components/GameComponent.html":{}}}],["rxjs",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":613,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["safari/chrome",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":556,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1015,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":609,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":599,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":815,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1196,"title":{},"body":{"index.html":{}}}],["school",{"_index":626,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":901,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schools",{"_index":978,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":526,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":936,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1239,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1244,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1346,"title":{},"body":{"todo.html":{}}}],["second",{"_index":532,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["seconds",{"_index":453,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":443,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":419,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":615,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1341,"title":{},"body":{"todo.html":{}}}],["see",{"_index":893,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1330,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":744,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1328,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1293,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1187,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":461,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":543,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":545,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":909,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":293,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["setanswers(given",{"_index":779,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setinterval",{"_index":1054,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1066,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpractice",{"_index":998,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":1017,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpracticequestions(given",{"_index":772,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":775,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["setteam",{"_index":999,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":1019,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":513,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{}}}],["shared/question",{"_index":272,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shouldn't",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["show",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1286,"title":{},"body":{"todo.html":{}}}],["shuffle",{"_index":673,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":684,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":687,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["side",{"_index":1354,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":880,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":872,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":379,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":883,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":884,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":150,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signupform",{"_index":886,"title":{},"body":{"components/SignupComponent.html":{}}}],["simple",{"_index":950,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":808,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":958,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":656,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":696,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":702,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["sluggish",{"_index":1421,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1384,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1310,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":965,"title":{},"body":{"components/SignupComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["spell",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["src/.../admin",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":370,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":328,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":633,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":781,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":795,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":796,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":797,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":794,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":799,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":793,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":801,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":809,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":813,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1043,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1056,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1072,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1075,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1071,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1073,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1059,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1062,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1064,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1068,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1069,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1070,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1077,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1058,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1104,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":971,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":976,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":987,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":988,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":990,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":989,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":986,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":985,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":991,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":984,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:13",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:19",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:24",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:29",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:43",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":593,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":429,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":489,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":495,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":510,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":508,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":537,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":517,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":512,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":519,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":520,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":522,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":523,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":529,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":533,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":531,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":458,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":459,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":464,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":465,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":479,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":879,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:17",{"_index":904,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":900,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:24",{"_index":906,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:26",{"_index":907,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:28",{"_index":891,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:37",{"_index":892,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:42",{"_index":895,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:47",{"_index":897,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:57",{"_index":898,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":869,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":873,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":875,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":161,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:16",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:22",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:24",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:27",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:32",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:38",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:50",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:60",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":736,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":740,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":746,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":743,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":992,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1000,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1022,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1021,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":1020,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":1002,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":1018,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":1001,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":1006,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":1011,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":1013,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":1016,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":1005,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1035,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1037,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1038,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1110,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":386,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:25",{"_index":397,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:36",{"_index":413,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":406,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1118,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":263,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":654,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":667,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":666,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":665,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":659,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1127,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":484,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":497,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":478,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["state('correct",{"_index":829,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":831,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":388,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1307,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["still",{"_index":1336,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":1055,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":1065,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":1003,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":305,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":264,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":765,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":764,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":766,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":767,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":771,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":773,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":774,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":776,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":778,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":780,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":769,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":768,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":279,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["storing",{"_index":276,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["string",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["stuff",{"_index":635,"title":{},"body":{"modules/MaterialModule.html":{}}}],["style",{"_index":823,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":899,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":964,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":887,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":857,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1232,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":905,"title":{},"body":{"components/SignupComponent.html":{}}}],["support",{"_index":1258,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["surprising",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1259,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1242,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1367,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1228,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1188,"title":{},"body":{"index.html":{}}}],["table",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":502,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":939,"title":{},"body":{"components/SignupComponent.html":{}}}],["target",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["team",{"_index":444,"title":{"classes/Team.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":923,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":629,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":627,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.service",{"_index":750,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":628,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":928,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":1024,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":888,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":903,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["teams",{"_index":946,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":457,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1283,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1046,"title":{},"body":{"components/TimerComponent.html":{}}}],["term",{"_index":1272,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1210,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1273,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1209,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{}}}],["thing",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1325,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1079,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":945,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":302,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":295,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":299,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.adminservice",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.loginform.value.password).subscribe",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(input.files[0]).subscribe",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":858,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":860,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":573,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":564,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1084,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1092,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":554,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":839,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finishanimation",{"_index":852,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":582,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":310,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":575,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":311,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":580,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":300,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":292,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":297,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gettoken",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1042,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":756,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":758,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.post(uri.admin.login",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1028,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":761,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":760,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1034,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1030,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":753,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":757,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":559,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":586,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1086,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1085,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":547,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":557,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1033,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1026,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":713,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1032,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":574,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":553,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":555,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":856,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":552,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":912,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1089,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":914,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":551,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":878,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.saving",{"_index":618,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":585,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":584,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":711,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.signupform.value.schoolname",{"_index":920,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.value.teamnumber",{"_index":921,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.start",{"_index":1090,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1093,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":854,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":859,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":840,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":847,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1088,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":925,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":577,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":918,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":558,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":546,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":915,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":916,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":548,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":579,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":1027,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":755,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":578,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":922,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":752,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":561,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":919,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":927,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":550,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":625,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":590,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":572,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":591,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":565,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":589,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":576,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":583,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":911,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{}}}],["this['_",{"_index":309,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1311,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1282,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1237,"title":{},"body":{"index.html":{}}}],["time",{"_index":500,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":973,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1047,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1048,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":152,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1388,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":890,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":974,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":91,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token]{@link",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1375,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["took",{"_index":1234,"title":{},"body":{"index.html":{}}}],["total",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1267,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":676,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":824,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tries",{"_index":805,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":825,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":828,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":316,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":731,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":677,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1264,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":476,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":962,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1356,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1355,"title":{},"body":{"todo.html":{}}}],["tz(start",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":588,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":940,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":571,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":960,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1208,"title":{},"body":{"index.html":{},"todo.html":{}}}],["unix",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["until",{"_index":956,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":485,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1014,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["use",{"_index":671,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1306,"title":{},"body":{"todo.html":{}}}],["user",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":524,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":412,"title":{},"body":{"classes/Authorization.html":{}}}],["userroutes",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":391,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1241,"title":{},"body":{"index.html":{}}}],["using",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"index.html":{}}}],["valid",{"_index":408,"title":{},"body":{"classes/Authorization.html":{}}}],["validators",{"_index":910,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.required",{"_index":902,"title":{},"body":{"components/SignupComponent.html":{}}}],["value",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":313,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["var",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1433,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":481,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":414,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":416,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":289,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":1212,"title":{},"body":{"index.html":{},"todo.html":{}}}],["viewchild",{"_index":539,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild(timercomponent",{"_index":536,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{}}}],["virtual",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":331,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1295,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wasn't",{"_index":1404,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1247,"title":{},"body":{"index.html":{}}}],["way",{"_index":1095,"title":{},"body":{"components/TimerComponent.html":{}}}],["ways",{"_index":1324,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1158,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webkit",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1430,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":1240,"title":{},"body":{"index.html":{}}}],["whether",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["width",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1094,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1091,"title":{},"body":{"components/TimerComponent.html":{}}}],["windows",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["wipes",{"_index":619,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":948,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1408,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["wont",{"_index":1417,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["works",{"_index":1368,"title":{},"body":{"todo.html":{}}}],["worse",{"_index":1080,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1326,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":506,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":980,"title":{},"body":{"classes/Team.html":{}}}],["yyyy",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consoleOutput\n                            \n                            \n                                loginForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:43\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:29\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    password: new FormControl('')\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:24\n                            \n                        \n\n                \n                    \n                        The login form containing the password \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:19\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService) { }\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** The login form containing the password */\n  loginForm = new FormGroup({\n    password: new FormControl('')\n  });\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.loginForm.value.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Upload the questions to the server */\n  // todo rewrite as template reference variable as better practice\n  //  https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable\n  //   if possible (not sure that it is)\n  fileUpload($event): void {\n    const input = $event.target;\n    this.adminService.uploadQuestions(input.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                        {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:16\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:60\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:38\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:27\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:32\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:50\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:24\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsText, URI } from '../constants';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token: string;\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, password, {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.getToken() })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ReactiveFormsModule\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:25\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:36\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          return res.json('invalid token');\n        } else {\n          req.headers.authorization = decoded.type;\n          next();\n        }\n      });\n    } else {\n      res.set(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.set(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'user' || req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.set(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.getToken() };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                signupForm\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:37\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:42\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:47\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:57\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signupForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                        The signup form that contains the school name and team number \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:24\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:26\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** The signup form that contains the school name and team number */\n  signupForm = new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  });\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    this.team.schoolName = this.signupForm.value.schoolName;\n    this.team.teamNumber = this.signupForm.value.teamNumber;\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password -- also need to use https\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo app (animations in particular) is sluggish on safari compared to chrome\ntodo store token so user doesnt have to perfectly spell name again?\ntodo should test build on windows\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbURL   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.ADMIN_PASSWORD || 'password'\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct'\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/canStart'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
