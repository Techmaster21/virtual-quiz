var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.916,1,1.481,2,1.628,3,0.263,4,0.263,5,2.089,6,1.235,7,1.235,8,1.235,9,0.315,10,2.171,11,0.379,12,2.162,13,3.757,14,3.065,15,1.957,16,1.235,17,2.714,18,1.615,19,1.781,20,4.407,21,1.781,22,3.757,23,0.339,24,0.972,25,4.407,26,5.113,27,3.414,28,0.972,29,3.757,30,4.018,31,2.717,32,1.354,33,2.606,34,3.414,35,1.188,36,3.757,37,0.741,38,0.034,39,0.555,40,0.627,41,0.741,42,3.757,43,2.606,44,4.018,45,1.248,46,1.257,47,1.884,48,0.951,49,1.474,50,2.606,51,2.409,52,1.999,53,3.757,54,3.757,55,4.407,56,2.171,57,3.757,58,2.409,59,1.368,60,2.606,61,3.13,62,3.13,63,5.113,64,3.13,65,1.044,66,1.129,67,0.949,68,3.092,69,3.13,70,2.606,71,3.757,72,2.606,73,2.606,74,1.957,75,1.957,76,2.089,77,3.13,78,3.757,79,1.06,80,2.162,81,0.641,82,1.67,83,2.171,84,0.564,85,2.606,86,2.606,87,2.606,88,0.3,89,0.1,90,1.884,91,1.129,92,0.949,93,0.617,94,2.606,95,2.606,96,1.628,97,2.295,98,2.606,99,1.957,100,1.67,101,1.884,102,2.171,103,2.606,104,2.717,105,1.491,106,1.884,107,1.034,108,2.606,109,2.606,110,2.717,111,2.171,112,2.171,113,0.735,114,2.606,115,2.606,116,2.409,117,3.757,118,3.757,119,2.717,120,3.757,121,3.13,122,3.757,123,2.717,124,2.606,125,2.606,126,3.13,127,2.606,128,1.67,129,2.606,130,2.606,131,2.409,132,2.606,133,2.171,134,2.606,135,3.757,136,5.327,137,4.407,138,2.606,139,2.606,140,2.606,141,2.606,142,2.606,143,2.171,144,1.034,145,1.781,146,1.235,147,2.287,148,1.235,149,1.235,150,0.871,151,1.235,152,0.8,153,1.235,154,0.8,155,0.735,156,1.235,157,0.871,158,1.235,159,0.8,160,1.235,161,0.871,162,1.129,163,1.235,164,1.235,165,0.013,166,0.019,167,0.013]],["title/injectables/AdminService.html",[34,2.023,168,1.149]],["body/injectables/AdminService.html",[3,0.268,4,0.268,9,0.374,11,0.387,12,2.193,14,2.793,15,1.985,23,0.345,24,0.986,27,3.12,28,0.986,32,1.369,34,2.443,35,1.245,37,1.016,38,0.034,39,0.593,40,0.67,41,1.016,44,3.712,45,1.333,46,1.275,47,3.222,48,1.058,49,0.889,52,1.772,59,1.388,65,1.308,66,1.651,67,1.876,69,2.215,74,1.985,79,1.622,80,2.193,81,0.75,84,0.575,88,0.306,89,0.071,92,0.968,93,1.383,96,2.492,113,1.257,123,2.756,133,2.215,165,0.014,166,0.02,167,0.014,168,1.388,169,1.53,170,2.215,171,2.443,172,3.812,173,3.812,174,5.153,175,3.812,176,4.055,177,4.868,178,3.812,179,3.812,180,1.704,181,3.12,182,2.658,183,1.807,184,3.812,185,4.868,186,2.658,187,3.812,188,3.812,189,2.756,190,2.756,191,3.175,192,3.812,193,2.658,194,1.985,195,2.658,196,1.628,197,3.812,198,1.53,199,3.812,200,2.658,201,3.812,202,2.443,203,3.812,204,2.113,205,3.812,206,2.658,207,1.807,208,3.812,209,3.812,210,2.658,211,3.812,212,2.658,213,3.175,214,2.756,215,2.658,216,2.658,217,2.756,218,2.658,219,1.53,220,1.385,221,1.704,222,2.658,223,1.704,224,1.385,225,2.756,226,1.385,227,1.26,228,1.53,229,1.385,230,3.812,231,3.812,232,3.812,233,1.651,234,2.658,235,2.658,236,2.215,237,2.658,238,2.443,239,3.812,240,2.658,241,1.922,242,1.275,243,1.26,244,2.658,245,1.922,246,2.658,247,2.658,248,2.658,249,2.658,250,2.658,251,2.658,252,2.658,253,3.222,254,2.658,255,2.658,256,4.868,257,2.658,258,2.658,259,2.658,260,2.215,261,3.812,262,2.658,263,2.658,264,2.658,265,3.812,266,2.658,267,2.658,268,2.658]],["title/interfaces/Answer.html",[269,1.367,270,0.97]],["body/interfaces/Answer.html",[3,0.321,4,0.321,9,0.196,11,0.462,23,0.413,24,1.117,38,0.034,39,0.606,40,0.413,45,1.528,46,1.063,48,0.627,59,1.157,65,1.344,67,1.157,79,1.552,81,0.628,88,0.366,89,0.115,91,1.87,93,1.303,97,1.655,105,1.261,107,1.946,113,1.218,165,0.022,166,0.022,167,0.016,194,1.655,196,1.063,207,1.506,269,2.383,270,1.783,271,2.298,272,1.829,273,2.037,274,3.546,275,1.64,276,3.527,277,1.786,278,3.143,279,1.423,280,2.279,281,1.506,282,2.484,283,2.298,284,2.037,285,2.298,286,2.298,287,1.655,288,3.143,289,2.298,290,4.419,291,2.279,292,2.298,293,2.298,294,3.122,295,2.298,296,1.829,297,2.037,298,1.829,299,3.023,300,2.298,301,2.298,302,3.265,303,2.298,304,2.298,305,2.279,306,2.298,307,2.298,308,2.298,309,2.298,310,2.298,311,2.298,312,2.484,313,2.037,314,1.377,315,2.298,316,2.298,317,2.298,318,3.546,319,2.298,320,2.298,321,1.655,322,2.298,323,1.829,324,2.298,325,2.298,326,2.298,327,2.298,328,2.298,329,2.298,330,2.298,331,2.298,332,2.298,333,1.829,334,2.298,335,1.829,336,2.298]],["title/components/AppComponent.html",[0,0.565,150,1.056]],["body/components/AppComponent.html",[0,1.071,1,1.271,2,2.22,3,0.417,4,0.417,5,1.962,6,1.962,7,1.962,8,1.962,9,0.255,11,0.602,16,1.962,17,2.984,18,1.796,19,2.43,21,2.43,38,0.033,39,0.59,76,2.22,81,0.602,84,0.896,88,0.476,89,0.11,144,1.642,145,2.43,146,1.962,147,2.759,148,1.962,149,1.962,150,1.946,151,1.962,152,1.271,153,1.962,154,1.271,155,1.167,156,1.962,157,1.384,158,1.962,159,1.271,160,1.962,161,1.384,162,1.793,163,1.962,164,1.962,165,0.021,166,0.026,167,0.021,229,3.032,337,3.448,338,5.569,339,5.126,340,4.27]],["title/modules/AppModule.html",[341,1.644,342,2.023]],["body/modules/AppModule.html",[1,1.794,3,0.355,4,0.355,9,0.217,18,0.992,38,0.034,81,0.92,84,0.761,88,0.405,89,0.093,144,1.395,150,2.092,152,1.794,154,1.794,157,1.954,159,1.794,161,1.954,165,0.018,166,0.024,167,0.018,219,2.023,341,1.831,342,4.151,343,1.523,344,2.254,345,4.298,346,4.298,347,2.929,348,2.254,349,2.929,350,2.929,351,2.929,352,2.929,353,3.362,354,3.362,355,3.848,356,2.023,357,2.023,358,3.516,359,3.341,360,4.62,361,3.848,362,2.254,363,3.341,364,4.62,365,4.62,366,2.929,367,4.62,368,3.516,369,3.516,370,2.929,371,3.516,372,2.929,373,2.929,374,2.254,375,2.929,376,3.516,377,2.929,378,3.516,379,2.929]],["title/modules/AppRoutingModule.html",[341,1.644,353,1.816]],["body/modules/AppRoutingModule.html",[0,1.038,1,1.564,3,0.413,4,0.413,9,0.252,14,2.132,38,0.034,81,0.897,84,0.886,88,0.471,89,0.109,113,1.154,152,1.564,154,1.564,155,1.154,159,1.564,165,0.021,166,0.026,167,0.021,343,1.773,348,2.624,353,2.93,359,2.96,363,3.681,370,3.41,372,3.41,373,3.41,374,2.624,375,3.41,379,3.41,380,4.093,381,4.093,382,5.091,383,2.886,384,2.355,385,3.552,386,4.093,387,5.064,388,4.241,389,4.616,390,3.41,391,5.091,392,5.091,393,5.091,394,4.093]],["title/classes/Authorization.html",[89,0.084,243,1.497]],["body/classes/Authorization.html",[3,0.308,4,0.308,9,0.334,11,0.444,14,2.693,23,0.396,28,1.337,35,1.039,37,0.946,38,0.034,39,0.552,40,0.672,41,0.946,48,0.946,49,1.605,52,1.748,58,3.888,65,0.722,75,2.919,79,1.353,80,2.975,81,0.698,88,0.351,89,0.081,93,0.722,96,2.487,97,2.186,113,0.86,116,3.888,165,0.016,166,0.022,167,0.016,191,5.004,227,1.445,243,1.989,245,3.47,299,2.186,305,1.818,395,1.588,396,2.539,397,1.989,398,4.196,399,4.196,400,3.739,401,4.196,402,4.196,403,6.007,404,4.423,405,6.007,406,3.048,407,4.668,408,3.739,409,5.17,410,4.196,411,2.975,412,3.314,413,4.307,414,4.196,415,3.048,416,2.69,417,4.196,418,3.496,419,4.799,420,2.415,421,4.196,422,3.048,423,3.048,424,3.048,425,4.196,426,2.539,427,2.204,428,3.035,429,5.422,430,3.048,431,2.539,432,1.954,433,4.196,434,3.048,435,4.799,436,4.799,437,4.196]],["title/components/GameComponent.html",[0,0.565,152,0.97]],["body/components/GameComponent.html",[0,0.734,1,0.491,2,1.119,3,0.161,4,0.161,5,0.758,6,0.758,7,0.758,8,0.758,9,0.099,11,0.376,12,2.149,16,0.758,17,2.352,18,1.399,19,1.225,21,1.225,23,0.57,24,0.668,28,0.668,32,0.999,35,1.285,37,0.51,38,0.034,39,0.43,40,0.645,41,0.51,45,1.374,48,1.005,49,1.659,51,2.811,52,1.749,56,1.332,58,1.656,59,1.807,65,0.77,66,1.9,67,1.597,75,1.346,76,1.119,79,1.355,81,0.699,82,2.084,83,1.332,84,0.346,88,0.184,89,0.042,91,1.119,92,0.582,93,0.612,100,1.656,104,1.868,105,1.025,144,0.634,145,1.225,146,0.758,147,1.77,148,0.758,149,0.758,150,0.535,151,0.758,152,1.147,153,0.758,154,0.491,155,1.564,156,0.758,157,0.535,158,0.758,159,0.491,160,0.758,161,1.249,162,2.301,163,0.758,164,0.758,165,0.021,166,0.013,167,0.008,190,1.868,196,1.606,207,1.225,227,1.541,233,2.149,270,1.147,275,0.864,277,1.184,279,1.49,281,0.758,284,1.656,312,1.487,314,1.119,321,1.346,356,0.92,377,1.332,384,0.92,390,3.653,397,1.77,404,2.7,411,1.487,412,1.656,420,1.487,432,2.811,438,1.332,439,2.152,440,2.583,441,1.487,442,3.251,443,3.251,444,2.583,445,3.251,446,4.385,447,2.351,448,2.351,449,2.656,450,2.709,451,3.251,452,1.906,453,2.7,454,3.734,455,3.734,456,2.7,457,2.583,458,3.734,459,4.099,460,3.734,461,3.337,462,1.332,463,2.523,464,2.656,465,1.999,466,2.583,467,1.598,468,1.487,469,2.152,470,2.583,471,1.656,472,1.598,473,1.598,474,3.734,475,1.868,476,2.152,477,2.583,478,2.152,479,2.583,480,2.152,481,2.583,482,3.734,483,2.394,484,2.583,485,1.598,486,2.152,487,1.598,488,2.583,489,2.152,490,2.583,491,1.868,492,1.225,493,1.656,494,2.583,495,1.598,496,3.111,497,1.598,498,3.51,499,2.583,500,2.583,501,2.394,502,1.656,503,1.598,504,2.583,505,1.656,506,1.868,507,2.583,508,1.618,509,1.487,510,2.583,511,2.152,512,2.152,513,2.152,514,2.583,515,2.7,516,1.598,517,2.152,518,1.598,519,1.9,520,1.598,521,3.415,522,2.583,523,2.152,524,2.583,525,1.598,526,1.656,527,1.598,528,1.598,529,3.588,530,1.598,531,1.598,532,2.152,533,3.111,534,2.583,535,2.583,536,2.152,537,1.598,538,2.152,539,1.598,540,2.152,541,1.598,542,1.656,543,2.583,544,1.598,545,2.583,546,2.7,547,1.868,548,1.868,549,1.332,550,1.025,551,1.025,552,3.734,553,3.251,554,1.332,555,2.152,556,1.332,557,1.598,558,1.598,559,1.598,560,2.583,561,3.251,562,1.025,563,2.583,564,3.251,565,3.415,566,1.656,567,1.156,568,2.583,569,2.084,570,3.251,571,3.734,572,1.332,573,1.598,574,1.598,575,1.025,576,1.332,577,1.598,578,1.598,579,2.583,580,3.251,581,1.598,582,1.598,583,1.025,584,1.156,585,2.152,586,1.598,587,1.156,588,3.111,589,3.251,590,4.385,591,1.598,592,3.251,593,1.598,594,1.025,595,1.598,596,1.332,597,1.598,598,1.156]],["title/components/GameOverComponent.html",[0,0.565,154,0.97]],["body/components/GameOverComponent.html",[0,0.937,1,0.851,2,1.7,3,0.279,4,0.279,5,1.313,6,1.313,7,1.313,8,1.313,9,0.171,11,0.403,12,2.259,16,1.313,17,2.754,18,1.638,19,1.861,21,1.861,23,0.36,24,1.015,28,1.015,32,1.4,35,1.133,37,0.546,38,0.034,39,0.602,40,0.592,41,0.546,46,1.313,48,0.774,49,0.926,52,1.66,59,1.009,65,0.656,76,1.7,81,0.663,82,2.922,84,0.6,88,0.319,89,0.074,92,1.009,93,0.656,113,1.399,144,1.099,145,1.861,146,1.313,147,2.351,148,1.313,149,1.313,150,0.926,151,1.313,152,0.851,153,1.313,154,1.523,155,1.696,156,1.313,157,0.926,158,1.313,159,0.851,160,1.313,161,0.926,162,1.2,163,1.313,164,1.313,165,0.014,166,0.02,167,0.028,189,2.838,196,1.313,198,2.259,233,1.2,275,1.313,357,1.594,362,2.516,374,3.485,397,1.861,420,2.259,441,2.259,449,2.259,452,2.407,456,3.586,465,2.422,471,3.179,508,2.148,519,1.7,542,2.516,550,1.776,551,1.776,554,2.308,567,2.003,575,3.179,583,1.776,584,2.003,585,2.308,598,2.838,599,4.529,600,2.308,601,3.925,602,3.925,603,4.559,604,3.925,605,5.59,606,5.436,607,2.308,608,3.925,609,2.77,610,3.925,611,2.838,612,3.925,613,3.925,614,2.77,615,3.925,616,3.925,617,2.516,618,2.77,619,5.809,620,4.559,621,4.559,622,4.559,623,3.925,624,3.925,625,2.77,626,2.77,627,2.308,628,2.308,629,2.308,630,2.77,631,2.77,632,2.838,633,3.925,634,3.925,635,3.925,636,3.925,637,3.925,638,3.925]],["title/modules/MaterialModule.html",[341,1.644,354,1.816]],["body/modules/MaterialModule.html",[3,0.428,4,0.428,9,0.261,11,0.617,38,0.034,64,4.335,81,0.92,84,0.918,88,0.488,89,0.113,113,1.196,165,0.022,166,0.027,167,0.022,341,2.71,343,2.61,348,2.718,354,2.994,359,3.066,363,3.763,639,3.066,640,4.69,641,4.335,642,4.24,643,4.335,644,4.24,645,4.335,646,4.24,647,4.335,648,4.24,649,4.335,650,4.24,651,4.335,652,4.24,653,4.335,654,4.24,655,3.532,656,4.335,657,4.24,658,3.066]],["title/interfaces/PracticeQuestion.html",[269,1.367,282,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.32,4,0.32,9,0.195,11,0.461,23,0.412,24,1.115,38,0.034,39,0.605,40,0.412,45,1.527,46,1.06,48,0.625,59,1.154,65,1.343,67,1.154,79,1.55,81,0.627,88,0.365,89,0.115,91,1.867,93,1.302,97,1.65,105,1.257,107,1.943,113,1.215,165,0.022,166,0.022,167,0.016,194,1.65,196,1.06,207,1.502,269,2.381,270,1.688,271,2.291,272,1.823,273,2.031,274,3.541,275,1.638,276,3.523,277,1.783,278,3.139,279,1.467,280,2.276,281,1.502,282,3.024,283,3.116,284,2.031,285,2.291,286,2.291,287,1.65,288,3.139,289,2.291,290,4.417,291,2.276,292,2.291,293,2.291,294,3.116,295,2.291,296,1.823,297,2.031,298,1.823,299,3.021,300,2.291,301,2.291,302,3.263,303,2.291,304,2.291,305,2.276,306,2.291,307,2.291,308,2.291,309,2.291,310,2.291,311,2.291,312,2.48,313,2.031,314,1.373,315,2.291,316,2.291,317,2.291,318,3.541,319,2.291,320,2.291,321,1.65,322,2.291,323,1.823,324,2.291,325,2.291,326,2.291,327,2.291,328,2.291,329,2.291,330,2.291,331,2.291,332,2.291,333,1.823,334,2.291,335,1.823,336,2.291]],["title/classes/Question.html",[89,0.084,279,0.817]],["body/classes/Question.html",[3,0.402,4,0.402,9,0.246,11,0.728,23,0.518,24,1.295,32,1.538,35,1.243,37,0.786,38,0.033,39,0.459,40,0.746,41,0.786,65,1.508,88,0.459,89,0.106,165,0.021,166,0.026,167,0.021,279,1.68,291,2.709,299,3.257,395,2.075,587,3.958,659,3.319,660,2.881,661,3.319,662,5.209,663,3.984,664,3.984,665,5.006,666,5.474,667,5.474,668,5.474,669,4.56,670,3.984,671,3.984,672,3.984]],["title/classes/QuestionPreparer.html",[89,0.084,673,2.283]],["body/classes/QuestionPreparer.html",[3,0.31,4,0.31,9,0.19,11,0.448,18,1.191,23,0.4,28,1.343,35,1.044,37,0.951,38,0.034,39,0.555,40,0.627,41,0.951,45,1.489,48,0.607,49,1.029,58,3.813,65,1.363,79,1.585,81,0.615,88,0.354,89,0.128,91,2.435,93,1.001,99,1.603,113,1.697,119,3.488,165,0.016,166,0.022,167,0.016,233,1.333,242,1.029,270,1.595,272,2.987,275,1.029,276,2.708,277,1.121,279,1.454,281,1.459,291,2.249,305,2.435,312,2.987,395,1.603,397,2.003,439,3.519,529,3.055,566,2.708,569,1.973,673,3.055,674,2.564,675,5.191,676,2.708,677,4.224,678,4.224,679,4.224,680,3.077,681,4.224,682,5.191,683,3.519,684,3.519,685,3.519,686,4.224,687,3.077,688,4.224,689,4.823,690,4.224,691,3.077,692,4.224,693,4.224,694,4.532,695,3.077,696,3.519,697,1.973,698,3.055,699,3.077,700,3.077,701,3.077,702,3.077,703,3.077,704,3.077,705,3.077,706,3.077,707,3.077,708,3.077,709,2.564,710,3.077,711,3.519,712,3.077,713,3.077,714,3.077,715,4.224,716,3.077,717,4.224,718,3.077,719,3.077,720,3.077,721,3.077,722,3.077,723,3.077,724,3.077,725,4.224,726,4.224,727,3.077,728,3.077,729,3.077,730,3.077,731,3.077,732,1.973,733,2.225,734,2.564,735,2.564,736,2.225,737,2.564,738,3.077,739,3.077,740,3.077,741,3.077]],["title/injectables/QuestionService.html",[168,1.149,464,1.816]],["body/injectables/QuestionService.html",[3,0.331,4,0.331,9,0.202,11,0.477,15,2.297,23,0.426,24,1.141,28,1.141,32,1.531,35,1.154,37,0.87,38,0.034,39,0.508,40,0.723,41,0.87,45,1.141,46,1.475,48,0.87,74,2.297,79,0.925,81,0.852,84,0.71,88,0.377,89,0.132,92,1.194,93,1.262,96,1.911,113,1.244,165,0.017,166,0.023,167,0.017,168,1.606,169,1.887,171,2.827,180,2.102,181,3.416,183,2.091,196,1.475,204,2.637,214,2.372,217,2.372,219,1.887,220,1.708,221,2.102,223,2.102,224,1.708,226,1.708,227,1.555,228,1.887,229,1.708,238,3.416,241,3.854,242,1.097,243,2.363,270,1.355,277,1.606,279,1.439,281,1.555,321,2.297,416,2.827,453,3.854,464,2.538,465,2.535,509,2.538,519,2.481,660,3.19,685,3.675,742,2.732,743,2.827,744,4.984,745,4.411,746,4.411,747,4.411,748,5.33,749,3.28,750,4.411,751,3.675,752,3.28,753,3.28,754,3.675,755,4.411,756,3.28,757,2.732,758,3.28,759,3.28,760,3.28,761,4.411,762,3.28,763,5.33,764,3.28,765,4.152,766,3.28,767,3.28]],["title/classes/QuestionStore.html",[89,0.084,287,1.644]],["body/classes/QuestionStore.html",[3,0.258,4,0.258,9,0.157,11,0.372,23,0.332,24,0.958,28,0.958,31,2.679,35,1.283,37,1.001,38,0.034,39,0.675,40,0.659,41,1.001,45,1.589,46,0.855,48,1.076,49,1.457,59,1.349,65,1.324,66,1.107,67,1.587,79,1.712,81,0.539,88,0.294,89,0.116,91,2.07,93,1.202,97,1.331,105,1.47,107,2.1,113,1.045,165,0.019,166,0.019,167,0.013,194,1.93,196,1.239,207,1.756,269,2.07,270,1.468,272,3.441,273,1.638,274,2.679,275,1.239,276,2.375,277,1.349,278,2.375,279,1.236,280,2.364,281,1.212,282,2.132,283,1.848,284,2.375,285,2.679,286,2.679,287,1.93,288,3.392,289,3.151,290,4.417,291,2.468,292,3.151,293,3.151,294,3.669,295,2.679,296,2.132,297,2.375,298,2.132,299,2.968,300,3.151,301,1.848,302,3.279,303,1.848,304,1.848,305,2.422,306,1.848,307,1.848,308,1.848,309,1.848,310,1.848,311,1.848,312,2.75,313,2.375,314,1.605,315,2.679,316,2.679,317,2.679,318,3.151,319,1.848,320,1.848,321,1.93,322,2.679,323,2.508,324,2.679,325,1.848,326,1.848,327,1.848,328,1.848,329,1.848,330,1.848,331,1.848,332,1.848,333,1.471,334,1.848,335,1.471,336,1.848,395,1.331,453,1.848,768,3.705,769,3.705,770,2.555,771,2.555,772,2.555,773,2.555,774,2.555,775,2.555,776,2.555,777,2.555,778,2.555,779,2.555,780,2.555,781,2.555,782,2.555,783,2.555,784,2.555,785,2.555,786,2.555]],["title/components/QuestionsComponent.html",[0,0.565,157,1.056]],["body/components/QuestionsComponent.html",[0,0.944,1,0.704,2,1.481,3,0.231,4,0.231,5,1.087,6,1.087,7,1.087,8,1.087,9,0.141,11,0.334,16,1.087,17,2.626,18,1.562,19,1.621,21,1.621,23,0.661,24,0.885,28,0.885,32,1.257,35,1.221,37,0.807,38,0.034,39,0.558,40,0.685,41,0.807,45,1.316,47,3.28,48,0.807,49,1.368,51,2.907,65,0.81,68,2.192,75,2.362,76,1.481,81,0.741,84,0.496,88,0.264,89,0.061,92,0.835,93,0.543,99,1.194,100,3.11,101,3.919,110,3.509,113,0.646,126,1.909,131,1.469,144,0.91,145,1.621,146,1.087,147,2.15,148,1.087,149,1.087,150,0.766,151,1.087,152,0.704,153,1.087,154,0.704,155,0.646,156,1.087,157,1.517,158,1.087,159,0.704,160,1.087,161,0.766,162,0.993,163,1.087,164,1.087,165,0.023,166,0.018,167,0.012,196,1.517,198,1.968,207,1.621,220,1.194,227,1.087,233,0.993,242,1.144,270,1.8,277,1.767,279,1.433,281,1.087,291,2.102,397,1.621,441,1.968,447,3.813,448,3.509,449,1.968,450,4.042,464,2.929,468,1.319,483,2.192,496,3.779,498,2.907,502,1.469,519,2.102,532,2.849,536,2.849,538,2.849,549,1.909,565,2.849,588,1.909,662,2.849,694,2.849,711,1.909,751,1.909,787,1.909,788,4.091,789,4.091,790,4.091,791,3.42,792,4.536,793,3.42,794,2.849,795,3.42,796,2.849,797,4.091,798,2.292,799,3.42,800,2.292,801,2.292,802,2.292,803,2.292,804,3.408,805,2.292,806,3.42,807,2.292,808,3.42,809,3.42,810,1.968,811,3.42,812,3.42,813,3.42,814,4.536,815,2.292,816,2.849,817,4.091,818,3.42,819,2.292,820,2.849,821,3.42,822,3.42,823,3.42,824,3.42,825,2.192,826,2.958,827,2.473,828,2.473,829,3.408,830,4.091,831,2.292,832,1.909,833,2.292,834,2.292,835,2.292,836,3.42,837,2.292,838,3.42,839,3.42,840,2.292,841,2.292,842,1.319,843,2.292,844,2.292,845,2.292,846,2.292,847,2.292,848,2.292,849,2.292,850,2.292,851,2.292,852,2.292,853,3.42,854,2.292,855,2.292,856,2.292,857,2.292,858,2.292,859,2.292,860,2.292,861,2.292,862,2.292,863,2.292,864,2.292,865,3.42,866,2.292,867,3.42,868,3.42,869,2.292,870,2.292,871,1.909,872,2.292]],["title/guards/RegisterGuard.html",[385,2.023,873,2.023]],["body/guards/RegisterGuard.html",[3,0.4,4,0.4,9,0.244,11,0.577,23,0.515,28,1.291,32,1.677,35,1.08,37,0.782,38,0.034,39,0.456,40,0.515,41,0.782,48,0.782,52,2.087,59,1.443,79,1.118,81,0.795,84,0.858,88,0.456,89,0.105,92,1.443,93,1.182,155,1.616,165,0.02,166,0.026,167,0.02,168,1.817,196,1.668,198,2.871,228,2.28,229,2.064,233,1.717,384,2.28,385,3.198,388,5.024,411,2.871,412,3.198,441,2.28,463,3.522,465,2.612,471,3.198,493,3.198,551,2.54,572,4.156,584,2.866,594,2.54,607,3.301,873,3.198,874,3.301,875,3.301,876,4.989,877,4.989,878,4.989,879,3.963,880,4.156,881,3.963,882,4.989,883,4.156,884,3.963]],["title/components/SignupComponent.html",[0,0.565,159,0.97]],["body/components/SignupComponent.html",[0,0.816,1,0.611,2,1.329,3,0.201,4,0.201,5,0.942,6,0.942,7,0.942,8,0.942,9,0.122,11,0.289,12,1.766,16,0.942,17,2.523,18,1.501,19,1.455,21,1.455,23,0.258,24,0.794,28,0.794,30,3.512,32,1.152,35,1.152,37,0.392,38,0.034,39,0.578,40,0.399,41,0.392,45,1.091,48,0.832,49,1.41,51,3.087,52,1.535,59,1.828,66,1.826,67,1.535,76,1.329,79,0.866,81,0.663,82,2.403,84,0.43,88,0.229,89,0.053,92,0.724,107,2.058,121,2.557,128,1.967,143,3.512,144,0.789,145,1.455,146,0.942,147,1.999,148,0.942,149,0.942,150,0.665,151,0.942,152,0.611,153,0.942,154,0.611,155,1.56,156,0.942,157,0.665,158,0.942,159,1.295,160,0.942,161,0.665,162,0.861,163,0.942,164,0.942,165,0.01,166,0.016,167,0.01,189,2.219,196,1.734,233,1.329,242,1.026,260,2.557,270,0.943,275,1.026,277,1.118,279,0.794,302,2.771,305,1.329,384,1.144,389,4.678,397,1.455,400,3.049,404,2.219,412,2.703,416,1.967,420,1.766,432,2.703,441,1.766,449,2.771,452,2.43,456,3.049,461,3.93,462,1.656,463,2.771,465,2.175,471,1.967,475,2.219,480,2.557,483,1.967,492,1.999,493,1.967,501,1.967,502,2.703,506,2.219,508,2.246,509,1.766,515,3.75,519,1.826,533,2.557,540,3.512,542,1.967,550,1.274,551,1.274,556,2.557,566,2.703,567,1.437,569,1.967,575,2.703,576,2.557,583,1.967,594,1.967,628,2.557,632,3.295,683,3.512,732,1.967,733,2.219,794,3.512,810,2.426,825,2.703,880,2.557,885,1.656,886,2.219,887,3.069,888,3.93,889,3.749,890,3.069,891,3.749,892,4.557,893,3.749,894,4.216,895,3.218,896,3.069,897,1.988,898,2.557,899,3.069,900,1.988,901,4.216,902,1.988,903,1.988,904,3.069,905,1.988,906,3.069,907,1.988,908,1.988,909,3.512,910,1.988,911,1.988,912,1.988,913,1.988,914,3.069,915,1.988,916,1.988,917,1.988,918,1.988,919,1.988,920,1.988,921,1.656,922,1.988,923,3.749,924,3.069,925,1.988,926,1.988,927,4.816,928,3.069,929,3.069,930,4.216,931,1.988,932,4.216,933,3.069,934,3.069,935,2.557,936,2.557,937,3.069,938,3.069,939,2.219,940,4.216,941,3.049,942,2.557,943,4.216,944,3.483,945,3.069,946,3.069,947,2.557,948,2.557,949,4.216,950,3.069,951,1.656,952,2.219,953,2.557,954,2.557,955,3.049,956,3.069,957,4.816,958,3.069,959,3.069,960,2.557,961,2.557,962,3.069,963,3.069,964,3.069,965,2.557,966,3.069,967,1.988,968,1.988]],["title/classes/Team.html",[89,0.084,452,1.253]],["body/classes/Team.html",[3,0.299,4,0.299,9,0.183,11,0.599,23,0.385,24,1.065,32,1.264,35,1.277,37,0.584,38,0.033,39,0.588,40,0.767,41,1.209,65,1.442,75,1.544,88,0.341,89,0.079,96,2.555,155,1.567,165,0.015,166,0.021,167,0.021,243,2.242,253,3.419,275,1.376,279,1.223,280,2.048,299,3.33,305,2.048,314,1.284,395,1.544,447,4.017,448,3.419,449,3.395,452,2.56,508,2.406,519,2.78,526,3.031,587,4.201,632,4.017,944,3.419,961,3.939,969,2.469,970,4.628,971,5.367,972,5.555,973,5.555,974,5.555,975,2.964,976,2.964,977,4.116,978,4.728,979,4.728,980,5.555,981,4.728,982,4.728,983,3.939,984,2.964,985,2.964,986,2.964,987,2.964,988,2.964,989,2.964,990,2.964,991,2.964]],["title/injectables/TeamService.html",[168,1.149,465,1.367]],["body/injectables/TeamService.html",[3,0.247,4,0.247,9,0.151,11,0.356,15,1.871,23,0.318,24,0.929,28,0.929,32,1.307,35,1.272,37,1.062,38,0.034,39,0.62,40,0.733,41,1.062,46,1.916,48,1.146,49,1.201,52,1.308,65,1.11,67,1.898,74,1.871,79,1.657,81,0.759,84,0.53,88,0.282,89,0.113,90,2.598,92,0.892,93,1.357,96,2.334,105,1.859,107,2.305,113,0.691,155,1.013,165,0.013,166,0.018,167,0.013,168,1.308,169,1.41,171,2.303,176,3.903,180,1.57,181,3.003,183,1.703,194,2.715,196,1.201,198,3.1,204,2.673,207,2.221,219,1.41,220,1.276,221,1.57,223,1.57,224,1.276,226,1.276,227,1.161,228,1.41,229,1.276,238,2.727,242,1.567,243,1.703,275,1.201,321,1.871,397,1.703,420,2.067,452,2.588,465,1.556,475,2.598,526,2.303,542,2.303,550,1.57,562,3.003,583,2.303,617,2.303,743,2.303,842,3,921,2.041,970,2.993,992,2.041,993,4.685,994,4.685,995,3.592,996,2.993,997,2.993,998,3.592,999,3.592,1000,2.45,1001,2.45,1002,2.45,1003,3.592,1004,3.592,1005,2.45,1006,2.45,1007,3.592,1008,2.993,1009,3.592,1010,3.592,1011,2.45,1012,3.592,1013,2.45,1014,2.993,1015,3.592,1016,2.45,1017,3.592,1018,2.45,1019,3.592,1020,2.45,1021,2.45,1022,2.45,1023,1.771,1024,3.592,1025,3.592,1026,4.253,1027,2.45,1028,2.45,1029,4.253,1030,2.45,1031,2.45,1032,2.45,1033,2.45,1034,2.45]],["title/injectables/TimeService.html",[168,1.149,895,2.023]],["body/injectables/TimeService.html",[3,0.406,4,0.406,9,0.248,11,0.586,15,2.625,23,0.523,28,1.304,32,1.69,35,1.091,37,0.794,38,0.034,39,0.463,40,0.523,41,0.794,45,1.304,48,0.794,74,2.625,81,0.864,84,0.872,88,0.463,89,0.107,92,1.466,93,0.954,107,2,155,1.421,165,0.021,166,0.026,167,0.021,168,1.835,169,2.317,171,3.23,180,2.581,181,3.695,183,2.389,202,3.23,204,2.608,219,2.317,220,2.097,221,2.581,223,2.581,224,2.097,226,2.097,227,1.909,228,2.317,229,2.097,238,2.581,357,2.9,492,2.389,508,2.497,743,3.23,895,3.23,955,3.644,1035,3.355,1036,5.764,1037,4.027,1038,4.027,1039,4.198,1040,5.04,1041,5.04,1042,4.027]],["title/components/TimerComponent.html",[0,0.565,161,1.056]],["body/components/TimerComponent.html",[0,0.759,1,0.748,2,1.549,3,0.246,4,0.246,5,1.154,6,1.154,7,1.154,8,1.154,9,0.15,11,0.354,16,1.154,17,2.668,18,1.587,19,1.695,21,1.695,23,0.316,24,0.925,28,0.925,31,2.585,35,1.283,37,0.48,38,0.034,39,0.488,40,0.676,41,0.48,48,1.128,49,1.913,65,0.847,66,1.054,67,0.886,68,2.292,76,1.549,79,1.587,81,0.354,84,0.527,88,0.28,89,0.065,93,0.847,99,1.268,105,1.419,131,1.56,144,0.966,145,1.695,146,1.154,147,2.214,148,1.154,149,1.154,150,0.814,151,1.154,152,0.748,153,1.154,154,0.748,155,0.686,156,1.154,157,0.814,158,1.154,159,0.748,160,1.154,161,1.562,162,2.668,163,1.154,164,1.154,165,0.013,166,0.018,167,0.013,242,0.814,296,1.4,305,2.023,356,2.687,408,4.195,416,2.292,461,4.195,468,1.4,476,3.891,486,3.891,492,2.214,498,2.994,505,3.189,508,2.329,511,2.978,519,2.438,521,2.027,523,3.891,529,2.585,555,3.53,594,2.716,596,3.53,611,3.887,627,2.027,660,2.585,796,2.978,804,3.53,810,1.4,939,2.585,948,2.978,1039,2.027,1043,2.027,1044,3.575,1045,3.575,1046,3.575,1047,4.237,1048,3.575,1049,5.376,1050,4.237,1051,4.67,1052,4.67,1053,3.891,1054,4.975,1055,4.67,1056,2.434,1057,3.575,1058,2.434,1059,2.434,1060,3.575,1061,5.201,1062,2.434,1063,4.67,1064,2.434,1065,4.67,1066,3.575,1067,4.67,1068,2.434,1069,2.434,1070,2.434,1071,2.434,1072,2.434,1073,2.434,1074,3.575,1075,2.434,1076,2.434,1077,2.434,1078,2.027,1079,2.434,1080,2.434,1081,2.434,1082,2.434,1083,1.76,1084,4.67,1085,4.237,1086,4.67,1087,2.434,1088,2.434,1089,2.434,1090,2.434,1091,2.434,1092,2.434,1093,2.434,1094,2.434,1095,2.027,1096,2.434]],["title/coverage.html",[1097,3.581]],["body/coverage.html",[0,1.03,1,0.944,9,0.189,10,2.56,18,0.867,34,1.97,38,0.034,40,0.399,89,0.145,105,2.54,131,4.204,150,1.028,152,0.944,154,0.944,157,1.028,159,0.944,161,1.028,165,0.016,166,0.022,167,0.016,168,1.889,170,2.56,204,2.001,224,1.601,225,2.222,226,1.601,242,1.028,243,1.457,269,1.828,270,0.944,272,2.985,273,3.089,279,0.795,280,1.331,282,1.768,287,2.198,337,2.56,343,1.331,374,1.97,385,1.97,396,2.56,408,3.485,428,2.222,438,2.56,452,1.22,463,2.773,464,1.768,465,1.331,492,1.457,546,2.222,547,2.222,548,2.222,599,2.56,600,2.56,639,2.222,659,2.56,673,2.222,674,2.56,742,2.56,787,2.56,827,2.222,828,2.222,873,1.97,875,2.56,885,2.56,895,1.97,969,2.56,992,2.56,1023,2.222,1035,2.56,1043,2.56,1097,2.56,1098,2.56,1099,3.073,1100,3.073,1101,6.448,1102,3.073,1103,4.22,1104,4.238,1105,4.82,1106,4.22,1107,3.073,1108,3.073,1109,4.22,1110,4.22,1111,2.56,1112,3.516,1113,2.56,1114,2.56,1115,3.052,1116,3.516,1117,2.56,1118,4.22,1119,4.53,1120,2.56,1121,2.56,1122,2.56,1123,4.22,1124,4.015,1125,2.56,1126,2.56,1127,3.516,1128,3.516,1129,2.56,1130,2.56,1131,3.073,1132,3.073]],["title/dependencies.html",[344,2.432,1133,2.2]],["body/dependencies.html",[38,0.034,84,0.941,165,0.022,166,0.027,167,0.022,220,2.264,344,2.786,361,4.401,362,3.386,366,3.621,384,2.501,426,3.621,427,3.143,696,3.621,765,3.621,826,3.82,832,3.621,1134,6.3,1135,4.347,1136,5.283,1137,4.347,1138,4.347,1139,4.347,1140,4.347,1141,3.621,1142,4.347,1143,4.347,1144,3.82,1145,4.347,1146,4.347,1147,4.347,1148,4.401,1149,4.347,1150,4.347,1151,4.347,1152,4.347,1153,4.347,1154,4.347,1155,4.347,1156,4.347,1157,4.347,1158,3.621,1159,4.347,1160,4.347,1161,4.347,1162,4.347]],["title/miscellaneous/functions.html",[1163,1.693,1164,2.743]],["body/miscellaneous/functions.html",[23,0.582,37,1.137,38,0.031,39,0.663,40,0.582,41,1.137,66,1.939,91,1.939,165,0.023,166,0.028,167,0.023,183,2.122,204,2.9,224,2.801,323,3.094,333,3.317,617,2.87,698,3.237,736,3.889,810,2.576,820,3.729,842,2.576,1104,3.237,1127,3.729,1128,4.802,1129,4.48,1130,4.48,1144,3.889,1163,2.87,1164,3.237,1165,5.378,1166,3.729,1167,4.477,1168,4.477,1169,5.378,1170,5.378,1171,4.477,1172,4.477,1173,4.477,1174,3.729]],["title/index.html",[23,0.343,335,1.52,505,1.693]],["body/index.html",[0,0.913,4,0.347,9,0.28,18,1.283,38,0.023,39,0.395,45,1.177,46,1.941,61,3.79,101,2.484,102,2.862,106,2.484,111,2.862,165,0.018,166,0.023,167,0.023,202,2.202,242,1.149,277,1.251,280,2.352,288,2.202,291,1.488,298,1.977,313,2.202,314,2.21,340,2.862,356,1.977,357,1.977,468,1.977,469,2.862,491,2.484,492,2.157,501,3.481,509,1.977,617,2.916,676,3.721,697,2.202,709,3.79,737,2.862,816,2.862,951,2.862,952,2.484,953,2.862,960,2.862,1053,2.862,1083,2.484,1144,2.484,1175,5.101,1176,3.435,1177,3.688,1178,5.101,1179,3.435,1180,3.435,1181,6.27,1182,3.435,1183,2.862,1184,5.921,1185,3.435,1186,3.79,1187,2.862,1188,3.435,1189,3.435,1190,3.435,1191,2.862,1192,3.435,1193,4.706,1194,3.435,1195,2.862,1196,3.435,1197,5.921,1198,4.249,1199,3.435,1200,5.804,1201,3.435,1202,2.862,1203,2.862,1204,3.435,1205,3.435,1206,2.862,1207,4.549,1208,3.79,1209,4.523,1210,2.484,1211,4.549,1212,3.79,1213,3.435,1214,3.435,1215,3.435,1216,3.435,1217,4.249,1218,3.435,1219,2.862,1220,4.549,1221,3.435,1222,2.862,1223,3.435,1224,2.862,1225,2.862,1226,5.101,1227,3.435,1228,4.549,1229,3.435,1230,4.549,1231,2.484,1232,3.435,1233,3.435,1234,3.435,1235,3.435,1236,3.435,1237,3.435,1238,3.435,1239,4.549,1240,4.549,1241,3.435,1242,3.435,1243,3.435,1244,3.435,1245,2.862,1246,4.549,1247,3.435,1248,4.549,1249,3.435,1250,3.435,1251,3.435,1252,3.435,1253,3.435,1254,3.435,1255,3.435,1256,3.79]],["title/modules.html",[343,1.862]],["body/modules.html",[38,0.029,128,3.657,165,0.025,166,0.029,167,0.025,342,3.173,343,2.144,353,2.849,354,2.849,362,3.173,1257,4.951,1258,4.951,1259,6.011,1260,5.706]],["title/overview.html",[1261,3.581]],["body/overview.html",[1,1.726,2,1.83,38,0.033,144,1.676,150,2.075,152,1.726,154,1.726,157,1.879,159,1.726,161,1.879,165,0.022,166,0.027,167,0.022,169,2.431,271,3.054,341,2.2,342,4.197,343,1.83,344,2.708,345,3.519,346,3.519,347,3.519,348,2.708,349,3.519,350,3.519,351,3.519,352,3.519,353,3.234,354,3.234,355,4.325,356,2.431,357,2.431,383,2.2,395,2.2,566,2.708,569,2.708,732,2.708,733,3.054,734,3.519,735,3.519,873,2.708,941,3.054,1261,3.519]],["title/routes.html",[383,2.239]],["body/routes.html",[38,0.03,165,0.026,166,0.03,167,0.026,383,2.655]],["title/todo.html",[99,1.376,335,1.52,505,1.693]],["body/todo.html",[0,0.878,3,0.237,9,0.215,14,2.391,15,1.224,18,0.982,27,1.506,38,0.029,39,0.401,45,1.468,46,1.64,48,0.463,52,1.785,62,1.957,68,1.506,74,1.224,77,1.957,80,1.352,89,0.062,90,3.32,91,1.018,96,1.509,97,1.224,99,3.37,106,1.699,107,1.382,110,1.699,112,3.458,116,1.506,119,1.699,128,1.506,155,1.171,162,1.798,165,0.012,166,0.018,167,0.012,183,1.114,190,1.699,194,1.224,202,2.233,204,1.651,242,1.535,253,1.699,269,1.018,270,0.722,275,0.786,278,1.506,279,1.328,280,1.509,291,1.509,296,1.352,297,1.506,298,2.004,302,1.352,314,1.509,323,1.352,333,2.389,383,1.224,407,2.902,411,2.004,413,1.957,418,1.957,431,1.957,452,1.822,468,2.004,478,1.957,483,1.506,491,1.699,493,2.233,498,1.506,501,1.506,502,2.233,508,1.509,509,2.004,517,2.902,519,1.509,526,1.506,562,1.506,629,1.957,655,1.957,658,1.699,661,2.902,669,1.957,676,2.661,697,1.506,698,1.699,732,1.506,736,1.699,743,1.506,810,1.352,825,2.233,826,1.699,829,1.957,842,2.642,874,1.957,883,1.957,886,1.699,888,2.519,898,2.902,909,1.957,935,2.902,936,1.957,942,1.957,944,2.519,947,2.902,952,3.002,954,1.957,965,1.957,983,1.957,1008,1.957,1014,1.957,1078,1.957,1083,2.519,1095,1.957,1098,2.902,1115,1.699,1133,1.957,1141,1.957,1164,2.519,1174,1.957,1177,3.002,1186,3.458,1187,3.458,1191,2.902,1195,2.902,1198,2.902,1203,1.957,1208,2.902,1209,3.458,1210,1.699,1212,1.957,1217,1.957,1219,2.902,1224,1.957,1225,1.957,1231,1.699,1256,1.957,1262,2.35,1263,2.35,1264,2.35,1265,2.35,1266,2.35,1267,2.35,1268,2.35,1269,2.35,1270,2.35,1271,2.35,1272,3.483,1273,3.483,1274,2.35,1275,2.35,1276,1.957,1277,2.35,1278,2.35,1279,1.957,1280,2.35,1281,4.151,1282,2.35,1283,2.35,1284,2.35,1285,2.35,1286,2.35,1287,2.35,1288,2.35,1289,2.35,1290,2.35,1291,2.35,1292,2.35,1293,2.35,1294,2.35,1295,2.35,1296,3.483,1297,2.902,1298,2.35,1299,2.35,1300,2.35,1301,2.35,1302,3.483,1303,2.35,1304,2.35,1305,3.483,1306,3.483,1307,2.35,1308,5.316,1309,2.35,1310,2.35,1311,2.35,1312,2.35,1313,2.35,1314,3.483,1315,3.483,1316,2.35,1317,2.35,1318,2.35,1319,2.35,1320,2.35,1321,2.35,1322,2.35,1323,2.35,1324,3.483,1325,3.483,1326,3.483,1327,2.35,1328,2.35,1329,2.35,1330,2.35,1331,3.483,1332,2.35,1333,4.151,1334,2.35,1335,3.483,1336,2.35,1337,2.35,1338,2.35,1339,5.316,1340,2.35,1341,2.902,1342,2.35,1343,2.35,1344,2.35,1345,2.35,1346,2.35,1347,2.35,1348,1.957,1349,2.35,1350,2.35,1351,3.483,1352,4.151,1353,2.35,1354,2.35,1355,4.151,1356,2.35,1357,2.35,1358,2.35,1359,2.35,1360,2.35,1361,2.35,1362,2.35,1363,4.151,1364,2.35,1365,2.35,1366,2.35,1367,2.35,1368,2.902,1369,2.35,1370,2.35,1371,2.35,1372,2.35,1373,2.35,1374,2.35,1375,2.35,1376,2.35,1377,2.35,1378,2.35,1379,2.35,1380,2.35,1381,2.35,1382,2.35,1383,2.35,1384,1.957,1385,2.35,1386,2.35,1387,2.35,1388,2.35,1389,2.35,1390,2.35,1391,2.35,1392,2.35,1393,2.35,1394,2.35,1395,2.35,1396,2.35,1397,2.35,1398,2.35,1399,2.35,1400,2.35,1401,2.35,1402,2.35,1403,3.483,1404,2.35,1405,2.35,1406,2.35,1407,2.35,1408,2.35,1409,2.35,1410,2.35,1411,2.35,1412,2.35,1413,2.35,1414,2.35,1415,2.35,1416,2.35,1417,2.35,1418,2.35,1419,3.483,1420,2.35,1421,1.957,1422,2.35,1423,4.151,1424,2.35,1425,2.35,1426,2.35,1427,2.35,1428,2.35,1429,2.35,1430,3.483,1431,2.35,1432,2.35,1433,1.699,1434,2.35,1435,2.35,1436,2.35,1437,2.35,1438,2.35,1439,2.35,1440,2.35,1441,2.35,1442,2.35,1443,2.35,1444,2.35,1445,2.35,1446,2.35,1447,2.35,1448,2.35,1449,2.35,1450,3.483,1451,2.35]],["title/miscellaneous/variables.html",[1163,1.693,1433,2.743]],["body/miscellaneous/variables.html",[9,0.147,14,2.181,18,0.993,23,0.458,27,2.257,38,0.034,40,0.794,45,1.083,46,1.178,52,0.868,59,0.868,65,0.992,66,2.711,67,2.264,75,2.181,76,1.033,80,2.027,96,1.033,100,2.257,104,2.547,105,0.946,107,0.946,116,1.528,123,1.724,165,0.012,166,0.018,167,0.012,183,1.13,213,3.488,214,2.547,217,2.547,225,2.547,226,1.834,233,1.033,236,1.986,241,3.344,242,1.4,245,1.724,269,1.033,270,1.42,275,1.65,277,0.868,279,0.911,280,2.003,287,2.181,314,1.033,343,1.814,383,1.242,387,1.986,400,1.724,411,2.027,427,3.028,428,3.344,432,1.528,452,0.946,463,3.454,489,1.986,492,2.448,506,2.547,508,2.237,512,1.986,513,1.986,515,1.724,546,2.547,547,2.547,548,2.547,562,2.257,575,1.528,598,3.028,611,3.028,639,1.724,640,1.986,641,1.986,643,1.986,645,1.986,647,1.986,649,1.986,651,1.986,653,1.986,656,1.986,658,1.724,676,3.162,684,1.986,697,2.257,754,1.986,757,1.986,825,2.257,827,2.547,828,2.547,842,2.41,871,2.934,886,1.724,888,1.724,939,1.724,941,1.724,955,2.547,996,2.934,997,2.934,1023,2.547,1104,1.724,1111,1.986,1112,4.45,1113,1.986,1114,1.986,1115,3.344,1116,1.986,1117,2.934,1119,1.986,1120,2.934,1121,2.934,1122,2.934,1124,1.986,1125,1.986,1126,1.986,1148,1.986,1158,1.986,1163,1.528,1166,4.869,1177,1.724,1183,1.986,1193,1.986,1202,1.986,1206,3.488,1210,1.724,1222,3.488,1231,1.724,1245,1.986,1276,1.986,1279,1.986,1297,1.986,1341,3.853,1348,1.986,1368,1.986,1384,1.986,1421,1.986,1433,1.724,1452,4.187,1453,2.384,1454,2.384,1455,2.384,1456,2.384,1457,3.522,1458,2.384,1459,2.384,1460,2.384,1461,2.384,1462,2.384,1463,2.384,1464,2.384,1465,2.384,1466,2.384,1467,2.384,1468,2.384,1469,2.384,1470,2.384,1471,2.384,1472,2.384,1473,2.384,1474,2.384,1475,2.384,1476,2.384,1477,2.384,1478,2.384,1479,2.384,1480,2.384,1481,3.522,1482,2.384,1483,2.384,1484,3.522,1485,2.384,1486,2.384,1487,2.384,1488,2.384,1489,2.384,1490,2.384,1491,2.384,1492,2.384,1493,2.384,1494,2.384,1495,2.384,1496,2.384,1497,2.384,1498,2.384,1499,2.384,1500,3.522,1501,2.384,1502,2.384,1503,2.384,1504,2.384,1505,2.384,1506,2.384,1507,2.384,1508,2.384,1509,2.384,1510,2.384,1511,2.384,1512,2.384,1513,2.384,1514,2.384,1515,2.384,1516,2.384,1517,2.384,1518,2.384,1519,3.522,1520,2.384,1521,2.384,1522,2.384,1523,2.384,1524,2.384,1525,2.384,1526,2.384,1527,2.384,1528,2.384,1529,2.384,1530,2.384,1531,2.384,1532,2.384,1533,2.384,1534,2.384,1535,2.384,1536,2.384,1537,2.384]]],"invertedIndex":[["",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":529,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1087,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":566,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":1142,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1179,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":481,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":598,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1096,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":917,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":940,"title":{},"body":{"components/SignupComponent.html":{}}}],["2",{"_index":941,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":929,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":569,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":732,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":733,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":734,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":575,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":729,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":735,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_answers",{"_index":292,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":970,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":289,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":293,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["absolute",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1330,"title":{},"body":{"todo.html":{}}}],["access",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":876,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{}}}],["account",{"_index":1287,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":490,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":882,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":666,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":1078,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":431,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":402,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1120,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":410,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":34,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":442,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":629,"title":{},"body":{"components/GameOverComponent.html":{},"todo.html":{}}}],["against",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1416,"title":{},"body":{"todo.html":{}}}],["all(/^(?!.*\\/api",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1328,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":412,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":755,"title":{},"body":{"injectables/QuestionService.html":{}}}],["already",{"_index":909,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1343,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1222,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":1177,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":832,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/text",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{}}}],["angular/common",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":642,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":644,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":646,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":648,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":650,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":652,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":654,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":657,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":384,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":788,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":838,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":824,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":826,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{},"todo.html":{}}}],["another",{"_index":932,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":270,"title":{"interfaces/Answer.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":797,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":751,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":291,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{}}}],["answers(given",{"_index":310,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":721,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":953,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1341,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1115,"title":{},"body":{"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/canstart",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":338,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":339,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":150,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appears",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["application",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":757,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":342,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":353,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1450,"title":{},"body":{"todo.html":{}}}],["array",{"_index":694,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":861,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":712,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":722,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":725,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":726,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["artifacts",{"_index":1201,"title":{},"body":{"index.html":{}}}],["assigns",{"_index":730,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["async",{"_index":323,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":1129,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1167,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1171,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":409,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":399,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":243,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":437,"title":{},"body":{"classes/Authorization.html":{}}}],["authorized",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1390,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["automatic",{"_index":513,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1191,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autosize",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["autowrongguess",{"_index":547,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["await",{"_index":328,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1374,"title":{},"body":{"todo.html":{}}}],["back",{"_index":1332,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1186,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":870,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":836,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1302,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1403,"title":{},"body":{"todo.html":{}}}],["bar",{"_index":655,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["base",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":935,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["beautification",{"_index":1264,"title":{},"body":{"todo.html":{}}}],["before",{"_index":411,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":981,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["between",{"_index":939,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":765,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1245,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1345,"title":{},"body":{"todo.html":{}}}],["box",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["break",{"_index":432,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":445,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":478,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":446,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":548,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1259,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1200,"title":{},"body":{"index.html":{}}}],["built",{"_index":1315,"title":{},"body":{"todo.html":{}}}],["button",{"_index":502,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":869,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":297,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":523,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1049,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":1082,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":476,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":388,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canstart",{"_index":913,"title":{},"body":{"components/SignupComponent.html":{}}}],["case",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":331,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1275,"title":{},"body":{"todo.html":{}}}],["category",{"_index":662,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{}}}],["caveats",{"_index":1319,"title":{},"body":{"todo.html":{}}}],["cdktextareaautosize",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{}}}],["center",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["change",{"_index":816,"title":{},"body":{"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1248,"title":{},"body":{"index.html":{}}}],["changes",{"_index":817,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":859,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":856,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":857,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["charge",{"_index":284,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":697,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":745,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":747,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":1051,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":416,"title":{},"body":{"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["checktoken",{"_index":401,"title":{},"body":{"classes/Authorization.html":{}}}],["checktoken(req",{"_index":414,"title":{},"body":{"classes/Authorization.html":{}}}],["chemistry",{"_index":1301,"title":{},"body":{"todo.html":{}}}],["choices",{"_index":668,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":1446,"title":{},"body":{"todo.html":{}}}],["class",{"_index":89,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"todo.html":{}}}],["classes",{"_index":395,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["classifying",{"_index":1432,"title":{},"body":{"todo.html":{}}}],["clear",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1052,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1060,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":524,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":593,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1178,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":496,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1045,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":638,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1195,"title":{},"body":{"index.html":{},"todo.html":{}}}],["collection",{"_index":326,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":329,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":871,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":809,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1346,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1256,"title":{},"body":{"index.html":{},"todo.html":{}}}],["comment",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commit",{"_index":1442,"title":{},"body":{"todo.html":{}}}],["common",{"_index":1316,"title":{},"body":{"todo.html":{}}}],["compared",{"_index":1445,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":899,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":961,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":955,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":483,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1168,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compodoc",{"_index":1434,"title":{},"body":{"todo.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":377,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["config",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1265,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":844,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1286,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1347,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["consist",{"_index":928,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1342,"title":{},"body":{"todo.html":{}}}],["console.log(`an",{"_index":332,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.log(errors",{"_index":705,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["consoleoutput",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":977,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":663,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":798,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":462,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":975,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":607,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":665,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":397,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1291,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":574,"title":{},"body":{"components/GameComponent.html":{}}}],["converting",{"_index":1351,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":610,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":626,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":277,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":276,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["correctcolor",{"_index":827,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":731,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":512,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":1334,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1097,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":736,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["creates",{"_index":713,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1337,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["crud",{"_index":1357,"title":{},"body":{"todo.html":{}}}],["cst",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1300,"title":{},"body":{"todo.html":{}}}],["current",{"_index":498,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":526,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":447,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":867,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":868,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":855,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":617,"title":{},"body":{"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":280,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":327,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":555,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1348,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1254,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":345,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":419,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":433,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["default",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1236,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":344,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1225,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1233,"title":{},"body":{"index.html":{}}}],["describe",{"_index":274,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["dev",{"_index":1185,"title":{},"body":{"index.html":{}}}],["develop",{"_index":1293,"title":{},"body":{"todo.html":{}}}],["development",{"_index":1183,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1338,"title":{},"body":{"todo.html":{}}}],["directive",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1199,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1203,"title":{},"body":{"index.html":{},"todo.html":{}}}],["display",{"_index":538,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1044,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1202,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1250,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1296,"title":{},"body":{"todo.html":{}}}],["div",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1098,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["doesn't",{"_index":315,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["doesnt",{"_index":1447,"title":{},"body":{"todo.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["don't",{"_index":951,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":968,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1297,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1378,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1313,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1304,"title":{},"body":{"todo.html":{}}}],["dynamic",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1214,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":825,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":945,"title":{},"body":{"components/SignupComponent.html":{}}}],["earned",{"_index":982,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":839,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["efficient",{"_index":840,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["eliminated",{"_index":1369,"title":{},"body":{"todo.html":{}}}],["emergencies",{"_index":1274,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":820,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1057,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":1009,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["end",{"_index":501,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["endpoint",{"_index":1391,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":413,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1169,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":957,"title":{},"body":{"components/SignupComponent.html":{}}}],["entered",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{}}}],["environment",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1229,"title":{},"body":{"index.html":{}}}],["err",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":336,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":333,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":1172,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":698,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":704,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1437,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1270,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":576,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1320,"title":{},"body":{"todo.html":{}}}],["event",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.target",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["event.total",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":804,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["example",{"_index":959,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1361,"title":{},"body":{"todo.html":{}}}],["execute",{"_index":1211,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":812,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":316,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":475,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1385,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1336,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["export",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":427,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":283,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["fails",{"_index":1349,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1289,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":667,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1383,"title":{},"body":{"todo.html":{}}}],["favor",{"_index":1371,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1311,"title":{},"body":{"todo.html":{}}}],["feel",{"_index":965,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["field",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1193,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload($event",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1039,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["finish",{"_index":1350,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":792,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":448,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":854,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":602,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":806,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":930,"title":{},"body":{"components/SignupComponent.html":{}}}],["fix",{"_index":1331,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1388,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1262,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1205,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1375,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1251,"title":{},"body":{"index.html":{}}}],["following",{"_index":1312,"title":{},"body":{"todo.html":{}}}],["font",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["forbidden",{"_index":436,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":294,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":833,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":850,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":683,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{}}}],["formbuilders",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["forms",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["formsmodule",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["free",{"_index":966,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":393,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":408,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1164,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["further",{"_index":1216,"title":{},"body":{"index.html":{}}}],["gained",{"_index":536,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":872,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":443,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":444,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":152,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":390,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":154,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gecko",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["general",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["generate",{"_index":1198,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1176,"title":{},"body":{"index.html":{}}}],["getadmin",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":783,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1036,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":768,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":324,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpractice",{"_index":993,"title":{},"body":{"injectables/TeamService.html":{}}}],["getpracticequestions",{"_index":776,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":453,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1076,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":994,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":995,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1004,"title":{},"body":{"injectables/TeamService.html":{}}}],["getter",{"_index":769,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":317,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getting",{"_index":335,"title":{"index.html":{},"todo.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["github:angular/web",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":305,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["go",{"_index":1218,"title":{},"body":{"index.html":{}}}],["good",{"_index":1083,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1303,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1260,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":873,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":874,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":515,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":933,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1267,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1268,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":1173,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":1174,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["having",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":710,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["headers",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1217,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":312,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1128,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1283,"title":{},"body":{"todo.html":{}}}],["heroku",{"_index":1182,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1227,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holds",{"_index":660,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["hrs",{"_index":623,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1190,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":760,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptionsjson",{"_index":1023,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1029,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":744,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["https",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/practical",{"_index":1405,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1408,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/user",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1356,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1387,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1451,"title":{},"body":{"todo.html":{}}}],["human",{"_index":612,"title":{},"body":{"components/GameOverComponent.html":{}}}],["i.e",{"_index":470,"title":{},"body":{"components/GameComponent.html":{}}}],["id",{"_index":983,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":1440,"title":{},"body":{"todo.html":{}}}],["identifier",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":542,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":441,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1307,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":847,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":658,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1194,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":828,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":711,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":718,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":740,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["inform",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["information",{"_index":420,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["initiate",{"_index":887,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":477,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":168,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["input",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["input#get",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{}}}],["inputs",{"_index":795,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["instance",{"_index":313,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instead",{"_index":296,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":927,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1284,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1180,"title":{},"body":{"index.html":{}}}],["interface",{"_index":269,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":271,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1288,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1061,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1074,"title":{},"body":{"components/TimerComponent.html":{}}}],["io",{"_index":1370,"title":{},"body":{"todo.html":{}}}],["isn't",{"_index":931,"title":{},"body":{"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":967,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1333,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1317,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":511,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["j",{"_index":723,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":684,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join(__dirname",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1144,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":754,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":426,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":424,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":430,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1213,"title":{},"body":{"index.html":{}}}],["keep",{"_index":947,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kinda",{"_index":843,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["last",{"_index":1231,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":522,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1242,"title":{},"body":{"index.html":{}}}],["legend",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":841,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["limit",{"_index":506,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":714,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":753,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":517,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":1007,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1276,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":454,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":474,"title":{},"body":{"components/GameComponent.html":{}}}],["localstorage",{"_index":1321,"title":{},"body":{"todo.html":{}}}],["located",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1314,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":440,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{}}}],["logs",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":936,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1339,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1326,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["lot",{"_index":1322,"title":{},"body":{"todo.html":{}}}],["main",{"_index":439,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["make",{"_index":1308,"title":{},"body":{"todo.html":{}}}],["making",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["many",{"_index":535,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(event",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{}}}],["matbuttonmodule",{"_index":641,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":643,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":645,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":640,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":354,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":647,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":724,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":568,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":649,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":651,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":653,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":656,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":507,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1355,"title":{},"body":{"todo.html":{}}}],["meaning",{"_index":1230,"title":{},"body":{"index.html":{}}}],["menu",{"_index":573,"title":{},"body":{"components/GameComponent.html":{}}}],["message",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":407,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["million",{"_index":1298,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":611,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1050,"title":{},"body":{"components/TimerComponent.html":{}}}],["minify",{"_index":1364,"title":{},"body":{"todo.html":{}}}],["mins",{"_index":622,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":942,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1163,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":550,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modifying",{"_index":630,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":341,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":343,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1148,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongo",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":468,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1279,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["moz",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":620,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1067,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":606,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":979,"title":{},"body":{"classes/Team.html":{}}}],["n",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["namespaces",{"_index":1386,"title":{},"body":{"todo.html":{}}}],["navigate",{"_index":1189,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":491,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":952,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["new",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":1360,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":924,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":404,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":405,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1197,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":455,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":793,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":813,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":456,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":1277,"title":{},"body":{"todo.html":{}}}],["node",{"_index":1358,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1253,"title":{},"body":{"index.html":{}}}],["non",{"_index":1269,"title":{},"body":{"todo.html":{}}}],["nothing",{"_index":1252,"title":{},"body":{"index.html":{}}}],["now",{"_index":1368,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":1184,"title":{},"body":{"index.html":{}}}],["null",{"_index":922,"title":{},"body":{"components/SignupComponent.html":{}}}],["number",{"_index":519,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["numbers",{"_index":716,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["object",{"_index":275,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":822,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":685,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":479,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":334,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1031,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1273,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":457,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":494,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":458,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":810,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":789,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":794,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":818,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":894,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":509,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ones",{"_index":1041,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":459,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera/ie",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1040,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":418,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["otherwise",{"_index":1008,"title":{},"body":{"injectables/TeamService.html":{},"todo.html":{}}}],["out",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1290,"title":{},"body":{"todo.html":{}}}],["output",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":796,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":603,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":604,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":600,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":618,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":608,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":609,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":614,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":374,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1221,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1261,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1133,"title":{"dependencies.html":{}},"body":{"todo.html":{}}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":877,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":370,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["papa",{"_index":699,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":696,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":701,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1244,"title":{},"body":{"index.html":{}}}],["param",{"_index":587,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":695,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":700,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":707,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":703,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1141,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1318,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1430,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":278,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":387,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":392,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":950,"title":{},"body":{"components/SignupComponent.html":{}}}],["people",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{}}}],["perfectly",{"_index":1448,"title":{},"body":{"todo.html":{}}}],["perform",{"_index":488,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1404,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1238,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1373,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1235,"title":{},"body":{"index.html":{}}}],["play",{"_index":888,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":636,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":601,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":628,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":637,"title":{},"body":{"components/GameOverComponent.html":{}}}],["point",{"_index":533,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":449,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":450,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1299,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":545,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["possibly",{"_index":1359,"title":{},"body":{"todo.html":{}}}],["post",{"_index":996,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1010,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":669,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["practice]{@link",{"_index":1025,"title":{},"body":{"injectables/TeamService.html":{}}}],["practice_questions",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":282,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":300,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practicequestions(given",{"_index":303,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":675,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":679,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":674,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":680,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":691,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":687,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1295,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":901,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":500,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":627,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{}}}],["prevents",{"_index":572,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1224,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":616,"title":{},"body":{"components/GameOverComponent.html":{}}}],["process.env.admin_password",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":688,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow",{"_index":677,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":686,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1204,"title":{},"body":{"index.html":{}}}],["production",{"_index":1206,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1223,"title":{},"body":{"index.html":{}}}],["progress",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":1175,"title":{},"body":{"index.html":{}}}],["promise",{"_index":290,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["proper",{"_index":1366,"title":{},"body":{"todo.html":{}}}],["properly",{"_index":823,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1215,"title":{},"body":{"index.html":{}}}],["provided",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1389,"title":{},"body":{"todo.html":{}}}],["public",{"_index":299,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}}}],["pulls",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["purposes",{"_index":1278,"title":{},"body":{"todo.html":{}}}],["put",{"_index":997,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1012,"title":{},"body":{"injectables/TeamService.html":{}}}],["question",{"_index":279,"title":{"classes/Question.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":738,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":460,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":748,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":546,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":673,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":307,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":790,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":791,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":720,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":157,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":464,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":287,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":692,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1249,"title":{},"body":{"index.html":{}}}],["read",{"_index":1407,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":613,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1219,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1220,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1226,"title":{},"body":{"index.html":{}}}],["recompile",{"_index":1247,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":391,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["refers",{"_index":1280,"title":{},"body":{"todo.html":{}}}],["register",{"_index":880,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":386,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":949,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":385,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":964,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":891,"title":{},"body":{"components/SignupComponent.html":{}}}],["related",{"_index":743,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["relating",{"_index":398,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1192,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1081,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":709,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["reportprogress",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":429,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":403,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":842,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1392,"title":{},"body":{"todo.html":{}}}],["res",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.json('invalid",{"_index":434,"title":{},"body":{"classes/Authorization.html":{}}}],["res.sendfile(clientpath",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.set(403).json('403",{"_index":435,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1063,"title":{},"body":{"components/TimerComponent.html":{}}}],["respective",{"_index":808,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":1053,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["result",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":848,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":849,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":330,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":851,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":852,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieval",{"_index":295,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":321,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":286,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["return",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["rewrite",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{}}}],["right",{"_index":1255,"title":{},"body":{"index.html":{}}}],["root",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["roughly",{"_index":480,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":883,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":463,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":382,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":394,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":383,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":381,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":689,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":739,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":727,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":728,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":741,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":706,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":715,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["run",{"_index":1181,"title":{},"body":{"index.html":{}}}],["running",{"_index":1207,"title":{},"body":{"index.html":{}}}],["runs",{"_index":504,"title":{},"body":{"components/GameComponent.html":{}}}],["rxjs",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":619,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari",{"_index":1444,"title":{},"body":{"todo.html":{}}}],["safari/chrome",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":562,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1015,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":615,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":605,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":821,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1196,"title":{},"body":{"index.html":{}}}],["school",{"_index":632,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":971,"title":{},"body":{"classes/Team.html":{}}}],["schools",{"_index":978,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":534,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":934,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1239,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1243,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1344,"title":{},"body":{"todo.html":{}}}],["second",{"_index":540,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["seconds",{"_index":461,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":451,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":428,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":621,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1340,"title":{},"body":{"todo.html":{}}}],["see",{"_index":898,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1329,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":750,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1327,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1292,"title":{},"body":{"todo.html":{}}}],["sensible",{"_index":1435,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1187,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":469,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["server's",{"_index":1429,"title":{},"body":{"todo.html":{}}}],["service",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":549,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":551,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":910,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":302,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["setanswers(given",{"_index":785,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setinterval",{"_index":1054,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1066,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpractice",{"_index":998,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":1017,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpracticequestions(given",{"_index":778,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":781,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["setteam",{"_index":999,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":1019,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":521,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["shared/question",{"_index":281,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shouldn't",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["show",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1285,"title":{},"body":{"todo.html":{}}}],["shuffle",{"_index":678,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":690,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":693,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["side",{"_index":1352,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":886,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":878,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":389,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":889,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":890,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":159,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":948,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":814,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":956,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":661,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":702,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":708,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["sluggish",{"_index":1443,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1426,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1309,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":963,"title":{},"body":{"components/SignupComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["specifically",{"_index":1367,"title":{},"body":{"todo.html":{}}}],["spell",{"_index":1449,"title":{},"body":{"todo.html":{}}}],["src/.../admin",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1165,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1166,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":380,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":337,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":639,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":787,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":801,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":802,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":803,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":800,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":805,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":799,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":807,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":815,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":819,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1043,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1056,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1072,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1075,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1071,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1073,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1059,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1062,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1064,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1068,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1069,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1070,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1077,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1058,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1104,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":969,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":976,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":987,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":988,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":990,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":989,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":986,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":985,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":991,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":984,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:13",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:19",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:27",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:30",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:44",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":599,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":438,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":495,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":497,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":503,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":518,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":516,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":544,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":525,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":520,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":527,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":528,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":530,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":531,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":537,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":541,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":539,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":466,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":467,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":472,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":473,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":885,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:16",{"_index":905,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:18",{"_index":907,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:20",{"_index":908,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":896,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:31",{"_index":897,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:36",{"_index":900,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:41",{"_index":902,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:51",{"_index":903,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":875,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":879,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":881,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:16",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:22",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:24",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:27",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:32",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:38",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:50",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:60",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":742,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":746,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":752,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":749,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":992,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1000,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1022,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1021,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":1020,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":1002,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":1018,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":1001,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":1006,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":1011,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":1013,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":1016,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":1005,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1035,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1037,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1038,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":396,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:25",{"_index":406,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:36",{"_index":422,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":415,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":272,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":659,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":672,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":671,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":670,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":664,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1127,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":1398,"title":{},"body":{"todo.html":{}}}],["start",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1117,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":505,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":486,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["state('correct",{"_index":835,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":837,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1306,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["still",{"_index":1335,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":1055,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":1065,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":1003,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":314,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":273,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":771,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":770,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":772,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":773,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":777,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":779,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":780,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":782,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":784,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":786,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":775,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":774,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":288,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["storing",{"_index":285,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["string",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["stuff",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"modules/MaterialModule.html":{}}}],["style",{"_index":829,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":904,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":962,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":892,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":863,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1232,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":906,"title":{},"body":{"components/SignupComponent.html":{}}}],["support",{"_index":1257,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["surprising",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1258,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1241,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1376,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1228,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1188,"title":{},"body":{"index.html":{}}}],["table",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":510,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":937,"title":{},"body":{"components/SignupComponent.html":{}}}],["target",{"_index":1436,"title":{},"body":{"todo.html":{}}}],["team",{"_index":452,"title":{"classes/Team.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":921,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":635,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":633,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.service",{"_index":756,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":634,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":926,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":1024,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":893,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":972,"title":{},"body":{"classes/Team.html":{}}}],["teams",{"_index":944,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":465,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1282,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1046,"title":{},"body":{"components/TimerComponent.html":{}}}],["term",{"_index":1271,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1210,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1272,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1209,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["thing",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1324,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1079,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":943,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":311,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":304,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":308,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.adminservice",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.password).subscribe",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(input.files[0]).subscribe",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":864,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":866,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":579,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":570,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1084,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1092,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":560,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":845,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finishanimation",{"_index":858,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":588,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":319,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":581,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":320,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":586,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":309,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":301,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":306,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gettoken",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1042,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":762,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":764,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.post(uri.admin.login",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1028,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":767,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":766,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1034,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1030,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":759,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":763,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":565,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":592,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1086,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1085,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":553,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":563,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1033,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1026,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":719,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1032,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":580,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":559,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":561,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":862,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":558,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":912,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1089,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":914,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":557,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":884,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.saving",{"_index":624,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":591,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":590,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":717,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.start",{"_index":1090,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1093,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":860,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":865,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":846,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":853,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1088,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":923,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":583,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":918,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":564,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":552,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":915,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":916,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":554,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":585,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":1027,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":761,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":584,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":920,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":758,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":567,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":919,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":925,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":556,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":631,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":596,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":578,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":597,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":571,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":595,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":582,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":589,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":911,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["this['_",{"_index":318,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1310,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1281,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1237,"title":{},"body":{"index.html":{}}}],["time",{"_index":508,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":973,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1047,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1048,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":161,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":895,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":974,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":99,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token]{@link",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1384,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["took",{"_index":1234,"title":{},"body":{"index.html":{}}}],["total",{"_index":482,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1266,"title":{},"body":{"todo.html":{}}}],["transactions",{"_index":1372,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":681,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":830,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1441,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tried",{"_index":1365,"title":{},"body":{"todo.html":{}}}],["tries",{"_index":811,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":831,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":834,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":325,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":737,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":682,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1170,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1263,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":960,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1354,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1353,"title":{},"body":{"todo.html":{}}}],["tz(start",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":594,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":938,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":577,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":958,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1208,"title":{},"body":{"index.html":{},"todo.html":{}}}],["unix",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["until",{"_index":954,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1014,"title":{},"body":{"injectables/TeamService.html":{},"todo.html":{}}}],["upload",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["use",{"_index":676,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1305,"title":{},"body":{"todo.html":{}}}],["user",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":532,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":421,"title":{},"body":{"classes/Authorization.html":{}}}],["userroutes",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":400,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1240,"title":{},"body":{"index.html":{}}}],["using",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["valid",{"_index":417,"title":{},"body":{"classes/Authorization.html":{}}}],["value",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":322,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["var",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1433,"title":{"miscellaneous/variables.html":{}},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":489,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":423,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":425,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":298,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":1212,"title":{},"body":{"index.html":{},"todo.html":{}}}],["viewchild",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["viewchild('autosize",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["viewchild(timercomponent",{"_index":543,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{}}}],["virtual",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":340,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1294,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1362,"title":{},"body":{"todo.html":{}}}],["wasn't",{"_index":1417,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1246,"title":{},"body":{"index.html":{}}}],["way",{"_index":1095,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["ways",{"_index":1323,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1158,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webkit",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1363,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["whether",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["width",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1094,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1091,"title":{},"body":{"components/TimerComponent.html":{}}}],["wipes",{"_index":625,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":946,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1421,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["wont",{"_index":1438,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1439,"title":{},"body":{"todo.html":{}}}],["works",{"_index":1377,"title":{},"body":{"todo.html":{}}}],["worse",{"_index":1080,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1325,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":514,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":980,"title":{},"body":{"classes/Team.html":{}}}],["yyyy",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":355,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                autosize\n                            \n                            \n                                consoleOutput\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:44\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:30\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            autosize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CdkTextareaAutosize\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('autosize', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:19\n                            \n                        \n\n                \n                    \n                        Some weird auto-sizing stuff \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:27\n                            \n                        \n\n                \n                    \n                        the password that the user has entered \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:22\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService) { }\n\n  /** Some weird auto-sizing stuff */\n  @ViewChild('autosize', { static: false }) autosize: CdkTextareaAutosize;\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** the password that the user has entered */\n  password: string;\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Upload the questions to the server */\n  // todo rewrite as template reference variable as better practice\n  //  https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable\n  //   if possible (not sure that it is)\n  fileUpload($event): void {\n    const input = $event.target;\n    this.adminService.uploadQuestions(input.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                        {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:16\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:60\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:38\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:27\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:32\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:50\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:24\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsText, URI } from '../constants';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token: string;\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, password, {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.getToken() })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:25\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:36\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          return res.json('invalid token');\n        } else {\n          req.headers.authorization = decoded.type;\n          next();\n        }\n      });\n    } else {\n      res.set(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.set(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'user' || req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.set(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.getToken() };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:31\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:36\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:41\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:51\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:18\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:20\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\ntodo may want to look into using webpack to package backend into a single file (be sure to minify). Last time tried though\n  there was an issue with the code not using the proper directory to look for things (specifically the practice questions)\n  this may not be an issue now that you have eliminated file io in favor of database transactions\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password -- also need to use https\ntodo it appears that formBuilders are now the standard way to do forms in angular. Might be worth converting.\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo consider making the server's (api.ts) questions, answers, practice questions, and related functions part of their own\n class\n in general - consider \"classifying\" the server side functions and variables to make compodoc documentation of them more sensible.\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo check readme and update before commit\ntodo app (animations in particular) is sluggish on safari compared to chrome\ntodo store token so user doesnt have to perfectly spell name again?\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbURL   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.ADMIN_PASSWORD || 'password'\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'mongodb://heroku_whlj8cct:i2k7ued2lj5duem2trvtbievf7@ds253918.mlab.com:53918/heroku_whlj8cct'\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/canStart'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
