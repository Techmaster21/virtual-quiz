var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.871,1,1.396,2,1.486,3,0.232,4,0.232,5,0.997,6,1.092,7,1.092,8,1.092,9,0.435,10,1.918,11,0.335,12,1.787,13,3.431,14,2.985,15,1.787,16,1.092,17,2.63,18,1.564,19,1.627,20,4.102,21,1.627,22,3.431,23,0.299,24,0.888,25,4.862,26,4.102,27,0.888,28,3.431,29,2.859,30,3.787,31,2.481,32,1.26,33,2.303,34,3.268,35,4.102,36,4.546,37,1.175,38,3.431,39,0.809,40,0.034,41,0.49,42,0.632,43,0.809,44,3.431,45,4.102,46,2.303,47,3.787,48,1.176,49,1.396,50,0.959,51,1.52,52,3.431,53,4.102,54,2.303,55,1.627,56,3.039,57,3.431,58,2.155,59,2.481,60,2.859,61,3.925,62,3.431,63,4.862,64,2.303,65,2.2,66,1.655,67,3.431,68,3.431,69,0.545,70,1.486,71,1.494,72,2.914,73,2.859,74,2.303,75,1.148,76,1.493,77,3.417,78,3.116,79,3.417,80,2.303,81,3.287,82,2.2,83,4.546,84,2.303,85,2.303,86,1.787,87,1.787,88,1.969,89,2.859,90,3.431,91,1.157,92,1.975,93,0.661,94,0.498,95,2.303,96,1.476,97,1.665,98,1.325,99,0.265,100,0.13,101,2.481,102,0.997,103,0.838,104,0.545,105,2.303,106,2.303,107,1.486,108,2.136,109,2.303,110,1.787,111,1.476,112,1.476,113,1.918,114,2.303,115,1.061,116,1.325,117,2.303,118,1.918,119,1.665,120,2.303,121,2.303,122,2.303,123,2.303,124,2.303,125,2.303,126,2.303,127,2.481,128,2.303,129,2.303,130,1.918,131,2.303,132,2.303,133,2.303,134,1.918,135,2.303,136,1.665,137,2.303,138,2.303,139,2.303,140,2.303,141,1.918,142,2.859,143,2.303,144,2.303,145,2.303,146,2.303,147,2.303,148,2.303,149,1.918,150,2.303,151,1.918,152,2.303,153,1.918,154,1.918,155,2.303,156,2.859,157,2.859,158,2.303,159,2.303,160,1.918,161,2.303,162,1.199,163,1.199,164,2.303,165,2.303,166,3.431,167,1.476,168,2.859,169,1.918,170,1.918,171,1.918,172,2.303,173,2.303,174,1.476,175,0.914,176,1.665,177,2.303,178,1.665,179,1.476,180,2.303,181,1.918,182,2.303,183,2.303,184,2.303,185,2.303,186,2.2,187,3.431,188,3.431,189,2.859,190,3.431,191,2.303,192,2.303,193,2.859,194,2.303,195,1.476,196,2.303,197,2.303,198,2.2,199,2.303,200,1.918,201,2.303,202,3.431,203,5.098,204,4.102,205,4.102,206,2.303,207,2.303,208,2.303,209,2.303,210,2.303,211,1.918,212,0.914,213,1.486,214,1.092,215,2.155,216,1.092,217,1.092,218,0.77,219,1.092,220,0.707,221,1.092,222,0.707,223,0.649,224,1.092,225,0.77,226,1.092,227,0.707,228,1.092,229,0.77,230,0.997,231,1.092,232,1.092,233,0.012,234,0.018,235,0.012]],["title/injectables/AdminService.html",[34,2.023,236,1.149]],["body/injectables/AdminService.html",[3,0.263,4,0.263,9,0.449,11,0.379,12,1.956,14,2.774,15,1.956,23,0.339,24,0.972,27,0.972,29,4.017,32,1.353,34,2.408,37,1.258,39,1.008,40,0.034,41,0.516,42,0.664,43,1.008,47,3.67,48,1.322,49,1.481,50,1.083,51,0.871,55,2.286,56,2.162,66,1.756,69,1.262,70,1.908,71,1.939,73,2.17,75,0.871,76,1.353,78,3.091,81,2.716,86,1.956,91,1.614,92,2.162,93,0.775,94,0.564,99,0.3,100,0.099,103,0.949,104,1.394,107,2.48,115,1.247,130,2.17,200,2.17,233,0.013,234,0.019,235,0.013,236,1.368,237,1.499,238,2.17,239,2.408,240,3.756,241,3.756,242,5.112,243,3.756,244,4.017,245,4.822,246,3.756,247,3.756,248,1.67,249,3.091,250,2.605,251,1.781,252,3.756,253,4.822,254,2.605,255,3.756,256,3.756,257,2.716,258,2.716,259,3.129,260,3.756,261,3.186,262,2.605,263,2.424,264,2.605,265,2.605,266,1.481,267,3.756,268,1.499,269,3.756,270,2.605,271,3.756,272,2.162,273,3.756,274,3.756,275,2.605,276,1.627,277,3.756,278,3.756,279,2.605,280,3.756,281,1.491,282,2.605,283,3.129,284,2.716,285,2.605,286,2.605,287,3.186,288,2.605,289,1.499,290,1.357,291,1.67,292,2.605,293,1.67,294,1.357,295,2.716,296,1.357,297,1.235,298,1.499,299,1.499,300,1.357,301,3.756,302,3.756,303,3.756,304,1.627,305,2.605,306,2.605,307,2.17,308,2.605,309,2.824,310,4.406,311,2.716,312,1.781,313,3.756,314,2.605,315,2.605,316,2.605,317,1.884,318,2.605,319,2.605,320,2.605,321,2.605,322,2.605,323,2.605,324,2.605,325,3.186,326,2.605,327,2.605,328,4.822,329,2.605,330,2.605,331,2.605,332,2.17,333,3.756,334,2.605,335,2.605,336,2.605,337,3.756,338,2.605,339,2.605,340,2.605]],["title/interfaces/Answer.html",[341,1.367,342,0.97]],["body/interfaces/Answer.html",[3,0.329,4,0.329,9,0.242,11,0.474,23,0.424,24,1.136,40,0.034,41,0.536,42,0.424,48,1.537,49,1.001,50,0.643,55,1.545,69,1.354,71,1.187,91,1.565,93,0.639,99,0.375,100,0.166,102,1.903,104,1.315,108,1.698,115,1.136,162,1.698,163,2.978,167,2.089,174,2.089,233,0.023,234,0.023,235,0.017,266,1.001,276,1.412,281,1.293,341,2.404,342,1.795,343,2.357,344,1.875,345,2.089,346,3.592,347,1.661,348,3.193,349,1.809,350,3.184,351,1.436,352,2.11,353,1.545,354,2.527,355,2.357,356,2.089,357,2.357,358,2.357,359,1.698,360,3.184,361,2.152,362,2.357,363,4.439,364,2.11,365,2.357,366,2.357,367,3.176,368,2.357,369,1.875,370,2.089,371,1.698,372,3.043,373,1.875,374,2.357,375,2.357,376,2.357,377,2.303,378,2.357,379,2.357,380,2.357,381,2.357,382,2.357,383,2.357,384,2.527,385,2.089,386,1.293,387,1.412,388,2.357,389,3.592,390,2.357,391,2.357,392,1.698,393,2.357,394,1.875,395,2.357,396,2.357,397,2.357,398,2.357,399,2.357,400,2.357,401,2.357,402,2.357,403,2.357,404,1.875,405,2.357,406,2.357]],["title/components/AppComponent.html",[0,0.565,218,1.056]],["body/components/AppComponent.html",[0,1.075,1,1.288,2,2.239,3,0.423,4,0.423,5,1.816,6,1.988,7,1.988,8,1.988,9,0.311,11,0.61,16,1.988,17,2.991,18,1.8,19,2.45,21,2.45,40,0.033,41,0.521,88,2.239,93,0.61,94,0.908,99,0.483,100,0.159,212,1.664,213,2.239,214,1.988,215,2.772,216,1.988,217,1.988,218,1.955,219,1.988,220,1.288,221,1.988,222,1.288,223,1.182,224,1.988,225,1.402,226,1.988,227,1.288,228,1.988,229,1.402,230,1.816,231,1.988,232,1.988,233,0.022,234,0.027,235,0.022,300,3.045,407,3.493,408,5.602,409,5.168,410,4.305]],["title/modules/AppModule.html",[411,1.644,412,2.023]],["body/modules/AppModule.html",[1,1.803,3,0.361,4,0.361,9,0.266,18,1.01,40,0.034,93,0.922,94,0.775,96,2.295,97,3.38,98,2.06,99,0.412,100,0.136,212,1.421,218,2.098,220,1.803,222,1.803,225,1.963,227,1.803,229,1.963,233,0.018,234,0.024,235,0.018,289,2.06,411,1.865,412,4.157,413,1.551,414,2.06,415,4.336,416,4.336,417,2.982,418,2.295,419,2.982,420,2.982,421,2.982,422,2.982,423,3.378,424,3.378,425,3.894,426,2.06,427,2.06,428,3.58,429,3.38,430,4.674,431,3.38,432,4.674,433,4.674,434,4.674,435,3.58,436,3.58,437,2.982,438,3.58,439,2.982,440,2.982,441,2.295,442,2.982,443,3.58,444,2.982,445,3.58,446,2.982]],["title/modules/AppRoutingModule.html",[411,1.644,423,1.816]],["body/modules/AppRoutingModule.html",[0,1.043,1,1.577,3,0.419,4,0.419,9,0.308,14,2.161,40,0.034,93,0.9,94,0.898,99,0.478,100,0.157,115,1.073,220,1.577,222,1.577,223,1.17,227,1.577,233,0.021,234,0.026,235,0.021,413,1.797,418,2.66,423,2.954,429,3.001,431,3.713,437,3.457,439,3.457,440,3.457,441,2.66,442,3.457,446,3.457,447,4.149,448,4.149,449,5.134,450,2.904,451,2.388,452,3.574,453,4.149,454,5.082,455,4.277,456,4.645,457,3.457,458,5.134,459,5.134,460,5.134,461,4.149]],["title/classes/Authorization.html",[100,0.119,312,1.497]],["body/classes/Authorization.html",[3,0.316,4,0.316,9,0.406,11,0.456,14,2.724,23,0.407,27,1.353,37,1.053,39,0.96,40,0.034,41,0.491,42,0.68,43,0.96,50,0.96,51,1.628,66,1.772,69,0.742,87,2.943,91,1.373,92,3.009,93,0.708,99,0.36,100,0.119,104,0.742,107,2.505,108,2.227,115,0.81,127,3.091,186,3.907,233,0.016,234,0.022,235,0.016,259,5.03,297,1.485,312,2.027,317,3.52,372,2.227,377,1.852,462,1.631,463,2.609,464,2.027,465,4.408,466,4.275,467,4.275,468,3.781,469,4.275,470,4.275,471,6.038,472,4.443,473,6.038,474,3.132,475,4.707,476,3.781,477,5.229,478,4.275,479,3.009,480,3.352,481,4.356,482,4.275,483,3.132,484,2.74,485,4.275,486,4.867,487,2.46,488,4.275,489,3.132,490,3.132,491,3.132,492,4.275,493,2.609,494,2.265,495,3.091,496,5.474,497,3.132,498,2.609,499,2.007,500,4.275,501,3.132,502,4.867,503,4.867,504,4.275]],["title/components/GameComponent.html",[0,0.565,220,0.97]],["body/components/GameComponent.html",[0,0.751,1,0.514,2,1.161,3,0.169,4,0.169,5,0.725,6,0.793,7,0.793,8,0.793,9,0.124,11,0.39,12,1.997,16,0.793,17,2.389,18,1.421,19,1.271,21,1.271,23,0.582,24,0.693,27,0.693,32,1.03,37,1.294,39,0.529,40,0.034,41,0.387,42,0.655,43,0.529,48,1.391,50,1.02,51,1.685,58,2.229,65,2.87,66,1.779,69,0.794,70,1.939,71,1.63,75,1.634,87,1.396,88,1.161,91,1.378,93,0.711,94,0.362,99,0.193,100,0.063,102,1.161,103,0.609,104,0.635,111,1.718,175,1.522,176,2.773,179,1.718,212,0.664,213,1.161,214,0.793,215,1.818,216,0.793,217,0.793,218,0.56,219,0.793,220,1.178,221,0.793,222,0.514,223,1.58,224,0.793,225,0.56,226,0.793,227,0.514,228,0.793,229,1.282,230,2.33,231,0.793,232,0.793,233,0.022,234,0.014,235,0.009,258,1.938,266,1.501,276,1.161,281,2,297,1.59,298,0.963,304,2.183,342,1.178,347,0.896,349,1.221,351,1.502,353,0.793,356,1.718,384,1.542,386,1.064,387,1.161,392,1.396,426,0.963,444,1.394,451,0.963,457,3.729,464,1.818,465,1.938,472,2.773,479,1.542,480,1.718,487,1.542,499,2.87,505,1.394,506,2.233,507,2.68,508,1.542,509,2.425,510,3.353,511,3.353,512,2.68,513,3.353,514,4.477,515,2.425,516,2.425,517,2.793,518,3.353,519,2.773,520,3.834,521,3.834,522,2.773,523,2.68,524,3.834,525,4.196,526,3.834,527,3.4,528,1.394,529,2.576,530,2.706,531,2.037,532,2.68,533,1.673,534,1.542,535,2.233,536,2.68,537,1.542,538,1.673,539,1.673,540,3.834,541,1.938,542,2.233,543,2.68,544,2.233,545,2.68,546,2.233,547,2.68,548,3.834,549,2.458,550,2.68,551,1.673,552,2.233,553,1.673,554,2.68,555,2.233,556,2.68,557,1.938,558,1.271,559,1.718,560,2.68,561,1.673,562,1.673,563,3.549,564,2.68,565,2.68,566,2.458,567,1.718,568,1.673,569,2.233,570,1.718,571,1.938,572,2.68,573,1.396,574,2.68,575,2.233,576,2.233,577,2.233,578,2.68,579,2.773,580,1.673,581,2.233,582,1.673,583,1.939,584,1.673,585,3.495,586,2.68,587,2.233,588,2.68,589,1.673,590,1.718,591,1.673,592,1.673,593,3.644,594,1.673,595,1.673,596,2.233,597,3.194,598,2.68,599,2.68,600,2.233,601,1.673,602,2.233,603,1.673,604,1.938,605,1.673,606,1.718,607,1.673,608,2.68,609,1.673,610,2.68,611,1.673,612,2.773,613,1.938,614,1.938,615,1.394,616,1.073,617,3.834,618,3.353,619,1.394,620,2.233,621,1.394,622,1.673,623,1.673,624,1.673,625,2.68,626,3.353,627,1.073,628,2.68,629,3.353,630,3.495,631,1.718,632,1.21,633,2.68,634,2.149,635,3.353,636,3.834,637,1.394,638,1.673,639,1.673,640,1.073,641,1.394,642,1.673,643,1.673,644,2.68,645,3.353,646,1.673,647,1.673,648,1.073,649,1.21,650,2.233,651,1.673,652,1.21,653,3.194,654,3.353,655,4.477,656,1.673,657,3.353,658,1.673,659,1.073,660,1.673,661,1.394,662,1.673,663,1.21]],["title/components/GameOverComponent.html",[0,0.565,222,0.97]],["body/components/GameOverComponent.html",[0,0.948,1,0.877,2,1.737,3,0.288,4,0.288,5,1.237,6,1.354,7,1.354,8,1.354,9,0.212,11,0.416,12,2.089,16,1.354,17,2.774,18,1.65,19,1.901,21,1.901,23,0.371,24,1.037,27,1.037,32,1.424,37,1.146,39,0.563,40,0.034,41,0.534,42,0.602,43,0.563,49,1.232,50,0.791,51,0.955,58,1.901,66,1.688,69,0.676,75,2.039,88,1.737,93,0.674,94,0.618,98,2.308,99,0.329,100,0.108,103,1.04,104,0.676,115,1.3,116,2.308,118,3.341,175,1.995,212,1.133,213,1.737,214,1.354,215,2.383,216,1.354,217,1.354,218,0.955,219,1.354,220,0.877,221,1.354,222,1.544,223,1.706,224,1.354,225,0.955,226,1.354,227,0.877,228,1.354,229,0.955,230,1.237,231,1.354,232,1.354,233,0.015,234,0.021,235,0.028,257,2.9,266,1.232,268,2.308,281,1.133,298,1.643,304,1.237,347,1.341,427,1.643,441,3.519,464,1.901,487,2.308,508,2.308,509,3.352,522,3.635,531,2.443,537,2.893,583,1.737,606,2.571,616,1.831,619,2.379,632,2.065,640,3.222,648,1.831,649,2.065,650,2.379,663,2.9,664,4.574,665,2.379,666,4.011,667,4.011,668,4.635,669,4.011,670,5.639,671,5.49,672,2.379,673,4.011,674,2.856,675,4.011,676,2.9,677,3.341,678,4.011,679,2.856,680,4.011,681,3.341,682,2.856,683,5.85,684,4.635,685,4.635,686,4.635,687,4.011,688,4.011,689,2.856,690,2.856,691,2.065,692,2.379,693,2.379,694,2.856,695,2.856,696,2.9,697,4.011,698,4.011,699,4.011,700,4.011,701,4.011]],["title/modules/MaterialModule.html",[411,1.644,424,1.816]],["body/modules/MaterialModule.html",[3,0.433,4,0.433,9,0.318,11,0.624,40,0.034,93,0.921,94,0.929,99,0.494,100,0.162,115,1.11,233,0.022,234,0.027,235,0.022,411,2.73,413,2.618,418,2.75,424,3.016,429,3.102,431,3.79,702,3.102,703,4.714,704,5.241,705,4.366,706,4.29,707,4.366,708,4.29,709,4.366,710,4.29,711,4.366,712,4.29,713,4.366,714,4.29,715,4.366,716,4.29,717,4.366,718,4.29,719,3.574,720,4.366,721,4.29,722,3.102]],["title/interfaces/PracticeQuestion.html",[341,1.367,354,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.328,4,0.328,9,0.241,11,0.473,23,0.422,24,1.134,40,0.034,41,0.536,42,0.422,48,1.536,49,0.998,50,0.641,55,1.541,69,1.353,71,1.184,91,1.564,93,0.638,99,0.374,100,0.166,102,1.899,104,1.313,108,1.693,115,1.134,162,1.693,163,2.975,167,2.084,174,2.084,233,0.023,234,0.023,235,0.017,266,0.998,276,1.408,281,1.29,341,2.402,342,1.703,343,2.35,344,1.87,345,2.084,346,3.587,347,1.659,348,3.191,349,1.806,350,3.18,351,1.478,352,2.107,353,1.541,354,3.056,355,3.17,356,2.084,357,2.35,358,2.35,359,1.693,360,3.18,361,2.149,362,2.35,363,4.436,364,2.107,365,2.35,366,2.35,367,3.17,368,2.35,369,1.87,370,2.084,371,1.693,372,3.041,373,1.87,374,2.35,375,2.35,376,2.35,377,2.3,378,2.35,379,2.35,380,2.35,381,2.35,382,2.35,383,2.35,384,2.523,385,2.084,386,1.29,387,1.408,388,2.35,389,3.587,390,2.35,391,2.35,392,1.693,393,2.35,394,1.87,395,2.35,396,2.35,397,2.35,398,2.35,399,2.35,400,2.35,401,2.35,402,2.35,403,2.35,404,1.87,405,2.35,406,2.35]],["title/classes/Question.html",[100,0.119,351,0.817]],["body/classes/Question.html",[3,0.408,4,0.408,9,0.3,11,0.735,23,0.526,24,1.307,32,1.552,37,1.25,39,0.798,40,0.033,41,0.408,42,0.75,43,0.798,69,1.511,99,0.465,100,0.153,233,0.021,234,0.026,235,0.021,351,1.683,364,2.488,372,3.266,462,2.107,652,3.986,723,3.369,724,2.925,725,3.369,726,4.534,727,4.044,728,4.044,729,5.053,730,5.512,731,5.512,732,5.512,733,4.592,734,4.044,735,4.044,736,4.044]],["title/classes/QuestionPreparer.html",[100,0.119,737,2.283]],["body/classes/QuestionPreparer.html",[3,0.319,4,0.319,9,0.234,11,0.46,18,1.213,23,0.411,27,1.358,37,1.058,39,0.964,40,0.034,41,0.493,42,0.635,43,0.964,48,1.499,50,0.623,51,1.057,61,3.536,69,1.373,76,0.971,82,2.757,91,1.598,93,0.626,99,0.364,100,0.185,102,2.454,104,1.019,110,1.646,115,1.565,119,2.285,134,2.633,233,0.016,234,0.022,235,0.016,304,1.369,342,1.612,344,3.021,347,1.057,348,2.475,349,1.151,351,1.465,353,1.498,364,2.083,377,2.454,384,3.021,462,1.646,464,2.039,465,4.325,506,3.584,593,3.111,631,2.757,634,2.026,737,3.111,738,2.633,739,5.249,740,2.757,741,4.302,742,4.302,743,4.302,744,3.16,745,4.302,746,5.249,747,3.584,748,3.584,749,4.302,750,3.16,751,3.584,752,4.89,753,4.302,754,3.16,755,4.302,756,4.302,757,4.575,758,3.16,759,3.584,760,2.285,761,3.111,762,3.16,763,3.16,764,3.16,765,3.16,766,3.16,767,3.16,768,3.16,769,3.16,770,3.16,771,3.16,772,3.584,773,3.16,774,3.16,775,3.16,776,4.302,777,3.16,778,4.302,779,3.16,780,3.16,781,3.16,782,3.16,783,3.16,784,3.16,785,3.16,786,4.302,787,4.302,788,3.16,789,3.16,790,3.16,791,3.16,792,3.16,793,2.026,794,2.285,795,2.633,796,2.633,797,2.285,798,2.633,799,3.16,800,3.16,801,3.16,802,3.16]],["title/injectables/QuestionService.html",[236,1.149,530,1.816]],["body/injectables/QuestionService.html",[3,0.339,4,0.339,9,0.249,11,0.489,15,2.335,23,0.437,24,1.159,27,1.159,32,1.549,37,1.165,39,0.884,40,0.034,41,0.452,42,0.729,43,0.884,48,1.159,49,1.377,50,0.884,76,1.032,86,2.335,91,0.947,93,0.857,94,0.727,99,0.387,100,0.191,103,1.223,104,1.275,107,1.942,115,1.159,233,0.017,234,0.023,235,0.017,236,1.632,237,1.933,239,2.873,248,2.153,249,3.45,251,2.125,263,2.658,266,1.377,284,2.429,287,2.429,289,1.933,290,1.75,291,2.153,293,2.153,294,1.75,296,1.75,297,1.593,299,1.933,300,1.75,309,3.45,311,3.892,312,2.391,342,1.377,349,1.632,351,1.45,353,1.593,392,2.335,484,2.873,519,3.892,530,2.579,531,2.551,573,2.335,583,2.498,724,3.241,748,3.734,803,2.799,804,3.241,805,5.044,806,4.482,807,4.482,808,4.482,809,5.382,810,3.36,811,4.482,812,3.734,813,3.36,814,3.36,815,3.734,816,4.482,817,3.36,818,2.799,819,3.36,820,3.36,821,3.36,822,4.482,823,3.36,824,5.382,825,3.36,826,4.202,827,3.36,828,3.36]],["title/classes/QuestionStore.html",[100,0.119,359,1.644]],["body/classes/QuestionStore.html",[3,0.267,4,0.267,9,0.196,11,0.384,23,0.343,24,0.982,27,0.982,31,2.744,37,1.291,39,1.014,40,0.034,41,0.595,42,0.668,43,1.014,48,1.596,49,0.812,50,1.087,51,1.485,55,1.799,69,1.336,70,1.145,71,1.617,91,1.721,93,0.552,99,0.304,100,0.168,102,2.103,104,1.218,108,1.376,115,0.982,162,1.376,163,2.992,167,2.433,174,2.433,233,0.02,234,0.02,235,0.014,266,1.166,276,1.644,281,1.506,341,2.103,342,1.491,344,3.462,345,1.694,346,2.744,347,1.269,348,2.184,349,1.382,350,2.433,351,1.256,352,2.188,353,1.253,354,2.184,355,1.911,356,2.433,357,2.744,358,2.744,359,1.977,360,3.43,361,2.318,362,3.211,363,4.439,364,2.28,365,3.211,366,3.211,367,3.717,368,2.744,369,2.184,370,2.433,371,1.977,372,2.992,373,2.555,374,1.911,375,1.911,376,1.911,377,2.444,378,1.911,379,1.911,380,1.911,381,1.911,382,1.911,383,1.911,384,2.793,385,2.433,386,1.506,387,1.644,388,2.744,389,3.211,390,1.911,391,1.911,392,1.977,393,2.744,394,2.555,395,2.744,396,1.911,397,1.911,398,1.911,399,1.911,400,1.911,401,1.911,402,1.911,403,1.911,404,1.52,405,1.911,406,1.911,462,1.376,519,1.911,829,3.795,830,3.795,831,2.642,832,2.642,833,2.642,834,2.642,835,2.642,836,2.642,837,2.642,838,2.642,839,2.642,840,2.642,841,2.642,842,2.642,843,2.642,844,2.642,845,2.642,846,2.642,847,2.642]],["title/components/QuestionsComponent.html",[0,0.565,225,1.056]],["body/components/QuestionsComponent.html",[0,0.956,1,0.73,2,1.522,3,0.24,4,0.24,5,1.03,6,1.127,7,1.127,8,1.127,9,0.176,11,0.346,16,1.127,17,2.652,18,1.578,19,1.666,21,1.666,23,0.67,24,0.909,27,0.909,32,1.284,37,1.232,39,0.824,40,0.034,41,0.497,42,0.693,43,0.824,48,1.334,50,0.824,51,1.398,58,1.666,59,2.541,65,2.96,69,0.832,72,2.253,76,1.079,87,2.405,88,1.522,93,0.751,94,0.515,99,0.274,100,0.09,103,0.866,104,0.563,110,1.238,111,3.159,112,3.512,115,0.615,136,2.541,176,3.34,193,1.981,198,1.524,212,0.944,213,1.522,214,1.127,215,2.189,216,1.127,217,1.127,218,0.795,219,1.127,220,0.73,221,1.127,222,0.73,223,0.671,224,1.127,225,1.544,226,1.127,227,0.73,228,1.127,229,0.795,230,1.03,231,1.127,232,1.127,233,0.024,234,0.018,235,0.012,261,3.34,266,1.419,268,2.022,276,1.522,290,1.238,297,1.127,304,1.03,342,1.813,349,1.794,351,1.447,353,1.127,364,1.955,464,1.666,508,2.022,515,3.859,516,3.563,517,4.105,530,2.968,534,1.368,549,2.253,563,2.96,567,1.524,583,2.135,596,2.928,600,2.928,602,2.928,615,1.981,630,2.928,653,1.981,726,2.541,757,2.928,772,1.981,812,1.981,848,1.981,849,4.18,850,4.18,851,4.18,852,3.514,853,4.618,854,3.514,855,2.928,856,2.928,857,4.18,858,2.378,859,3.514,860,2.378,861,2.378,862,2.378,863,2.378,864,3.483,865,2.378,866,3.514,867,2.378,868,3.514,869,3.514,870,2.022,871,3.514,872,3.514,873,3.514,874,4.618,875,2.378,876,4.18,877,3.514,878,2.378,879,2.928,880,3.514,881,3.514,882,3.514,883,3.514,884,2.253,885,3.023,886,4.105,887,2.541,888,2.541,889,3.483,890,4.18,891,2.378,892,1.981,893,2.378,894,2.378,895,2.378,896,3.514,897,2.378,898,3.514,899,3.514,900,2.378,901,2.378,902,1.368,903,2.378,904,2.378,905,2.378,906,2.378,907,2.378,908,2.378,909,2.378,910,2.378,911,2.378,912,2.378,913,3.514,914,2.378,915,2.378,916,2.378,917,2.378,918,2.378,919,2.378,920,2.378,921,2.378,922,2.378,923,2.378,924,2.378,925,3.514,926,2.378,927,3.514,928,3.514,929,2.378,930,2.378,931,1.981,932,2.378]],["title/guards/RegisterGuard.html",[452,2.023,933,2.023]],["body/guards/RegisterGuard.html",[3,0.406,4,0.406,9,0.299,11,0.586,23,0.523,27,1.303,32,1.689,37,1.09,39,0.794,40,0.034,41,0.406,42,0.523,43,0.794,50,0.794,66,2.098,91,1.135,93,0.8,94,0.871,99,0.463,100,0.152,103,1.465,104,1.193,223,1.625,233,0.021,234,0.026,235,0.021,236,1.834,266,1.547,268,2.899,281,1.597,299,2.316,300,2.096,304,1.743,451,2.316,452,3.229,455,5.043,479,2.899,480,3.229,508,2.316,529,3.534,531,2.622,537,2.899,559,3.229,616,2.58,637,4.197,649,2.91,659,2.58,672,3.352,933,3.229,934,3.352,935,3.352,936,5.037,937,5.037,938,5.037,939,4.024,940,4.197,941,4.024,942,5.037,943,4.197,944,4.024]],["title/components/SignupComponent.html",[0,0.565,227,0.97]],["body/components/SignupComponent.html",[0,0.809,1,0.599,2,1.31,3,0.197,4,0.197,5,0.844,6,0.924,7,0.924,8,0.924,9,0.145,11,0.284,12,1.575,16,0.924,17,2.508,18,1.492,19,1.433,21,1.433,23,0.253,24,0.782,27,0.782,30,3.476,32,1.137,37,1.17,39,0.384,40,0.034,41,0.534,42,0.393,43,0.384,48,1.079,50,0.823,51,1.395,56,2.75,58,2.265,65,3.063,66,1.519,70,1.956,71,1.644,75,2.057,76,1.583,77,3.085,79,3.762,82,3.063,88,1.31,91,0.853,93,0.695,94,0.422,96,1.249,99,0.224,100,0.074,103,0.71,115,0.782,154,3.476,156,1.624,163,2.489,175,2.045,189,2.518,195,1.938,211,3.476,212,0.774,213,1.31,214,0.924,215,1.978,216,0.924,217,0.924,218,0.652,219,0.924,220,0.599,221,0.924,222,0.599,223,1.552,224,0.924,225,0.652,226,0.924,227,1.282,228,0.924,229,0.652,230,0.844,231,0.924,232,0.924,233,0.01,234,0.016,235,0.01,257,2.186,266,1.583,281,1.978,298,1.122,304,1.31,332,2.518,342,0.929,347,1.011,349,1.101,351,0.782,361,2.232,377,1.31,451,1.122,456,4.772,464,1.978,468,3.017,472,2.186,480,2.675,484,1.938,487,1.74,499,2.675,508,1.74,509,2.678,522,3.017,527,3.909,528,1.624,529,2.75,531,2.159,537,1.74,541,2.186,546,2.518,549,1.938,558,1.978,559,1.938,566,1.938,567,2.675,571,2.186,573,1.575,579,3.726,583,2.07,597,2.518,604,3.017,606,1.938,616,1.249,621,2.518,631,2.675,632,1.409,634,1.938,640,2.675,641,2.518,648,1.938,659,1.938,692,2.518,696,3.605,793,1.938,794,2.186,855,3.476,870,2.401,884,2.675,940,2.518,945,1.624,946,2.186,947,3.023,948,3.909,949,3.703,950,3.023,951,3.703,952,3.703,953,4.516,954,3.703,955,4.173,956,3.195,957,3.023,958,1.949,959,2.518,960,3.023,961,1.949,962,4.173,963,1.949,964,1.949,965,3.023,966,1.949,967,2.518,968,4.173,969,2.518,970,1.949,971,3.023,972,1.949,973,1.949,974,3.476,975,1.949,976,1.949,977,1.949,978,1.949,979,1.949,980,3.023,981,3.023,982,3.023,983,1.949,984,1.949,985,1.949,986,1.949,987,1.949,988,1.949,989,1.949,990,1.949,991,1.949,992,1.949,993,1.624,994,1.624,995,3.703,996,3.023,997,3.023,998,3.023,999,1.949,1000,1.949,1001,4.778,1002,3.023,1003,3.023,1004,4.173,1005,3.023,1006,3.023,1007,2.186,1008,2.518,1009,3.023,1010,3.023,1011,2.186,1012,4.173,1013,3.017,1014,2.518,1015,4.173,1016,2.518,1017,3.023,1018,2.518,1019,2.518,1020,4.173,1021,3.023,1022,1.624,1023,2.186,1024,2.518,1025,2.518,1026,3.017,1027,3.023,1028,4.778,1029,3.023,1030,3.023,1031,2.518,1032,2.518,1033,3.023,1034,3.023,1035,3.023,1036,2.518,1037,3.023,1038,1.949,1039,1.949]],["title/classes/Team.html",[75,1.056,100,0.119]],["body/classes/Team.html",[3,0.308,4,0.308,9,0.226,11,0.611,23,0.396,24,1.085,32,1.289,37,1.285,39,0.601,40,0.033,41,0.522,42,0.771,43,1.215,56,2.761,58,2.814,69,1.449,75,2.161,87,1.588,99,0.351,100,0.115,107,2.571,175,2.224,223,1.58,233,0.016,234,0.022,235,0.022,312,2.275,325,3.47,347,1.403,351,1.241,352,1.904,372,3.339,377,2.079,387,1.32,462,1.588,515,4.052,516,3.47,583,2.787,590,3.076,652,4.229,696,4.052,967,4.517,969,4.668,1032,3.998,1040,2.539,1041,4.668,1042,5.604,1043,5.604,1044,3.048,1045,3.048,1046,4.196,1047,4.799,1048,4.799,1049,5.604,1050,4.799,1051,4.799,1052,3.998,1053,3.048,1054,3.048,1055,3.048,1056,3.048,1057,3.048,1058,3.048,1059,3.048,1060,3.048]],["title/injectables/TeamService.html",[236,1.149,531,1.367]],["body/injectables/TeamService.html",[3,0.256,4,0.256,9,0.188,11,0.369,15,1.919,23,0.33,24,0.953,27,0.953,32,1.333,37,1.281,39,1.074,40,0.034,41,0.549,42,0.739,43,1.074,49,1.774,50,1.154,51,1.232,55,2.502,66,1.342,69,1.128,71,1.922,75,2.185,76,1.463,86,1.919,91,1.669,93,0.768,94,0.549,99,0.292,100,0.164,101,2.664,103,0.923,104,1.368,107,2.359,115,0.656,116,2.12,223,1.039,233,0.013,234,0.019,235,0.013,236,1.342,237,1.459,239,2.362,244,3.967,248,1.626,249,3.053,251,1.747,263,2.696,266,1.132,268,3.133,276,2.063,289,1.459,290,1.321,291,1.626,293,1.626,294,1.321,296,1.321,297,1.202,298,1.459,299,1.459,300,1.321,309,2.781,312,1.747,347,1.232,361,2.535,386,1.89,392,1.919,464,1.747,487,2.12,531,1.596,541,2.664,590,2.362,606,2.362,627,3.053,648,2.362,804,2.664,902,3.037,993,2.113,1041,3.069,1061,2.113,1062,4.762,1063,4.762,1064,3.684,1065,3.069,1066,3.069,1067,3.684,1068,3.684,1069,2.536,1070,2.536,1071,2.536,1072,3.684,1073,3.684,1074,2.536,1075,2.536,1076,3.684,1077,3.069,1078,3.684,1079,3.684,1080,2.536,1081,3.684,1082,2.536,1083,3.684,1084,3.684,1085,2.536,1086,3.684,1087,2.536,1088,3.684,1089,2.536,1090,2.536,1091,2.536,1092,1.834,1093,3.684,1094,3.684,1095,4.339,1096,2.536,1097,2.536,1098,4.339,1099,2.536,1100,2.536,1101,2.536,1102,2.536,1103,2.536]],["title/injectables/TimeService.html",[236,1.149,956,2.023]],["body/injectables/TimeService.html",[3,0.412,4,0.412,9,0.303,11,0.595,15,2.649,23,0.531,27,1.315,32,1.701,37,1.101,39,0.806,40,0.034,41,0.412,42,0.531,43,0.806,48,1.315,50,0.806,86,2.649,93,0.867,94,0.884,99,0.47,100,0.155,103,1.488,104,0.968,175,2.299,223,1.434,233,0.021,234,0.026,235,0.021,236,1.852,237,2.351,239,3.26,248,2.619,249,3.714,251,2.411,263,2.625,272,2.926,289,2.351,290,2.128,291,2.619,293,2.619,294,2.128,296,2.128,297,1.937,299,2.351,300,2.128,309,2.619,361,2.203,427,2.926,558,2.411,804,3.677,956,3.26,1026,3.677,1104,3.404,1105,5.794,1106,4.086,1107,4.086,1108,4.237,1109,5.085,1110,5.085,1111,4.086]],["title/components/TimerComponent.html",[0,0.565,229,1.056]],["body/components/TimerComponent.html",[0,0.774,1,0.774,2,1.589,3,0.254,4,0.254,5,1.092,6,1.195,7,1.195,8,1.195,9,0.187,11,0.367,16,1.195,17,2.692,18,1.601,19,1.739,21,1.739,23,0.327,24,0.949,27,0.949,31,2.652,37,1.291,39,0.497,40,0.034,41,0.436,42,0.684,43,0.497,50,1.138,51,1.929,59,2.652,69,0.869,70,1.092,71,0.918,72,2.351,76,0.774,88,1.589,91,1.601,93,0.367,94,0.545,99,0.29,100,0.095,104,0.869,110,1.313,175,2.157,178,1.822,198,1.615,212,1,213,1.589,214,1.195,215,2.251,216,1.195,217,1.195,218,0.843,219,1.195,220,0.774,221,1.195,222,0.774,223,0.711,224,1.195,225,0.843,226,1.195,227,0.774,228,1.195,229,1.588,230,2.681,231,1.195,232,1.195,233,0.013,234,0.019,235,0.013,369,1.45,377,2.057,386,1.455,426,2.732,476,4.226,484,2.351,527,4.226,534,1.45,542,3.956,552,3.956,558,2.251,563,3.044,570,3.234,575,3.055,583,2.46,585,2.099,587,3.956,593,2.652,620,3.602,659,2.771,661,3.602,676,3.93,691,1.822,724,2.652,864,3.602,870,1.45,1011,2.652,1019,3.055,1108,2.099,1112,2.099,1113,3.667,1114,3.667,1115,3.667,1116,4.324,1117,3.667,1118,5.435,1119,4.324,1120,4.748,1121,4.748,1122,3.956,1123,5.046,1124,4.748,1125,2.52,1126,3.667,1127,2.52,1128,2.52,1129,3.667,1130,5.266,1131,2.52,1132,4.748,1133,2.52,1134,4.748,1135,3.667,1136,4.748,1137,2.52,1138,2.52,1139,2.52,1140,2.52,1141,2.52,1142,2.52,1143,3.667,1144,2.52,1145,2.52,1146,2.52,1147,2.52,1148,2.52,1149,2.52,1150,2.52,1151,1.822,1152,4.748,1153,4.324,1154,4.748,1155,2.52,1156,2.52,1157,2.52,1158,2.52,1159,2.52,1160,2.52,1161,2.52,1162,2.52,1163,2.52,1164,2.52]],["title/coverage.html",[1165,3.581]],["body/coverage.html",[0,1.029,1,0.94,9,0.227,10,2.549,18,0.863,34,1.961,40,0.034,42,0.398,75,1.023,76,0.94,100,0.205,198,4.212,218,1.023,220,0.94,222,0.94,225,1.023,227,0.94,229,1.023,233,0.016,234,0.022,235,0.016,236,1.886,238,2.549,263,1.995,294,1.594,295,2.213,296,1.594,312,1.451,341,1.823,342,0.94,344,2.98,345,3.082,351,0.791,352,1.214,354,1.761,359,2.191,373,1.761,386,2.554,407,2.549,413,1.325,441,1.961,452,1.961,463,2.549,476,3.745,495,2.213,505,2.549,529,2.767,530,1.761,531,1.325,558,1.451,612,2.213,613,2.213,614,2.213,664,2.549,665,2.549,702,2.213,723,2.549,737,2.213,738,2.549,803,2.549,848,2.549,887,2.213,888,2.213,933,1.961,935,2.549,945,2.549,956,1.961,1040,2.549,1061,2.549,1092,2.213,1104,2.549,1112,2.549,1165,2.549,1166,2.549,1167,3.06,1168,3.06,1169,6.482,1170,4.809,1171,4.207,1172,4.233,1173,3.06,1174,3.06,1175,3.06,1176,3.06,1177,4.207,1178,4.207,1179,2.549,1180,3.505,1181,2.549,1182,2.549,1183,3.505,1184,3.505,1185,2.549,1186,4.207,1187,4.674,1188,2.549,1189,2.549,1190,2.549,1191,2.549,1192,2.549,1193,3.06,1194,4.207,1195,3.926,1196,2.549,1197,2.213,1198,2.549,1199,2.549,1200,3.505,1201,3.505,1202,2.549,1203,2.549,1204,3.06,1205,3.06]],["title/dependencies.html",[414,2.183,1206,2.641]],["body/dependencies.html",[40,0.034,49,1.337,94,0.942,96,2.79,97,3.823,98,3.042,233,0.022,234,0.027,235,0.022,290,2.267,414,2.505,451,2.505,493,3.626,494,3.147,759,3.626,826,3.626,885,3.823,892,3.626,1207,6.302,1208,4.353,1209,5.287,1210,4.353,1211,4.353,1212,4.353,1213,4.353,1214,3.626,1215,4.353,1216,4.353,1217,3.823,1218,4.353,1219,4.353,1220,4.353,1221,4.405,1222,4.353,1223,4.353,1224,4.353,1225,4.405,1226,4.353,1227,3.626,1228,4.353,1229,4.353,1230,4.353,1231,4.353,1232,4.353,1233,3.626,1234,4.353,1235,4.353,1236,4.353,1237,4.353]],["title/miscellaneous/functions.html",[1238,1.693,1239,3.161]],["body/miscellaneous/functions.html",[23,0.571,39,1.128,40,0.031,41,0.577,42,0.571,43,1.128,70,1.903,102,1.903,116,2.528,233,0.023,234,0.027,235,0.023,251,2.082,263,2.884,266,1.349,272,2.528,276,1.903,294,2.769,352,1.743,371,2.288,394,3.059,404,3.29,761,3.176,797,3.844,870,2.528,879,3.659,902,2.528,1007,3.176,1172,3.176,1195,3.176,1196,4.763,1197,3.176,1200,3.659,1201,4.763,1202,4.429,1203,4.429,1217,3.844,1238,2.816,1239,3.659,1240,5.316,1241,3.659,1242,3.659,1243,4.392,1244,4.392,1245,5.316,1246,5.316,1247,4.392,1248,4.392,1249,4.392,1250,3.659,1251,2.816,1252,4.392,1253,2.816]],["title/index.html",[23,0.343,162,1.376,570,1.693]],["body/index.html",[0,0.923,4,0.354,9,0.342,18,1.302,40,0.024,41,0.354,48,1.194,49,1.794,76,1.079,112,2.251,113,2.926,116,2.656,119,3.338,136,2.54,233,0.018,234,0.024,235,0.024,272,2.021,349,1.279,352,2.173,360,2.251,364,1.394,371,1.829,385,2.251,387,2.234,410,2.926,426,2.021,427,2.021,534,2.021,535,2.926,557,2.54,558,2.188,566,3.511,573,1.829,740,3.743,760,2.54,798,2.926,1022,2.926,1023,2.54,1024,2.926,1031,2.926,1122,2.926,1151,2.54,1217,2.54,1251,2.251,1253,2.251,1254,5.156,1255,3.512,1256,3.729,1257,5.156,1258,3.512,1259,3.512,1260,6.289,1261,2.926,1262,5.953,1263,2.926,1264,3.845,1265,2.926,1266,3.512,1267,3.512,1268,3.512,1269,2.926,1270,3.512,1271,4.739,1272,3.512,1273,2.926,1274,3.512,1275,5.953,1276,4.296,1277,3.512,1278,4.865,1279,3.512,1280,2.926,1281,3.512,1282,3.512,1283,3.512,1284,3.845,1285,3.845,1286,4.563,1287,2.54,1288,4.616,1289,3.845,1290,3.512,1291,3.512,1292,3.512,1293,3.512,1294,4.296,1295,3.512,1296,2.926,1297,4.616,1298,3.512,1299,2.926,1300,3.512,1301,2.926,1302,2.926,1303,2.926,1304,5.156,1305,3.512,1306,3.512,1307,4.616,1308,3.512,1309,4.616,1310,2.926,1311,3.512,1312,3.512,1313,3.512,1314,3.512,1315,3.512,1316,3.512,1317,3.512,1318,4.616,1319,4.616,1320,4.616,1321,3.512,1322,3.512,1323,3.512,1324,3.512,1325,2.926,1326,4.616,1327,3.512,1328,4.616,1329,3.512,1330,3.512,1331,3.512,1332,3.512,1333,3.512,1334,3.512,1335,3.512,1336,3.845]],["title/modules.html",[413,1.862]],["body/modules.html",[40,0.029,98,2.857,168,4.136,195,3.663,233,0.026,234,0.029,235,0.026,412,3.182,413,2.151,423,2.857,424,2.857,1337,4.965,1338,6.018,1339,5.715]],["title/overview.html",[1340,3.581]],["body/overview.html",[1,1.735,2,1.852,40,0.033,212,1.696,218,2.081,220,1.735,222,1.735,225,1.889,227,1.735,229,1.889,233,0.022,234,0.027,235,0.022,237,2.46,343,3.091,411,2.227,412,4.201,413,1.852,414,2.46,415,3.561,416,3.561,417,3.561,418,2.74,419,3.561,420,3.561,421,3.561,422,3.561,423,3.251,424,3.251,425,4.357,426,2.46,427,2.46,450,2.227,462,2.227,631,2.74,634,2.74,793,2.74,794,3.091,795,3.561,796,3.561,933,2.74,1013,3.091,1340,3.561]],["title/routes.html",[450,2.239]],["body/routes.html",[40,0.03,233,0.026,234,0.03,235,0.026,450,2.657]],["title/todo.html",[110,1.376,162,1.376,570,1.693]],["body/todo.html",[0,0.891,3,0.246,5,1.056,12,1.27,14,2.711,15,1.865,18,1.196,40,0.029,41,0.361,48,1.391,49,1.529,50,0.481,55,1.156,56,2.06,58,1.697,60,2.031,61,2.589,66,1.813,72,1.563,75,1.665,76,1.436,78,1.563,86,1.27,89,2.982,92,1.403,101,3.38,102,1.551,107,1.551,108,1.27,110,3.377,127,2.589,149,2.031,151,2.031,153,2.031,157,2.031,160,2.031,163,1.27,169,2.031,170,2.031,171,2.031,175,1.421,178,1.763,179,2.295,181,2.031,186,1.563,195,1.563,223,1.196,230,1.838,233,0.013,234,0.018,235,0.013,251,1.156,258,1.763,261,1.763,263,1.697,272,2.06,325,1.763,341,1.056,342,0.749,347,0.815,350,1.563,351,1.346,352,1.683,361,1.551,364,0.968,369,2.441,370,1.563,371,2.209,386,0.968,387,1.551,394,1.403,404,2.441,414,1.403,450,1.27,475,2.982,479,1.403,481,2.031,498,2.031,534,2.06,537,1.403,544,2.031,549,1.563,557,1.763,559,2.295,563,1.563,566,1.563,567,2.295,569,2.031,573,1.865,581,2.982,583,1.838,590,1.563,627,1.563,693,2.031,719,2.031,722,1.763,725,2.031,733,2.031,740,2.996,761,1.763,793,1.563,797,1.763,856,2.031,870,1.403,884,2.295,885,1.763,886,2.031,889,2.031,902,2.69,934,2.031,943,2.031,946,1.763,948,2.589,959,2.982,974,2.031,994,2.031,1007,2.589,1008,2.031,1014,2.031,1018,2.982,1023,3.068,1025,2.031,1036,2.031,1052,2.031,1077,2.031,1151,2.589,1166,2.031,1214,2.031,1225,2.982,1227,2.982,1250,2.031,1251,1.563,1253,1.563,1256,2.589,1261,2.031,1263,2.031,1264,2.982,1265,3.534,1269,2.982,1273,2.031,1276,2.982,1278,2.031,1284,2.031,1285,2.982,1286,3.534,1287,2.589,1289,2.031,1294,2.031,1296,2.031,1301,2.031,1302,2.031,1303,2.031,1336,2.031,1341,2.438,1342,2.438,1343,2.438,1344,2.438,1345,2.438,1346,2.438,1347,2.438,1348,2.982,1349,2.438,1350,2.438,1351,3.58,1352,3.58,1353,2.438,1354,2.438,1355,2.031,1356,2.438,1357,2.031,1358,2.438,1359,3.58,1360,2.438,1361,2.438,1362,2.438,1363,2.438,1364,2.438,1365,2.438,1366,2.438,1367,2.438,1368,2.438,1369,2.438,1370,2.438,1371,2.438,1372,2.438,1373,3.58,1374,2.982,1375,2.438,1376,2.438,1377,2.438,1378,2.031,1379,3.58,1380,2.438,1381,2.438,1382,3.58,1383,3.58,1384,2.438,1385,5.379,1386,2.438,1387,2.031,1388,2.031,1389,2.438,1390,3.58,1391,3.58,1392,2.438,1393,2.438,1394,2.438,1395,2.438,1396,2.438,1397,2.438,1398,2.438,1399,2.438,1400,2.438,1401,2.438,1402,3.58,1403,2.438,1404,3.58,1405,2.438,1406,2.438,1407,3.58,1408,2.438,1409,2.438,1410,2.438,1411,3.58,1412,2.438,1413,2.438,1414,2.438,1415,4.979,1416,2.438,1417,2.982,1418,3.58,1419,2.438,1420,2.438,1421,2.438,1422,2.438,1423,2.438,1424,2.438,1425,2.438,1426,2.031,1427,2.438,1428,2.438,1429,3.58,1430,2.438,1431,2.438,1432,4.242,1433,2.438,1434,2.438,1435,2.438,1436,2.438,1437,2.438,1438,2.438,1439,2.438,1440,2.438,1441,2.438,1442,2.438,1443,2.438,1444,2.438,1445,2.438,1446,2.438,1447,2.438,1448,2.438,1449,2.031,1450,2.438,1451,2.438,1452,2.438,1453,2.438,1454,2.438,1455,2.438,1456,2.438,1457,2.438,1458,2.438,1459,2.438,1460,2.438,1461,2.438,1462,2.438,1463,2.438,1464,3.58,1465,2.438,1466,2.438,1467,2.438,1468,2.438,1469,2.438,1470,2.438,1471,2.438,1472,2.438,1473,3.58,1474,2.438,1475,2.438,1476,2.438,1477,2.438,1478,2.438,1479,2.438,1480,3.58,1481,2.438,1482,2.031,1483,2.438,1484,2.438,1485,2.438,1486,2.438,1487,2.438,1488,2.438,1489,2.438,1490,2.438,1491,2.438,1492,2.438,1493,2.438,1494,2.438,1495,2.438,1496,2.438,1497,2.438,1498,2.438,1499,2.438,1500,2.438,1501,2.031,1502,3.58,1503,3.58,1504,2.438,1505,2.438,1506,2.438,1507,3.58,1508,3.58,1509,2.438,1510,2.438,1511,2.438,1512,2.438,1513,2.438,1514,2.438,1515,2.438,1516,2.031]],["title/miscellaneous/variables.html",[1238,1.693,1517,3.161]],["body/miscellaneous/variables.html",[9,0.137,14,1.863,18,0.817,23,0.376,40,0.034,41,0.186,42,0.768,48,1.139,49,0.89,66,0.672,69,0.847,70,2.647,71,2.208,75,0.617,76,1.099,78,2.292,81,1.335,82,1.857,87,1.863,88,0.8,92,1.667,107,0.8,111,1.857,112,1.183,141,1.538,142,1.538,175,1.854,179,1.857,186,1.183,213,0.8,233,0.009,234,0.015,235,0.009,251,0.875,281,0.732,283,2.979,284,2.095,287,2.095,295,2.095,296,1.509,304,0.8,307,1.538,311,2.929,317,1.335,341,0.8,342,1.244,347,1.562,348,3.063,349,0.672,351,1.427,352,1.854,359,1.863,361,0.8,364,2.153,373,2.058,386,0.732,387,0.8,413,1.549,450,0.961,454,1.538,468,1.335,479,1.667,494,2.586,495,2.929,499,1.183,529,3.293,555,1.538,558,2.215,571,2.095,573,0.961,576,1.538,577,1.538,579,1.335,604,1.335,612,2.095,613,2.095,614,2.095,627,1.857,640,1.183,663,2.586,676,2.586,677,1.538,681,1.538,691,1.335,702,1.335,703,1.538,705,1.538,707,1.538,709,1.538,711,1.538,713,1.538,715,1.538,717,1.538,720,1.538,722,1.335,726,3.849,740,2.822,747,1.538,751,1.538,760,2.095,815,1.538,818,1.538,884,1.857,887,2.095,888,2.095,902,2.058,931,2.979,946,1.335,948,1.335,1011,1.335,1013,1.335,1016,1.538,1026,2.095,1065,2.414,1066,2.414,1092,2.095,1172,1.335,1179,1.538,1180,4.07,1181,1.538,1182,1.538,1183,3.375,1184,1.538,1185,2.414,1187,1.538,1188,2.414,1189,2.414,1190,2.414,1191,2.414,1192,1.538,1195,1.335,1197,2.095,1198,1.538,1199,1.538,1221,1.538,1233,1.538,1238,1.183,1241,4.66,1242,3.375,1251,2.292,1253,1.857,1256,1.335,1271,1.538,1280,1.538,1287,1.335,1299,2.979,1310,1.538,1325,1.538,1348,1.538,1355,1.538,1357,2.414,1374,1.538,1378,1.538,1387,1.538,1388,1.538,1417,3.375,1426,1.538,1449,1.538,1482,1.538,1501,1.538,1516,2.414,1517,1.538,1518,1.846,1519,1.846,1520,1.846,1521,1.846,1522,2.897,1523,1.846,1524,1.846,1525,1.846,1526,1.846,1527,1.846,1528,1.846,1529,1.846,1530,1.846,1531,1.846,1532,1.846,1533,1.846,1534,1.846,1535,1.846,1536,1.846,1537,1.846,1538,1.846,1539,1.846,1540,1.846,1541,1.846,1542,1.846,1543,1.846,1544,1.846,1545,1.846,1546,1.846,1547,1.846,1548,2.897,1549,1.846,1550,2.897,1551,1.846,1552,1.846,1553,2.897,1554,1.846,1555,1.846,1556,1.846,1557,1.846,1558,1.846,1559,1.846,1560,1.846,1561,1.846,1562,1.846,1563,1.846,1564,1.846,1565,1.846,1566,2.897,1567,1.846,1568,1.846,1569,1.846,1570,1.846,1571,1.846,1572,1.846,1573,1.846,1574,1.846,1575,1.846,1576,1.846,1577,1.846,1578,1.846,1579,1.846,1580,1.846,1581,1.846,1582,3.576,1583,1.846,1584,2.897,1585,1.846,1586,1.846,1587,2.897,1588,1.846,1589,1.846,1590,1.846,1591,1.846,1592,1.846,1593,1.846,1594,1.846,1595,1.846,1596,2.897,1597,1.846,1598,1.846,1599,1.846,1600,2.897,1601,1.846,1602,1.846,1603,1.846,1604,1.846,1605,1.846,1606,1.846,1607,1.846,1608,1.846,1609,1.846,1610,1.846,1611,1.846,1612,1.846,1613,1.846,1614,1.846,1615,2.897,1616,1.846,1617,1.846,1618,2.897,1619,1.846,1620,1.846,1621,1.846,1622,1.846,1623,1.846,1624,1.846,1625,1.846,1626,1.846,1627,2.897,1628,1.846,1629,2.897,1630,2.897,1631,1.846,1632,1.846,1633,1.846,1634,1.846,1635,1.846,1636,1.846,1637,1.846,1638,1.846,1639,2.897,1640,1.846,1641,1.846,1642,1.846,1643,1.846,1644,1.846,1645,1.846,1646,1.846,1647,2.897,1648,1.846,1649,1.846,1650,1.846,1651,1.846,1652,1.846,1653,1.846,1654,1.846,1655,1.846,1656,2.897,1657,1.846,1658,1.846,1659,1.846,1660,1.846,1661,1.846,1662,1.846,1663,1.846,1664,1.846,1665,1.846,1666,1.846,1667,2.897,1668,1.846,1669,1.846,1670,3.576,1671,2.897,1672,1.846,1673,1.846,1674,1.846,1675,1.846,1676,1.846,1677,1.846,1678,1.846,1679,1.846,1680,1.846,1681,1.846,1682,2.897,1683,1.846,1684,1.846,1685,1.846,1686,1.846,1687,4.402,1688,1.846,1689,1.846,1690,1.846,1691,1.846,1692,1.846,1693,1.846,1694,1.846,1695,1.846,1696,1.846,1697,1.846,1698,1.846,1699,2.897,1700,2.897,1701,1.846,1702,1.846,1703,1.846,1704,1.846,1705,1.846,1706,1.846,1707,1.846,1708,1.846,1709,1.846,1710,1.846,1711,1.846,1712,1.846,1713,1.846,1714,1.846,1715,2.897,1716,1.846,1717,1.846,1718,1.846,1719,1.846,1720,1.846,1721,2.897,1722,2.897,1723,1.846,1724,1.846,1725,1.846,1726,1.846,1727,1.846,1728,1.846,1729,1.846,1730,1.846,1731,2.897,1732,1.846,1733,1.846,1734,1.846,1735,1.846,1736,1.846,1737,1.846,1738,1.846,1739,1.846,1740,2.897,1741,1.846,1742,1.846,1743,1.846,1744,1.846,1745,1.846,1746,1.846,1747,1.846,1748,1.846,1749,1.846,1750,1.846,1751,1.846,1752,1.846,1753,1.846,1754,1.846,1755,1.846,1756,1.846,1757,1.846,1758,1.846,1759,1.846,1760,1.846]]],"invertedIndex":[["",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":593,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1155,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":631,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1258,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":547,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":198,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":663,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1164,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":983,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":201,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":1012,"title":{},"body":{"components/SignupComponent.html":{}}}],["19th",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1013,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1003,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":634,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":793,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1186,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":794,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":795,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":640,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":790,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":796,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":211,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["8pm",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_answers",{"_index":365,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":1041,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":362,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":366,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["a.points",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{}}}],["absolute",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abused",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerated",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["access",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":936,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{}}}],["according",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{}}}],["account",{"_index":1364,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":556,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":942,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":730,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":232,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":178,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["added",{"_index":1508,"title":{},"body":{"todo.html":{}}}],["adding",{"_index":498,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":217,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":470,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1188,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":478,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":34,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":510,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":693,"title":{},"body":{"components/GameOverComponent.html":{},"todo.html":{}}}],["against",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1477,"title":{},"body":{"todo.html":{}}}],["agriculture",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alaskan",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["all(/^(?!.*\\/api",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1404,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":480,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allows",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":816,"title":{},"body":{"injectables/QuestionService.html":{}}}],["already",{"_index":974,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1299,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angu\\u2026",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":1256,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":892,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":289,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":706,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":708,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":710,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":712,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":714,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":716,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":718,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":721,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":451,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":849,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":898,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":883,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":885,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{},"todo.html":{}}}],["another",{"_index":1004,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":342,"title":{"interfaces/Answer.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":857,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":812,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":364,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answers(given",{"_index":382,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":782,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":1024,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1417,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1183,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/canstart",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get_all",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":408,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":409,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":218,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":818,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":412,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":423,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1502,"title":{},"body":{"todo.html":{}}}],["architectural",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["architecture",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":757,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":921,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":773,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":783,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":786,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":787,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["art",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1279,"title":{},"body":{"index.html":{}}}],["artist",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ascending",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{}}}],["assigns",{"_index":791,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["asteroid",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":394,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1247,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["attributes",{"_index":1513,"title":{},"body":{"todo.html":{}}}],["authenticate",{"_index":477,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":467,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":312,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":504,"title":{},"body":{"classes/Authorization.html":{}}}],["authorized",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1455,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":1421,"title":{},"body":{"todo.html":{}}}],["automatic",{"_index":577,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1269,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autonomy",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowrongguess",{"_index":613,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":195,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["await",{"_index":399,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1440,"title":{},"body":{"todo.html":{}}}],["azerbaijan",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{}}}],["b.points",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{}}}],["back",{"_index":1408,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1264,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":930,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":896,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1464,"title":{},"body":{"todo.html":{}}}],["bank",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":719,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["barber",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1007,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["basilica",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basis",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautification",{"_index":1343,"title":{},"body":{"todo.html":{}}}],["before",{"_index":479,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":1050,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["belt",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["best",{"_index":1507,"title":{},"body":{"todo.html":{}}}],["better",{"_index":1302,"title":{},"body":{"index.html":{},"todo.html":{}}}],["between",{"_index":1011,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["bildungsroman",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["blob([data",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["body",{"_index":826,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bond",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":205,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1325,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["box",{"_index":203,"title":{},"body":{"components/AdminComponent.html":{}}}],["boy",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":499,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":513,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":544,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":514,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":614,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1338,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["bud",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buddy",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1278,"title":{},"body":{"index.html":{},"todo.html":{}}}],["built",{"_index":1391,"title":{},"body":{"todo.html":{}}}],["button",{"_index":567,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":929,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":370,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":587,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1118,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":1150,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":542,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":455,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canada",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canstart",{"_index":979,"title":{},"body":{"components/SignupComponent.html":{}}}],["carbon",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carmen",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["case",{"_index":325,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":402,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":291,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":309,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1354,"title":{},"body":{"todo.html":{}}}],["category",{"_index":726,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["caveats",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["center",{"_index":1471,"title":{},"body":{"todo.html":{}}}],["century",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cerium",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1328,"title":{},"body":{"index.html":{}}}],["changes",{"_index":876,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":919,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":916,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":917,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["characteristic",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charge",{"_index":356,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":760,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":806,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":808,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":1120,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":484,"title":{},"body":{"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["checktoken",{"_index":469,"title":{},"body":{"classes/Authorization.html":{}}}],["checktoken(req",{"_index":482,"title":{},"body":{"classes/Authorization.html":{}}}],["chemical",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemistry",{"_index":1378,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["chicha",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["china",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorofluorocarbons",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choices",{"_index":732,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":189,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["circulation",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cities",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":100,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":462,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":190,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1121,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1129,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":588,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":658,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1257,"title":{},"body":{"index.html":{}}}],["click",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{}}}],["clicked",{"_index":176,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":283,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1189,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1114,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":701,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1273,"title":{},"body":{"index.html":{},"todo.html":{}}}],["coffee",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collection",{"_index":397,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":400,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":931,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":869,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":192,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1336,"title":{},"body":{"index.html":{},"todo.html":{}}}],["comment",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":1392,"title":{},"body":{"todo.html":{}}}],["compared",{"_index":1495,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":960,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":1032,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":1026,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":549,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":339,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1244,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":216,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":331,"title":{},"body":{"injectables/AdminService.html":{}}}],["concat(['school,team",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["conduction",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":1474,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1344,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":904,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1363,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1484,"title":{},"body":{"todo.html":{}}}],["considered",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":1002,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["console.log",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{}}}],["console.log(`an",{"_index":403,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.log(errors",{"_index":768,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["consoleoutput",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":297,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":1046,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":727,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":858,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":528,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":1044,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":672,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":729,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":464,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":284,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1368,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":639,"title":{},"body":{"components/GameComponent.html":{}}}],["contributes",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":1515,"title":{},"body":{"todo.html":{}}}],["convection",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converting",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":675,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copied",{"_index":180,"title":{},"body":{"components/AdminComponent.html":{}}}],["copy",{"_index":690,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":349,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":348,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":887,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":792,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":576,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1165,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":797,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["created",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":774,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1470,"title":{},"body":{"todo.html":{}}}],["crop",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crud",{"_index":1434,"title":{},"body":{"todo.html":{}}}],["cst",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1377,"title":{},"body":{"todo.html":{}}}],["current",{"_index":563,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":590,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":515,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":927,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":928,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":915,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["database",{"_index":352,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":398,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":620,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1426,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dbpassword",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1197,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["dbuser",{"_index":1191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1334,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deco",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":486,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":500,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":607,"title":{},"body":{"components/GameComponent.html":{}}}],["default",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1315,"title":{},"body":{"index.html":{}}}],["denakk\\u2019e",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denali",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":414,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{},"todo.html":{}}}],["dependency",{"_index":1303,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1312,"title":{},"body":{"index.html":{}}}],["descending",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["describe",{"_index":346,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["designed",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1263,"title":{},"body":{"index.html":{},"todo.html":{}}}],["develop",{"_index":1370,"title":{},"body":{"todo.html":{}}}],["developed",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1253,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["diffusion",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dioxide",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directive",{"_index":214,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":231,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1277,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1281,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1512,"title":{},"body":{"todo.html":{}}}],["display",{"_index":602,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1113,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1280,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1330,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1373,"title":{},"body":{"todo.html":{}}}],["div",{"_index":191,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1166,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["doesn't",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["doesnt",{"_index":181,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["dog",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["domesticated",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domsanitizer",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["don",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":1022,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":1039,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":332,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1374,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1443,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1473,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1389,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["during",{"_index":1516,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1291,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":884,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":1016,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["earned",{"_index":1051,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":899,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["edwardian",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":900,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":213,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["emergencies",{"_index":1353,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":879,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1126,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":1078,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1459,"title":{},"body":{"todo.html":{}}}],["end",{"_index":566,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ended",{"_index":1499,"title":{},"body":{"todo.html":{}}}],["endpoint",{"_index":1456,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":481,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":564,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1245,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enough",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{}}}],["enter",{"_index":1028,"title":{},"body":{"components/SignupComponent.html":{}}}],["environment",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1308,"title":{},"body":{"index.html":{}}}],["err",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":406,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":404,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":1248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":761,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":767,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1490,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1349,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":641,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["event",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["event.loaded",{"_index":335,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.total",{"_index":336,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":324,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":864,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["everything",{"_index":172,"title":{},"body":{"components/AdminComponent.html":{}}}],["example",{"_index":1030,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1438,"title":{},"body":{"todo.html":{}}}],["exchange",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":1288,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":872,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":174,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":541,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1450,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1463,"title":{},"body":{"todo.html":{}}}],["export",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":494,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":355,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["failed",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{}}}],["fails",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["failures",{"_index":1366,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":731,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":281,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1448,"title":{},"body":{"todo.html":{}}}],["fast",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{}}}],["feature",{"_index":1472,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1387,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["federal",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feel",{"_index":1036,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["figaro",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["figure",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":328,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":329,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1271,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload(file",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":194,"title":{},"body":{"components/AdminComponent.html":{}}}],["filter(team",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1108,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["fine",{"_index":171,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["finish",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":853,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":516,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":914,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":667,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":208,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":866,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["fix",{"_index":1407,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1453,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1341,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1283,"title":{},"body":{"index.html":{}}}],["flute",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus",{"_index":1441,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1331,"title":{},"body":{"index.html":{}}}],["following",{"_index":1388,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["font",{"_index":199,"title":{},"body":{"components/AdminComponent.html":{}}}],["foods",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":503,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":367,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":893,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":910,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{}}}],["formcontrol",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["found",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":1037,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":460,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":476,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1239,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funny",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{}}}],["further",{"_index":1293,"title":{},"body":{"index.html":{}}}],["gained",{"_index":600,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":932,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":223,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":221,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":511,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":512,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":220,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":457,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":222,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gas",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gecko",{"_index":209,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1276,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1255,"title":{},"body":{"index.html":{}}}],["geography",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georgian",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_all",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getadmin",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":844,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1105,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":829,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":395,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpractice",{"_index":1062,"title":{},"body":{"injectables/TeamService.html":{}}}],["getpracticequestions",{"_index":837,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":519,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1145,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":1063,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":1064,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1073,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteams",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["getteams(link",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{}}}],["getter",{"_index":830,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":388,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getting",{"_index":162,"title":{"index.html":{},"todo.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["gioachino",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["giovanni",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["github:angular/web",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":377,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":277,"title":{},"body":{"injectables/AdminService.html":{}}}],["giver",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["go",{"_index":1295,"title":{},"body":{"index.html":{}}}],["goddess",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1151,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1339,"title":{},"body":{"modules.html":{}}}],["greenhouse",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":933,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":934,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":579,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":1005,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1346,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1347,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":294,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":1249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1475,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handling",{"_index":1250,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["having",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["headers",{"_index":311,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["heat",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":197,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1294,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":384,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["heroku",{"_index":1261,"title":{},"body":{"index.html":{},"todo.html":{}}}],["heroku's",{"_index":1306,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holds",{"_index":724,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["holes",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{}}}],["hrs",{"_index":687,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlanchorelement",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["htmlinputelement",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{}}}],["http",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1268,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":286,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":338,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":326,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":330,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":287,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":821,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":310,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptions).pipe",{"_index":315,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpoptionsjson",{"_index":1092,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1098,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":295,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":805,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":288,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":318,"title":{},"body":{"injectables/AdminService.html":{}}}],["https",{"_index":1460,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/practical",{"_index":1466,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1469,"title":{},"body":{"todo.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1433,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1452,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1504,"title":{},"body":{"todo.html":{}}}],["human",{"_index":677,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["humans",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i.e",{"_index":536,"title":{},"body":{"components/GameComponent.html":{}}}],["iconic",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":1052,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["identifier",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":606,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":508,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":429,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1384,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":907,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":722,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1272,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":888,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":772,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":779,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":801,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["inform",{"_index":1445,"title":{},"body":{"todo.html":{}}}],["information",{"_index":487,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["initiate",{"_index":947,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":543,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":236,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1479,"title":{},"body":{"todo.html":{}}}],["input",{"_index":886,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["inputs",{"_index":856,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["instance",{"_index":385,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instead",{"_index":369,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":1001,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1361,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1259,"title":{},"body":{"index.html":{}}}],["interface",{"_index":341,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":343,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1365,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1130,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1143,"title":{},"body":{"components/TimerComponent.html":{}}}],["iridium",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is\\u2026",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isn't",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":1038,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":575,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["j",{"_index":784,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":747,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join('\\n",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["join(__dirname",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1217,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":815,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":308,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":493,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":491,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":497,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1290,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1018,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kenai",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kinda",{"_index":903,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1485,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1483,"title":{},"body":{"todo.html":{}}}],["kuwait",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kuyokuk",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["largest",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1310,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["late",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":586,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1322,"title":{},"body":{"index.html":{}}}],["legend",{"_index":212,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":901,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["liechtenstein",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":571,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.click",{"_index":183,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.href",{"_index":182,"title":{},"body":{"components/AdminComponent.html":{}}}],["list",{"_index":775,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":814,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":581,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":1076,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1355,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":520,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":540,"title":{},"body":{"components/GameComponent.html":{}}}],["local",{"_index":1252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localstorage",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["located",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1390,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":507,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":269,"title":{},"body":{"injectables/AdminService.html":{}}}],["loginform",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["logs",{"_index":271,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":1008,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1481,"title":{},"body":{"todo.html":{}}}],["loss",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lot",{"_index":1398,"title":{},"body":{"todo.html":{}}}],["magic",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":506,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["maize",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1385,"title":{},"body":{"todo.html":{}}}],["many",{"_index":599,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["map(event",{"_index":321,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(team",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{}}}],["marriage",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matbuttonmodule",{"_index":705,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":707,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":709,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":234,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":703,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":424,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":711,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":785,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":633,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":334,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":713,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":715,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":717,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":720,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":572,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1432,"title":{},"body":{"todo.html":{}}}],["mckinley",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meaning",{"_index":1309,"title":{},"body":{"index.html":{}}}],["means",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medal",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory",{"_index":1227,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["menu",{"_index":638,"title":{},"body":{"components/GameComponent.html":{}}}],["mesoamericans",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":475,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["millet",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["million",{"_index":1375,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":676,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1119,"title":{},"body":{"components/TimerComponent.html":{}}}],["mins",{"_index":686,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":1014,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1238,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":298,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modern",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modifying",{"_index":694,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":411,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":413,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1221,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["monaco",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongo",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1225,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["monocots",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":534,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1444,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1357,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["mount",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":1500,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":207,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":684,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1136,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":671,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1480,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":1048,"title":{},"body":{"classes/Team.html":{}}}],["mythology",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":188,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namesake",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaces",{"_index":1451,"title":{},"body":{"todo.html":{}}}],["native",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["navigate",{"_index":1267,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":557,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":1023,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["needed",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{}}}],["new",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newbery",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newer",{"_index":1437,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":998,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":472,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":473,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1275,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":521,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":854,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":873,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":522,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["nitrous",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1435,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1333,"title":{},"body":{"index.html":{}}}],["non",{"_index":1348,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["nothing",{"_index":1332,"title":{},"body":{"index.html":{}}}],["now",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":1262,"title":{},"body":{"index.html":{}}}],["nshima",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":994,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["number",{"_index":583,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["number,points",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["numbers",{"_index":777,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["obelisk",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":347,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":881,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":748,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":545,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":405,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1100,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1352,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":523,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":560,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":524,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":870,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":850,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":855,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":877,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":955,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":573,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["one?\\u201d",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ones",{"_index":1110,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":509,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":525,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opera/ie",{"_index":210,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1109,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{}}}],["ordered",{"_index":1510,"title":{},"body":{"todo.html":{}}}],["otherwise",{"_index":1077,"title":{},"body":{"injectables/TeamService.html":{},"todo.html":{}}}],["out",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1367,"title":{},"body":{"todo.html":{}}}],["output",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":537,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["over'},{'name",{"_index":224,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":668,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":669,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":665,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":682,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":673,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":674,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":679,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1298,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1340,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["oxide",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ozone",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1206,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["pages",{"_index":937,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":446,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["palladium",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papa",{"_index":762,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":759,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":764,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1324,"title":{},"body":{"index.html":{}}}],["param",{"_index":652,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":758,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":763,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":770,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":766,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1214,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1505,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":350,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":454,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":459,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":1021,"title":{},"body":{"components/SignupComponent.html":{}}}],["peak",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["people",{"_index":1446,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":333,"title":{},"body":{"injectables/AdminService.html":{}}}],["perfectly",{"_index":1496,"title":{},"body":{"todo.html":{}}}],["perform",{"_index":554,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1465,"title":{},"body":{"todo.html":{}}}],["period",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["persistent",{"_index":1317,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1439,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1314,"title":{},"body":{"index.html":{}}}],["play",{"_index":948,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":699,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":666,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":692,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":700,"title":{},"body":{"components/GameOverComponent.html":{}}}],["plutonium",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":597,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["pointsgained",{"_index":517,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1376,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":610,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":1305,"title":{},"body":{"index.html":{}}}],["possibly",{"_index":1436,"title":{},"body":{"todo.html":{}}}],["post",{"_index":1065,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1079,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":733,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":361,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["practice]{@link",{"_index":1094,"title":{},"body":{"injectables/TeamService.html":{}}}],["practice_questions",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":354,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":373,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["practicequestions(given",{"_index":375,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1461,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":739,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":743,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":738,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":744,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":754,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":750,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1372,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":962,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":565,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":691,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["prevents",{"_index":637,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1301,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":681,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["process.env.admin_password",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_password",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_user",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":751,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["processrow",{"_index":741,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":749,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1282,"title":{},"body":{"index.html":{}}}],["production",{"_index":1251,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1300,"title":{},"body":{"index.html":{}}}],["progress",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":1254,"title":{},"body":{"index.html":{}}}],["promise",{"_index":363,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["properly",{"_index":882,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1292,"title":{},"body":{"index.html":{}}}],["provided",{"_index":273,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":299,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1454,"title":{},"body":{"todo.html":{}}}],["public",{"_index":372,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}}}],["pulls",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["purposes",{"_index":1356,"title":{},"body":{"todo.html":{}}}],["put",{"_index":1066,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1081,"title":{},"body":{"injectables/TeamService.html":{}}}],["qatar",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["question",{"_index":351,"title":{"classes/Question.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":799,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":526,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":809,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":612,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":737,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":226,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":379,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":851,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":852,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":781,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":225,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":530,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":359,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["radiation",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":755,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1329,"title":{},"body":{"index.html":{}}}],["reactive",{"_index":1514,"title":{},"body":{"todo.html":{}}}],["reactiveformsmodule",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1468,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":678,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1296,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1447,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1297,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1304,"title":{},"body":{"index.html":{}}}],["recently",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recompile",{"_index":1327,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":458,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1488,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":179,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["refers",{"_index":1358,"title":{},"body":{"todo.html":{}}}],["register",{"_index":940,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":453,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":1020,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":452,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":1035,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":951,"title":{},"body":{"components/SignupComponent.html":{}}}],["reign",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":804,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relating",{"_index":466,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1270,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1149,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["removed",{"_index":1511,"title":{},"body":{"todo.html":{}}}],["renowned",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reportprogress",{"_index":316,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":317,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":496,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":471,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":902,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1457,"title":{},"body":{"todo.html":{}}}],["res",{"_index":186,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.json('invalid",{"_index":501,"title":{},"body":{"classes/Authorization.html":{}}}],["res.sendfile(clientpath",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.status(403).json('403",{"_index":502,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1132,"title":{},"body":{"components/TimerComponent.html":{}}}],["resides",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respective",{"_index":868,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":306,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":1122,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1476,"title":{},"body":{"todo.html":{}}}],["result",{"_index":233,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":908,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":909,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":401,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":235,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":911,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":912,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieval",{"_index":368,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":392,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":358,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["return",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["reverse",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["rewrote",{"_index":1506,"title":{},"body":{"todo.html":{}}}],["rice",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":1335,"title":{},"body":{"index.html":{}}}],["river",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roman",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":300,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":219,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["rossini",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roughly",{"_index":546,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":943,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":529,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":449,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":461,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":450,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":448,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":752,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":800,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":788,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":789,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":802,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":769,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":776,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["royal",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1260,"title":{},"body":{"index.html":{}}}],["running",{"_index":1284,"title":{},"body":{"index.html":{},"todo.html":{}}}],["runs",{"_index":569,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["russia",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":290,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":293,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":683,"title":{},"body":{"components/GameOverComponent.html":{}}}],["sad",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{}}}],["safari",{"_index":170,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["safari/chrome",{"_index":206,"title":{},"body":{"components/AdminComponent.html":{}}}],["samarium",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sanitizer",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":627,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1084,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":680,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":670,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":880,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1274,"title":{},"body":{"index.html":{}}}],["school",{"_index":696,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":967,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolnamecontrol",{"_index":986,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.disable",{"_index":996,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.value",{"_index":990,"title":{},"body":{"components/SignupComponent.html":{}}}],["schools",{"_index":1047,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":598,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":1006,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1318,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1323,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["second",{"_index":604,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["seconds",{"_index":527,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":518,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":495,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":685,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1416,"title":{},"body":{"todo.html":{}}}],["see",{"_index":959,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1405,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":811,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1403,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1369,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1265,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":535,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"dependencies.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":615,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":616,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":975,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["setanswers(given",{"_index":846,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setdburl",{"_index":1196,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setinterval",{"_index":1123,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1135,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpractice",{"_index":1067,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":1086,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpracticequestions(given",{"_index":839,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":842,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":276,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["setteam",{"_index":1068,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":1088,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":585,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":274,"title":{},"body":{"injectables/AdminService.html":{}}}],["seville",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/question",{"_index":353,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shiloh",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shiny",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shouldn't",{"_index":1486,"title":{},"body":{"todo.html":{}}}],["show",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1362,"title":{},"body":{"todo.html":{}}}],["shuffle",{"_index":742,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":753,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":756,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["side",{"_index":1429,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":946,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":938,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":456,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":228,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":949,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":950,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":227,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signupform",{"_index":952,"title":{},"body":{"components/SignupComponent.html":{}}}],["simple",{"_index":1019,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":874,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":1027,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":725,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":200,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":204,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":765,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":771,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slow",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sluggish",{"_index":1494,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1458,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1487,"title":{},"body":{"todo.html":{}}}],["something",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["somewhere",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["soooo",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorry",{"_index":1034,"title":{},"body":{"components/SignupComponent.html":{}}}],["sort",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["sort((a",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorts",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["spain\\u2019s",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spell",{"_index":1497,"title":{},"body":{"todo.html":{}}}],["src/.../admin",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1241,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../practicequestions.ts",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1242,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":447,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":407,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":702,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":848,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":861,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":862,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":863,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":860,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":865,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":859,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":867,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":875,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":878,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1112,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1125,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1141,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1144,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1140,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1142,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1128,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1131,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1133,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1137,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1138,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1139,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1146,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1127,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":1040,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":1045,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":1056,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":1057,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":1059,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":1058,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":1055,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":1054,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":1060,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":1053,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:14",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:16",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:27",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:32",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:43",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:69",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":664,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":505,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":561,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":562,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":568,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":582,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":580,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":609,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":589,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":584,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":591,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":592,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":594,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":595,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":601,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":605,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":603,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":532,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":533,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":538,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":539,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":551,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":553,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":945,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:17",{"_index":970,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":966,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:24",{"_index":972,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:26",{"_index":973,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:28",{"_index":957,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:37",{"_index":958,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:42",{"_index":961,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:47",{"_index":963,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:57",{"_index":964,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":935,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":939,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":941,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:17",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:23",{"_index":282,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:25",{"_index":285,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:28",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:33",{"_index":275,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:39",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:44",{"_index":270,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:51",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:59",{"_index":279,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:69",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":803,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":807,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":813,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":810,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":1061,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1069,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1091,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1090,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":1089,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":1071,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":1087,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":1070,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":1075,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":1080,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":1082,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":1085,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":1074,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1104,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1106,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1107,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1181,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1184,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":463,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:25",{"_index":474,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:36",{"_index":489,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":483,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/practicequestions.ts",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":344,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1198,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":723,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":736,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":735,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":734,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":728,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1200,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":558,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1185,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":570,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":552,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["state('correct",{"_index":895,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":897,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["static",{"_index":465,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1383,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1501,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":1124,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":1134,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":1072,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":387,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":345,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":832,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":831,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":833,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":834,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":838,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":840,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":841,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":843,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":845,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":847,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":836,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":835,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":360,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["storing",{"_index":357,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["string",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["stuff",{"_index":704,"title":{},"body":{"modules/MaterialModule.html":{}}}],["style",{"_index":889,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":965,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":1033,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":953,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":923,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1311,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":971,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sugarcane",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":168,"title":{},"body":{"components/AdminComponent.html":{},"modules.html":{}}}],["sure",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["surprising",{"_index":340,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1337,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":323,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronous",{"_index":173,"title":{},"body":{"components/AdminComponent.html":{}}}],["synchronously",{"_index":1321,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1442,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1307,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1266,"title":{},"body":{"index.html":{}}}],["table",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":574,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":1009,"title":{},"body":{"components/SignupComponent.html":{}}}],["tap",{"_index":292,"title":{},"body":{"injectables/AdminService.html":{}}}],["target",{"_index":1489,"title":{},"body":{"todo.html":{}}}],["team",{"_index":75,"title":{"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":993,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":697,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname},${team.teamnumber},${team.points",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["team.service",{"_index":817,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":698,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":1000,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":1093,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":954,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamname",{"_index":1509,"title":{},"body":{"todo.html":{}}}],["teamnumber",{"_index":969,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["teamnumbercontrol",{"_index":988,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.disable",{"_index":997,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.value",{"_index":991,"title":{},"body":{"components/SignupComponent.html":{}}}],["teams",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":531,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1360,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1115,"title":{},"body":{"components/TimerComponent.html":{}}}],["teosinte",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":1350,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1287,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1351,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1286,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":307,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":196,"title":{},"body":{"components/AdminComponent.html":{}}}],["thermos",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thing",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1147,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":1015,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":383,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":376,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":380,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.adminservice",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.getteams().subscribe(teams",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.loginform.value.password).subscribe",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(file.files[0]).subscribe",{"_index":185,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":924,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":926,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":301,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":644,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":635,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1152,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1160,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":187,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":625,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":905,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.file",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.finishanimation",{"_index":918,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":653,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":390,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":646,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":322,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":391,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":651,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":381,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":374,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":378,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gettoken",{"_index":313,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1111,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":823,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":825,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.team.get_all",{"_index":314,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.admin.login",{"_index":305,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1097,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":828,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":827,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1103,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1099,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":320,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":820,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":824,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":630,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":657,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1154,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1153,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":618,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":628,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1102,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1095,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":780,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1101,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":645,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":624,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":626,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":922,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":623,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":978,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1157,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":980,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":622,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":944,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.sanitizer.bypasssecuritytrusturl(url",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.saving",{"_index":688,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":656,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":655,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":778,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.signupform.get('schoolname",{"_index":987,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('teamnumber",{"_index":989,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.start",{"_index":1158,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1161,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":920,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":925,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":906,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":913,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1156,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":995,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":648,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":984,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":629,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":617,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":981,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":982,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":619,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":650,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":1096,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":822,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":649,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":992,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":819,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":632,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":985,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":999,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":621,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":695,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":661,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":643,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":662,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":636,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":660,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":647,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":654,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":977,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":303,"title":{},"body":{"injectables/AdminService.html":{}}}],["this['_",{"_index":389,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1386,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1359,"title":{},"body":{"todo.html":{}}}],["thought",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{}}}],["thus",{"_index":1316,"title":{},"body":{"index.html":{}}}],["tiber",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":175,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":1042,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":230,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1116,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1117,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":229,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1462,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":956,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":1043,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":110,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token]{@link",{"_index":302,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1449,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["tonsorial",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":1313,"title":{},"body":{"index.html":{}}}],["total",{"_index":548,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1345,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":745,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":890,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1493,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tries",{"_index":871,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":891,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":894,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":304,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":396,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":798,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":746,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1246,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1342,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":550,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":1031,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1430,"title":{},"body":{"todo.html":{}}}],["tz(start",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u201cthe",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":659,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":1010,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":642,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":1029,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1285,"title":{},"body":{"index.html":{},"todo.html":{}}}],["united",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unix",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":177,"title":{},"body":{"components/AdminComponent.html":{}}}],["until",{"_index":1025,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":559,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1083,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":337,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":327,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":278,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":280,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":296,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":319,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1467,"title":{},"body":{"todo.html":{}}}],["use",{"_index":740,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["user",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":596,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":488,"title":{},"body":{"classes/Authorization.html":{}}}],["username",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userroutes",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":468,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1320,"title":{},"body":{"index.html":{}}}],["using",{"_index":272,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["valid",{"_index":485,"title":{},"body":{"classes/Authorization.html":{}}}],["validators",{"_index":976,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.required",{"_index":968,"title":{},"body":{"components/SignupComponent.html":{}}}],["value",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":393,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["vapor",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":215,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":386,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1517,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":555,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["vatican",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":490,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":492,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":371,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":1289,"title":{},"body":{"index.html":{},"todo.html":{}}}],["victorian",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":611,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild(timercomponent",{"_index":608,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{}}}],["virginia\\u2026",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtual",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":410,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1371,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wasn't",{"_index":1478,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1326,"title":{},"body":{"index.html":{}}}],["water",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1163,"title":{},"body":{"components/TimerComponent.html":{}}}],["ways",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1233,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webkit",{"_index":202,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1503,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":1319,"title":{},"body":{"index.html":{}}}],["weren't",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{}}}],["west",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wheat",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["whipping",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whittier",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":193,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1162,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1159,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.url.createobjecturl(blob",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{}}}],["window.url.revokeobjecturl(url",{"_index":184,"title":{},"body":{"components/AdminComponent.html":{}}}],["windows",{"_index":1498,"title":{},"body":{"todo.html":{}}}],["winner",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wipes",{"_index":689,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":1017,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1482,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["wont",{"_index":1491,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1492,"title":{},"body":{"todo.html":{}}}],["works",{"_index":169,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["world",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["worse",{"_index":1148,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":578,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":1049,"title":{},"body":{"classes/Team.html":{}}}],["yukon",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consoleOutput\n                            \n                            \n                                file\n                            \n                            \n                                loginForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                getTeams\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload(file: HTMLInputElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:69\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            HTMLInputElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams(link: HTMLAnchorElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:43\n                \n            \n\n\n            \n                \n                    Gets the teams from the server, sorts them by points, and outputs in a nice csv format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                            HTMLAnchorElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:32\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:14\n                            \n                        \n\n                \n                    \n                        The link to the team CSV file \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    password: new FormControl('')\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:27\n                            \n                        \n\n                \n                    \n                        The login form containing the password \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:22\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** The link to the team CSV file */\n  file;\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService, private sanitizer: DomSanitizer) { }\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** The login form containing the password */\n  loginForm = new FormGroup({\n    password: new FormControl('')\n  });\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.loginForm.value.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Gets the teams from the server, sorts them by points, and outputs in a nice csv format */\n  getTeams(link: HTMLAnchorElement) {\n    this.adminService.getTeams().subscribe(teams => {\n      const data = teams\n        .filter(team => team.points) // remove teams with no points\n        .sort((a, b) => a.points - b.points) // sort teams according to points in ascending order\n        .map(team => `${team.schoolName},${team.teamNumber},${team.points}`) // map to strings\n        .concat(['School,Team Number,Points']) // add header\n        .reverse() // change to descending order\n        .join('\\n');\n      const blob = new Blob([data], {type: 'text/csv'});\n      const url = window.URL.createObjectURL(blob);\n      this.file = this.sanitizer.bypassSecurityTrustUrl(url);\n      // todo this would be funny if it weren't so sad (i have no idea why this is needed but it fails with\n      //   'Failed - no file' on chrome on the first click if this isn't here soooo)\n      // i thought it might have something to do with href not getting set fast enough but console.log doesn't support\n      // this - works on safari just fine\n      // everything here should be synchronous so the file should exist by the time the link is clicked\n      // unless link isn't actually a reference, but rather a copied value. console.log doesnt support this.\n      link.href = url;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    });\n\n  }\n\n  /** Upload the questions to the server */\n  fileUpload(file: HTMLInputElement): void {\n    this.adminService.uploadQuestions(file.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n     Get teams as CSV \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                       Get teams as CSV               {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getTeams\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:17\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:69\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:51\n                \n            \n\n\n            \n                \n                    Gets all of the teams from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:28\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:44\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:33\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:59\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:23\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:25\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { handleError, httpOptionsText, URI } from '../constants';\nimport { Team } from '../models/team';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token = '';\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, password, {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Gets all of the teams from the server */\n  getTeams(): Observable {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.getToken() }) };\n    return this.http.get(URI.TEAM.GET_ALL, httpOptions).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.getToken() })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ReactiveFormsModule\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:25\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:36\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          return res.json('invalid token');\n        } else {\n          req.headers.authorization = decoded.type;\n          next();\n        }\n      });\n    } else {\n      res.status(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization === 'user' || req.headers.authorization === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.getToken() };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                signupForm\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:37\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:42\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:47\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:57\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signupForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                        The signup form that contains the school name and team number \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:24\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:26\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** The signup form that contains the school name and team number */\n  signupForm = new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  });\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    const schoolNameControl = this.signupForm.get('schoolName');\n    const teamNumberControl = this.signupForm.get('teamNumber');\n    this.team.schoolName = schoolNameControl.value;\n    this.team.teamNumber = teamNumberControl.value;\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/practiceQuestions.ts\n            \n            variable\n            practiceQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            function\n            setDbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            mongodb-memory-server : ^5.1.5\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                        \n                            setDbURL   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setDbURL\n                        \n                        \n                    \n                \n            \n            \n                \nsetDbURL()\n                \n            \n\n\n\n\n            \n                \n                    Sets dbURL based on whether we are using the production database or a local development version \n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password -- also need to use https\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo app (animations in particular) is sluggish on safari compared to chrome\ntodo store token so user doesnt have to perfectly spell name again?\ntodo should test build on windows\ntodo not every team has a non null time ended - why?\ntodo can you move mongodb-memory-server to dev-dependencies? If not, how can you make it so you can?\ntodo for stats\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\nRewrote event reference in admin page to use template reference variable instead, as is best practice.\nAdded admin functionality to download teamName, number, and points ordered by points as csv.\nRemoved disabled attributes on some reactive inputs, instead using a method, as is best practice.\nAdded an in memory version of mongodb that runs when the app is not running on heroku, in order to allow more fine control\n  over the database and to avoid using production database during development.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbPassword   (src/.../constants.ts)\n                        \n                        \n                            dbURL   (src/.../server.ts)\n                        \n                        \n                            dbUser   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            practiceQuestions   (src/.../practiceQuestions.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.ADMIN_PASSWORD || 'password'\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_PASSWORD\n                        \n                    \n\n                \n                    \n                        Database password \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_USER\n                        \n                    \n\n                \n                    \n                        Database username \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/practiceQuestions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    question: 'By area, which country is the considered the second largest in the world, to Russia?',\n    category: 'Geography',\n    answers: [\n      'Azerbaijan',\n      'Canada',\n      'United States',\n      'Russia',\n      'China'\n    ],\n    correctAnswer: 'Canada'\n  },\n  {\n    question: 'The characteristic color of a shiny coffee thermos is designed to prevent heat loss by which of the following processes?',\n    category: 'Heat Exchange',\n    answers: [\n      'Convection',\n      'Radiation',\n      'Slow Diffusion',\n      'Conduction',\n      'Circulation'\n    ],\n    correctAnswer: 'Radiation'\n  },\n  {\n    question: 'Which native Denakk\\u2019e name for the Alaskan peak Mount McKinley means \\u201cThe High One?\\u201d',\n    category: 'Location, Location',\n    answers: [\n      'Yukon',\n      'Kenai',\n      'Denali',\n      'Kuyokuk',\n      'Whittier'\n    ],\n    correctAnswer: 'Denali'\n  },\n  {\n    question: 'While humans have recently accelerated the greenhouse effect, which mostly non-human created gas ' +\n      'contributes most to this process?',\n    category: 'Got Some Gas',\n    answers: [\n      'Water vapor',\n      'Ozone',\n      'Carbon Dioxide',\n      'Nitrous Oxide',\n      'Chlorofluorocarbons'\n    ],\n    correctAnswer: 'Water vapor'\n  },\n  {\n    question: 'The largest object in our asteroid belt, named after the Roman goddess of agriculture, is the namesake ' +\n      'of which chemical element?',\n    category: 'Astronomy, Chemistry, and Mythology',\n    answers: [\n      'Cerium',\n      'Iridium',\n      'Plutonium',\n      'Samarium',\n      'Palladium'\n    ],\n    correctAnswer: 'Cerium'\n  },\n  {\n    question: 'This modern crop is a domesticated teosinte developed by early Mesoamericans which can be found in foods ' +\n      'such as nshima, chicha, and angu\\u2026',\n    category: 'Monocots',\n    answers: [\n      'Rice',\n      'Sugarcane',\n      'Maize',\n      'Wheat',\n      'Millet'\n    ],\n    correctAnswer: 'Maize'\n  },\n  {\n    question: 'Which city-state, located on the west bank of the Tiber River, is renowned for its basilica and obelisk?',\n    category: 'Autonomy',\n    answers: [\n      'Monaco',\n      'Qatar',\n      'Liechtenstein',\n      'Vatican City',\n      'Kuwait'\n    ],\n    correctAnswer: 'Vatican City'\n  },\n  {\n    question: 'Which opera by Gioachino Rossini features Figaro, a tonsorial artist who resides in one of Spain\\u2019s ' +\n      'largest cities?',\n    category: 'Figaro! Figaro! Figaro!',\n    answers: [\n      'Carmen',\n      'The Marriage of Figaro',\n      'The Magic Flute',\n      'Don Giovanni',\n      'The Barber of Seville'\n    ],\n    correctAnswer: 'The Barber of Seville'\n  },\n  {\n    question: 'The architectural period developed during and named after the reign of an iconic royal figure of the late' +\n      ' 19th century is\\u2026',\n    category: 'Architecture',\n    answers: [\n      'Georgian',\n      'Art deco',\n      'Victorian',\n      'Edwardian',\n      'Federal'\n    ],\n    correctAnswer: 'Victorian'\n  },\n  {\n    question: 'This Newbery Medal winner is a bildungsroman about a boy and an abused dog who form a bond in West Virginia\\u2026',\n    category: 'A Bildungsroman',\n    answers: [\n      'Bud, Not Buddy',\n      'The Giver',\n      'The Whipping Boy',\n      'Shiloh',\n      'Holes'\n    ],\n    correctAnswer: 'Shiloh'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The questions that will form the basis of practiceQuestions, questions, and answers during development. \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    GET_ALL: '/api/team/get_all',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/canStart'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
