var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.862,1,1.38,2,1.46,3,0.227,4,0.227,5,1.065,6,1.065,7,1.065,8,1.065,9,0.433,10,1.872,11,0.327,12,2.584,13,3.37,14,2.968,15,1.755,16,1.755,17,2.591,18,1.065,19,2.612,20,1.554,21,1.597,22,4.043,23,1.597,24,3.37,25,0.292,26,0.872,27,4.812,28,4.043,29,0.872,30,3.37,31,2.807,32,2.879,33,3.742,34,1.939,35,1.242,36,2.247,37,3.238,38,4.043,39,4.491,40,1.193,41,3.37,42,0.797,43,0.034,44,0.485,45,0.625,46,0.797,47,3.37,48,4.043,49,2.247,50,3.742,51,1.162,52,1.38,53,0.996,54,1.609,55,3.37,56,4.043,57,2.247,58,1.597,59,3.101,60,3.37,61,2.339,62,2.437,63,3.37,64,3.896,65,3.37,66,4.812,67,2.247,68,1.597,69,2.281,70,2.437,71,3.37,72,2.247,73,2.16,74,1.635,75,3.37,76,3.37,77,0.532,78,1.337,79,1.472,80,2.879,81,2.807,82,2.247,83,1.127,84,1.478,85,3.368,86,3.084,87,3.368,88,2.247,89,3.248,90,2.16,91,4.491,92,2.247,93,2.247,94,1.755,95,1.755,96,1.946,97,3.37,98,3.37,99,1.14,100,2.16,101,0.654,102,0.486,103,2.247,104,1.44,105,1.625,106,1.17,107,0.259,108,0.128,109,2.437,110,0.973,111,0.818,112,2.247,113,2.247,114,0.798,115,2.247,116,2.247,117,2.106,118,2.247,119,1.597,120,1.293,121,1.293,122,1.872,123,2.247,124,2.247,125,1.046,126,1.17,127,2.247,128,1.872,129,1.625,130,2.247,131,2.247,132,2.247,133,2.247,134,2.247,135,2.247,136,2.247,137,2.437,138,2.247,139,2.247,140,1.625,141,2.247,142,2.247,143,2.247,144,1.872,145,2.247,146,1.625,147,2.247,148,2.247,149,2.247,150,2.247,151,1.872,152,2.807,153,2.247,154,2.247,155,2.247,156,2.247,157,2.247,158,2.247,159,1.872,160,1.872,161,1.872,162,2.247,163,1.872,164,1.872,165,2.247,166,2.807,167,3.37,168,2.247,169,2.247,170,1.872,171,2.247,172,1.17,173,0.973,174,2.247,175,2.247,176,3.37,177,1.293,178,2.807,179,1.872,180,1.872,181,2.247,182,1.872,183,2.247,184,1.44,185,0.892,186,1.625,187,2.247,188,1.625,189,1.625,190,2.247,191,2.247,192,2.247,193,2.247,194,2.247,195,2.247,196,2.16,197,3.37,198,3.37,199,2.807,200,3.37,201,2.247,202,2.247,203,2.807,204,2.247,205,1.44,206,2.247,207,2.247,208,2.16,209,2.247,210,1.872,211,2.247,212,3.37,213,5.052,214,4.043,215,4.043,216,2.247,217,2.247,218,2.247,219,2.247,220,2.247,221,1.872,222,0.892,223,1.46,224,1.065,225,2.129,226,1.065,227,1.065,228,0.751,229,1.065,230,0.69,231,1.065,232,0.69,233,0.634,234,1.065,235,0.751,236,1.065,237,0.69,238,1.065,239,0.751,240,0.973,241,1.065,242,1.065,243,0.012,244,0.017,245,0.012]],["title/injectables/AdminService.html",[37,2.023,246,1.149]],["body/injectables/AdminService.html",[3,0.248,4,0.248,9,0.444,11,0.358,14,2.881,15,1.876,25,0.32,26,0.932,29,0.932,31,3.91,34,2.073,35,1.309,37,2.309,40,1.258,42,1.03,43,0.034,44,0.527,45,0.701,46,1.03,50,3.551,51,1.292,52,1.442,53,1.091,54,0.822,58,2.225,59,2.073,68,1.708,69,2.815,70,2.605,74,1.709,77,1.31,78,1.429,79,1.819,81,2.048,83,0.822,84,1.442,86,3.008,89,2.605,94,1.876,99,1.591,101,0.76,102,0.532,107,0.283,108,0.093,111,0.895,114,1.407,125,1.35,140,1.778,173,1.065,210,2.048,243,0.013,244,0.019,245,0.013,246,1.312,247,1.415,248,2.048,249,2.309,250,3.602,251,3.602,252,4.162,253,3.91,254,3.602,255,3.602,256,4.693,257,3.602,258,1.576,259,3.008,260,2.459,261,1.708,262,2.459,263,2.073,264,3.602,265,4.693,266,2.459,267,3.602,268,3.602,269,2.605,270,3.001,271,3.001,272,3.602,273,3.551,274,2.459,275,2.369,276,3.602,277,3.91,278,2.459,279,2.605,280,3.083,281,2.309,282,1.166,283,2.459,284,1.016,285,3.602,286,1.415,287,3.602,288,2.459,289,3.602,290,2.073,291,3.602,292,3.602,293,2.459,294,3.602,295,2.459,296,2.048,297,2.459,298,2.048,299,2.459,300,1.56,301,3.551,302,2.459,303,3.008,304,2.459,305,1.415,306,1.281,307,1.576,308,1.576,309,1.281,310,2.605,311,1.281,312,1.166,313,1.415,314,1.415,315,1.281,316,3.001,317,2.459,318,3.91,319,2.048,320,2.459,321,3.91,322,2.459,323,2.459,324,2.048,325,2.459,326,4.693,327,3.91,328,2.733,329,2.22,330,2.459,331,3.001,332,2.459,333,1.065,334,1.778,335,2.459,336,2.459,337,2.459,338,2.459,339,2.459,340,2.459,341,2.459,342,2.459,343,3.083,344,2.459,345,2.459,346,4.693,347,2.459,348,2.459,349,2.459,350,2.048,351,3.602,352,2.459,353,2.459,354,2.459,355,3.602,356,2.459,357,2.459,358,2.459,359,2.048,360,2.459,361,2.048,362,1.778]],["title/interfaces/Answer.html",[363,1.367,364,0.97]],["body/interfaces/Answer.html",[3,0.331,4,0.331,9,0.244,11,0.478,25,0.427,26,1.142,43,0.034,44,0.538,45,0.427,51,1.54,52,1.009,53,0.648,58,1.558,77,1.357,79,1.196,99,1.569,101,0.643,107,0.378,108,0.167,110,1.913,114,1.318,117,1.711,125,1.142,172,1.711,173,2.482,177,1.891,184,2.106,243,0.023,244,0.023,245,0.017,282,1.558,284,0.927,300,1.423,363,2.411,364,1.798,365,2.376,366,1.891,367,2.106,368,3.607,369,1.668,370,3.202,371,1.816,372,3.197,373,1.439,374,2.117,375,1.558,376,2.541,377,2.376,378,2.106,379,2.106,380,2.376,381,1.711,382,3.197,383,2.365,384,2.376,385,4.445,386,2.117,387,2.376,388,2.376,389,3.193,390,2.376,391,1.891,392,2.106,393,1.711,394,2.536,395,1.423,396,1.891,397,2.376,398,2.376,399,2.376,400,2.31,401,2.376,402,2.376,403,2.376,404,2.376,405,2.376,406,2.376,407,2.541,408,2.106,409,1.558,410,1.423,411,2.376,412,3.607,413,2.376,414,2.376,415,1.711,416,2.376,417,2.106,418,2.376,419,2.376,420,2.376,421,2.376,422,2.376,423,2.376,424,2.376,425,2.376,426,2.376,427,2.376,428,2.376]],["title/components/AppComponent.html",[0,0.565,228,1.056]],["body/components/AppComponent.html",[0,1.077,1,1.293,2,2.244,3,0.425,4,0.425,5,1.996,6,1.996,7,1.996,8,1.996,9,0.312,11,0.613,18,1.996,19,2.993,20,1.801,21,2.456,23,2.456,43,0.033,44,0.523,96,2.244,101,0.613,102,0.911,107,0.485,108,0.159,222,1.671,223,2.244,224,1.996,225,2.776,226,1.996,227,1.996,228,1.958,229,1.996,230,1.293,231,1.996,232,1.293,233,1.187,234,1.996,235,1.408,236,1.996,237,1.293,238,1.996,239,1.408,240,1.824,241,1.996,242,1.996,243,0.022,244,0.027,245,0.022,315,3.05,429,3.507,430,5.612,431,5.181,432,4.316]],["title/modules/AppModule.html",[433,1.497,434,2.023]],["body/modules/AppModule.html",[1,1.807,3,0.364,4,0.364,9,0.267,20,1.016,43,0.034,101,0.922,102,0.78,104,2.31,105,3.395,106,1.877,107,0.415,108,0.136,222,1.43,228,2.1,230,1.807,232,1.807,235,1.967,237,1.807,239,1.967,243,0.019,244,0.024,245,0.019,305,2.074,433,1.709,434,4.159,435,1.561,436,2.074,437,4.35,438,4.35,439,3.002,440,2.31,441,3.002,442,3.002,443,3.002,444,3.002,445,3.384,446,3.384,447,3.911,448,2.074,449,2.074,450,3.604,451,3.395,452,4.695,453,3.395,454,4.695,455,4.695,456,4.695,457,3.604,458,3.604,459,3.002,460,3.604,461,3.002,462,3.002,463,2.31,464,3.002,465,3.604,466,3.002,467,3.604,468,3.002]],["title/modules/AppRoutingModule.html",[433,1.497,445,1.816]],["body/modules/AppRoutingModule.html",[0,1.045,1,1.581,3,0.42,4,0.42,9,0.309,14,2.17,43,0.034,101,0.9,102,0.902,107,0.48,108,0.158,125,1.078,230,1.581,232,1.581,233,1.175,237,1.581,243,0.021,244,0.026,245,0.021,435,1.805,440,2.671,445,2.962,451,3.013,453,3.723,459,3.472,461,3.472,462,3.472,463,2.671,464,3.472,468,3.472,469,4.167,470,4.167,471,5.148,472,2.91,473,2.398,474,3.581,475,4.167,476,5.087,477,4.289,478,4.654,479,3.472,480,5.148,481,5.148,482,5.148,483,4.167]],["title/classes/Authorization.html",[108,0.119,329,1.644]],["body/classes/Authorization.html",[3,0.306,4,0.306,9,0.402,11,0.442,14,2.689,25,0.395,29,1.335,40,1.037,42,0.945,43,0.034,44,0.483,45,0.671,46,0.945,53,0.945,54,1.602,68,1.985,69,2.77,70,3.027,74,1.744,77,0.719,95,2.915,99,1.351,100,3.309,101,0.697,107,0.35,108,0.115,114,0.992,117,2.495,119,1.44,125,0.786,137,3.027,196,3.886,243,0.016,244,0.022,245,0.016,253,3.487,271,5,312,1.44,329,2.18,334,3.464,394,1.813,400,1.813,484,1.582,485,2.53,486,1.985,487,4.384,488,4.186,489,4.186,490,3.733,491,4.186,492,6.002,493,4.42,494,6.002,495,3.037,496,4.663,497,3.733,498,5.162,499,4.186,500,3.116,501,3.309,502,4.301,503,4.186,504,3.037,505,4.79,506,1.985,507,4.186,508,3.037,509,4.186,510,3.037,511,3.037,512,4.186,513,2.53,514,1.947,515,3.027,516,4.79,517,3.037,518,2.53,519,1.947,520,4.79,521,3.037,522,3.037,523,3.037,524,2.53,525,3.037,526,2.196,527,3.037,528,1.748,529,3.037,530,3.037,531,3.037,532,3.487,533,4.79,534,4.79,535,4.186,536,4.79]],["title/components/GameComponent.html",[0,0.565,230,0.97]],["body/components/GameComponent.html",[0,0.756,1,0.521,2,1.174,3,0.171,4,0.171,5,0.804,6,0.804,7,0.804,8,0.804,9,0.126,11,0.394,12,2.223,16,1.411,17,2.169,18,0.804,19,2.4,20,1.428,21,1.284,23,1.284,25,0.585,26,0.701,29,0.701,32,2.477,35,1.039,40,1.297,42,0.534,43,0.034,44,0.39,45,0.658,46,0.534,51,1.396,53,1.024,54,1.693,61,2.462,73,2.887,74,1.788,77,0.801,78,1.787,79,1.64,83,1.642,95,1.411,96,1.174,99,1.385,101,0.714,102,0.367,107,0.195,108,0.064,110,1.174,111,0.617,114,0.642,120,1.559,185,1.533,186,2.794,189,1.959,222,0.673,223,1.174,224,0.804,225,1.832,226,0.804,227,0.804,228,0.567,229,0.804,230,1.187,231,0.804,232,0.521,233,1.585,234,0.804,235,0.567,236,0.804,237,0.521,238,0.804,239,1.292,240,2.338,241,0.804,242,0.804,243,0.022,244,0.014,245,0.009,263,3.196,270,2.257,284,1.385,300,1.174,312,1.604,313,0.976,333,2.193,364,1.187,369,0.906,371,1.232,373,1.506,375,0.804,378,1.737,395,2.193,407,1.559,409,1.284,410,1.174,415,1.411,448,0.976,466,1.413,473,0.976,479,3.752,486,1.832,487,1.959,493,2.794,500,1.559,501,1.737,506,1.284,519,2.887,537,1.413,538,2.257,539,2.709,540,3.383,541,3.383,542,2.709,543,3.383,544,4.503,545,2.446,546,1.947,547,2.818,548,3.383,549,2.794,550,3.864,551,3.864,552,2.709,553,3.864,554,4.224,555,3.864,556,3.418,557,1.413,558,2.591,559,2.72,560,2.048,561,2.709,562,1.696,563,1.559,564,2.257,565,2.709,566,1.737,567,1.696,568,1.696,569,3.219,570,1.959,571,2.257,572,2.709,573,2.257,574,2.709,575,2.257,576,2.709,577,3.864,578,2.794,579,2.709,580,1.696,581,2.257,582,1.696,583,2.709,584,2.257,585,2.709,586,1.959,587,1.174,588,1.737,589,2.709,590,1.696,591,1.696,592,2.709,593,2.709,594,2.477,595,1.737,596,1.696,597,2.709,598,1.737,599,1.959,600,2.709,601,1.411,602,2.709,603,1.959,604,2.257,605,2.257,606,2.709,607,2.794,608,1.696,609,2.257,610,1.696,611,1.951,612,1.696,613,3.519,614,2.709,615,2.257,616,2.709,617,1.696,618,1.959,619,1.696,620,1.696,621,3.66,622,1.696,623,1.696,624,2.257,625,3.219,626,2.709,627,2.709,628,2.257,629,1.696,630,2.257,631,1.696,632,1.959,633,1.696,634,1.559,635,1.696,636,2.709,637,1.696,638,2.709,639,1.696,640,2.794,641,1.959,642,1.959,643,1.413,644,1.087,645,3.864,646,3.383,647,1.413,648,2.257,649,1.737,650,1.959,651,1.696,652,1.696,653,1.696,654,2.709,655,3.383,656,1.087,657,2.709,658,3.383,659,3.519,660,1.737,661,1.226,662,2.709,663,2.169,664,3.383,665,3.864,666,1.413,667,1.696,668,1.696,669,1.087,670,1.413,671,1.696,672,1.696,673,2.709,674,3.383,675,1.696,676,1.696,677,2.257,678,1.696,679,1.226,680,3.219,681,3.383,682,4.503,683,1.696,684,3.383,685,1.696,686,0.976,687,1.696,688,1.413,689,1.696,690,1.226]],["title/components/GameOverComponent.html",[0,0.565,232,0.97]],["body/components/GameOverComponent.html",[0,0.951,1,0.884,2,1.746,3,0.29,4,0.29,5,1.364,6,1.364,7,1.364,8,1.364,9,0.213,11,0.419,12,2.32,16,2.1,17,2.983,18,1.364,19,2.778,20,1.653,21,1.911,23,1.911,25,0.374,26,1.043,29,1.043,32,3.233,35,1.429,40,1.149,42,0.567,43,0.034,44,0.536,45,0.605,46,0.567,52,1.238,53,0.795,54,0.962,61,2.1,74,1.695,77,0.681,83,2.041,96,1.746,101,0.677,102,0.623,106,2.1,107,0.331,108,0.109,111,1.048,114,0.681,125,1.304,126,2.1,128,3.358,185,2.001,222,1.142,223,1.746,224,1.364,225,2.391,226,1.364,227,1.364,228,0.962,229,1.364,230,0.884,231,1.364,232,1.549,233,1.708,234,1.364,235,0.962,236,1.364,237,0.884,238,1.364,239,0.962,240,1.246,241,1.364,242,1.364,243,0.015,244,0.021,245,0.028,269,2.915,284,1.137,286,2.32,313,1.656,333,1.246,369,1.348,395,1.246,449,1.656,463,3.528,486,1.911,506,1.911,560,2.448,566,3.233,611,1.746,634,2.32,644,1.844,647,2.397,649,2.584,650,2.08,661,2.08,669,3.233,677,2.397,686,1.656,690,2.915,691,4.585,692,2.397,693,4.031,694,4.031,695,4.654,696,4.031,697,5.651,698,5.503,699,2.397,700,4.031,701,2.877,702,4.031,703,2.915,704,3.358,705,4.031,706,2.877,707,4.031,708,3.358,709,2.877,710,5.86,711,4.654,712,4.654,713,4.654,714,4.031,715,4.031,716,2.877,717,2.877,718,2.08,719,2.397,720,2.877,721,2.877,722,2.915,723,4.031,724,4.031,725,4.031,726,4.031,727,4.031]],["title/modules/MaterialModule.html",[433,1.497,446,1.816]],["body/modules/MaterialModule.html",[3,0.434,4,0.434,9,0.319,11,0.627,43,0.034,101,0.922,102,0.932,107,0.496,108,0.163,125,1.114,243,0.022,244,0.027,245,0.022,433,2.49,435,2.621,440,2.76,446,3.023,451,3.114,453,3.798,728,3.114,729,4.722,730,5.253,731,4.376,732,4.306,733,4.376,734,4.306,735,4.376,736,4.306,737,4.376,738,4.306,739,4.376,740,4.306,741,4.376,742,4.306,743,4.376,744,4.306,745,4.306,746,4.376,747,4.306,748,3.114]],["title/interfaces/PracticeQuestion.html",[363,1.367,376,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.331,4,0.331,9,0.243,11,0.477,25,0.426,26,1.14,43,0.034,44,0.537,45,0.426,51,1.539,52,1.006,53,0.646,58,1.553,77,1.356,79,1.193,99,1.568,101,0.641,107,0.377,108,0.167,110,1.909,114,1.317,117,1.707,125,1.14,172,1.707,173,2.48,177,1.885,184,2.1,243,0.023,244,0.023,245,0.017,282,1.553,284,0.924,300,1.419,363,2.408,364,1.708,365,2.369,366,1.885,367,2.1,368,3.602,369,1.666,370,3.199,371,1.814,372,3.193,373,1.481,374,2.114,375,1.553,376,3.066,377,3.188,378,2.1,379,2.1,380,2.369,381,1.707,382,3.193,383,2.362,384,2.369,385,4.443,386,2.114,387,2.369,388,2.369,389,3.188,390,2.369,391,1.885,392,2.1,393,1.707,394,2.535,395,1.419,396,1.885,397,2.369,398,2.369,399,2.369,400,2.308,401,2.369,402,2.369,403,2.369,404,2.369,405,2.369,406,2.369,407,2.537,408,2.1,409,1.553,410,1.419,411,2.369,412,3.602,413,2.369,414,2.369,415,1.707,416,2.369,417,2.1,418,2.369,419,2.369,420,2.369,421,2.369,422,2.369,423,2.369,424,2.369,425,2.369,426,2.369,427,2.369,428,2.369]],["title/classes/Question.html",[108,0.119,373,0.817]],["body/classes/Question.html",[3,0.41,4,0.41,9,0.302,11,0.737,25,0.528,26,1.311,35,1.557,40,1.252,42,0.801,43,0.033,44,0.41,45,0.752,46,0.801,77,1.512,107,0.468,108,0.154,243,0.021,244,0.026,245,0.021,373,1.683,386,2.49,394,2.718,484,2.117,679,3.994,749,3.385,750,2.939,751,3.385,752,4.537,753,4.064,754,4.064,755,5.068,756,5.523,757,5.523,758,5.523,759,4.601,760,4.064,761,4.064,762,4.064]],["title/classes/QuestionPreparer.html",[108,0.119,763,2.283]],["body/classes/QuestionPreparer.html",[3,0.322,4,0.322,9,0.236,11,0.464,20,1.22,25,0.414,29,1.363,40,1.063,42,0.969,43,0.034,44,0.495,45,0.638,46,0.969,51,1.503,53,0.629,54,1.066,64,3.552,77,1.376,84,0.979,90,2.773,99,1.602,101,0.63,107,0.367,108,0.186,110,2.46,114,1.025,119,1.511,125,1.567,129,2.305,144,2.655,243,0.016,244,0.022,245,0.016,333,1.381,364,1.618,366,3.031,369,1.066,370,2.49,371,1.161,373,1.469,375,1.511,386,2.09,400,2.46,407,3.031,484,1.66,486,2.051,487,4.333,528,1.834,538,3.604,621,3.129,660,2.773,663,2.043,763,3.129,764,2.655,765,5.268,766,2.773,767,4.326,768,4.326,769,4.326,770,3.187,771,4.326,772,5.268,773,3.604,774,3.604,775,4.326,776,3.187,777,3.604,778,4.911,779,4.326,780,3.187,781,4.326,782,4.326,783,4.588,784,3.187,785,3.604,786,3.129,787,3.187,788,3.187,789,3.187,790,3.187,791,3.187,792,3.187,793,3.187,794,3.187,795,3.187,796,3.187,797,3.604,798,3.187,799,3.187,800,3.187,801,4.326,802,3.187,803,4.326,804,3.187,805,3.187,806,3.187,807,3.187,808,3.187,809,3.187,810,3.187,811,4.326,812,4.326,813,3.187,814,3.187,815,3.187,816,3.187,817,3.187,818,2.043,819,2.305,820,2.655,821,2.655,822,2.305,823,2.655,824,3.187,825,3.187,826,3.187,827,3.187]],["title/injectables/QuestionService.html",[246,1.149,559,1.816]],["body/injectables/QuestionService.html",[3,0.342,4,0.342,9,0.251,11,0.493,15,2.346,25,0.44,26,1.165,29,1.165,35,1.555,40,1.168,42,0.888,43,0.034,44,0.455,45,0.73,46,0.888,51,1.165,52,1.384,53,0.888,68,2.136,69,2.136,84,1.04,94,2.346,99,0.955,101,0.858,102,0.733,107,0.39,108,0.192,111,1.233,114,1.279,125,1.165,243,0.017,244,0.023,245,0.017,246,1.64,247,1.948,249,2.888,258,2.17,259,3.46,261,2.136,275,2.665,284,1.271,303,2.17,305,1.948,306,1.763,307,2.17,308,2.17,309,1.763,311,1.763,312,1.605,314,1.948,315,1.763,328,3.46,329,2.637,364,1.384,371,1.64,373,1.454,375,1.605,415,2.346,549,3.904,559,2.592,560,2.555,601,2.346,611,2.504,750,3.258,774,3.753,828,2.82,829,3.258,830,5.064,831,4.505,832,4.505,833,4.505,834,5.398,835,3.385,836,4.505,837,3.753,838,3.385,839,3.385,840,3.753,841,3.753,842,3.385,843,2.82,844,2.82,845,2.82,846,3.385,847,3.385,848,3.753,849,3.385,850,5.398,851,4.497,852,3.385,853,4.218,854,3.385,855,3.385]],["title/classes/QuestionStore.html",[108,0.119,381,1.644]],["body/classes/QuestionStore.html",[3,0.269,4,0.269,9,0.198,11,0.389,25,0.347,26,0.989,29,0.989,34,2.2,40,1.293,42,1.018,43,0.034,44,0.597,45,0.671,46,1.018,51,1.598,52,0.82,53,1.091,54,1.494,58,1.813,77,1.34,78,1.06,79,1.627,99,1.724,101,0.556,107,0.307,108,0.169,110,2.113,114,1.223,117,1.391,125,0.989,172,1.391,173,2.495,177,2.2,184,2.451,243,0.02,244,0.02,245,0.014,282,1.266,284,1.078,300,1.656,363,2.113,364,1.498,366,3.468,367,1.712,368,2.765,369,1.279,370,2.2,371,1.392,372,2.451,373,1.262,374,2.195,375,1.266,376,2.2,377,1.931,378,2.451,379,2.451,380,2.765,381,1.992,382,3.443,383,2.546,384,3.23,385,4.446,386,2.285,387,3.23,388,3.23,389,3.733,390,2.765,391,2.2,392,2.451,393,1.992,394,2.495,395,1.656,396,2.571,397,1.931,398,1.931,399,1.931,400,2.45,401,1.931,402,1.931,403,1.931,404,1.931,405,1.931,406,1.931,407,2.807,408,2.451,409,1.813,410,1.656,411,2.765,412,3.23,413,1.931,414,1.931,415,1.992,416,2.765,417,2.864,418,2.765,419,1.931,420,1.931,421,1.931,422,1.931,423,1.931,424,1.931,425,1.931,426,1.931,427,1.931,428,1.931,484,1.391,549,1.931,856,3.824,857,3.824,858,2.67,859,2.67,860,2.67,861,2.67,862,2.67,863,2.67,864,2.67,865,2.67,866,2.67,867,2.67,868,2.67,869,2.67,870,2.67,871,2.67,872,2.67,873,2.67,874,2.67]],["title/components/QuestionsComponent.html",[0,0.565,235,1.056]],["body/components/QuestionsComponent.html",[0,0.959,1,0.739,2,1.536,3,0.243,4,0.243,5,1.141,6,1.141,7,1.141,8,1.141,9,0.179,11,0.35,16,1.846,18,1.141,19,2.66,20,1.582,21,1.681,23,1.681,25,0.673,26,0.917,29,0.917,35,1.293,40,1.235,42,0.83,43,0.034,44,0.5,45,0.696,46,0.83,51,1.34,53,0.83,54,1.408,61,1.846,62,2.563,73,2.977,77,0.84,80,2.272,84,1.089,95,2.419,96,1.536,101,0.754,102,0.521,107,0.277,108,0.091,111,0.876,114,0.57,119,1.141,120,2.849,121,3.163,125,0.622,146,2.563,186,3.359,203,2.004,208,1.542,222,0.955,223,1.536,224,1.141,225,2.202,226,1.141,227,1.141,228,0.805,229,1.141,230,0.739,231,1.141,232,0.739,233,0.678,234,1.141,235,1.553,236,1.141,237,0.739,238,1.141,239,0.805,240,1.042,241,1.141,242,1.141,243,0.024,244,0.018,245,0.012,263,2.673,273,3.869,284,1.31,286,2.04,300,1.536,306,1.253,312,1.141,333,1.042,364,1.817,371,1.803,373,1.451,375,1.141,386,1.965,486,1.681,545,3.873,546,2.849,547,4.125,559,2.981,563,1.384,578,2.563,595,1.542,611,2.145,624,2.953,628,2.953,630,2.953,643,2.004,659,2.953,680,2.004,752,2.563,783,2.953,797,2.004,837,2.004,875,2.004,876,4.209,877,4.209,878,4.209,879,3.545,880,4.644,881,3.545,882,2.953,883,3.545,884,4.209,885,2.406,886,3.545,887,2.406,888,2.406,889,2.406,890,2.406,891,3.507,892,2.406,893,3.545,894,2.406,895,3.545,896,2.953,897,2.04,898,3.545,899,3.545,900,3.545,901,4.644,902,2.406,903,4.209,904,3.545,905,2.406,906,2.953,907,3.545,908,3.545,909,3.545,910,3.545,911,2.272,912,3.044,913,4.125,914,2.563,915,2.563,916,3.507,917,4.209,918,2.406,919,2.004,920,2.406,921,2.406,922,2.406,923,3.545,924,2.406,925,3.545,926,3.545,927,2.406,928,2.004,929,1.384,930,2.406,931,2.406,932,2.406,933,2.406,934,2.406,935,2.406,936,2.406,937,2.406,938,2.406,939,2.406,940,3.545,941,2.406,942,2.406,943,2.406,944,2.406,945,2.406,946,2.406,947,2.406,948,2.406,949,2.406,950,2.406,951,2.406,952,3.545,953,2.406,954,3.545,955,3.545,956,2.406,957,2.406,958,2.004,959,2.406]],["title/guards/RegisterGuard.html",[474,2.023,960,2.023]],["body/guards/RegisterGuard.html",[3,0.408,4,0.408,9,0.3,11,0.588,16,2.106,25,0.525,29,1.307,35,1.693,40,1.094,42,0.797,43,0.034,44,0.408,45,0.525,46,0.797,53,0.797,74,2.102,99,1.14,101,0.802,102,0.875,107,0.465,108,0.153,111,1.472,114,1.197,233,1.628,243,0.021,244,0.026,245,0.021,246,1.84,284,1.425,286,2.907,314,2.327,315,2.106,333,1.752,395,1.752,473,2.327,474,3.239,477,5.049,500,2.907,501,3.239,558,3.538,560,2.625,566,3.239,588,3.239,644,2.592,649,2.592,666,4.209,686,2.327,699,3.369,960,3.239,961,3.369,962,3.369,963,5.053,964,5.053,965,5.053,966,4.044,967,4.209,968,4.044,969,5.053,970,4.209,971,4.044]],["title/components/SignupComponent.html",[0,0.565,237,0.97]],["body/components/SignupComponent.html",[0,0.797,1,0.581,2,1.28,3,0.191,4,0.191,5,0.897,6,0.897,7,0.897,8,0.897,9,0.14,11,0.275,12,1.7,16,1.538,17,2.329,18,0.897,19,2.485,20,1.478,21,1.4,23,1.4,25,0.246,26,0.764,29,0.764,32,2.632,33,3.421,35,1.116,40,1.16,42,0.373,43,0.034,44,0.497,45,0.384,46,0.373,51,1.062,53,0.81,54,1.373,59,2.716,61,2.458,68,1.4,73,3.025,74,1.495,78,1.767,79,1.622,83,2.08,84,1.567,85,3.027,87,3.71,90,3.025,96,1.28,99,0.833,101,0.687,102,0.409,104,1.213,107,0.218,108,0.072,111,0.689,125,1.062,164,3.421,166,1.576,173,2.045,185,2.024,199,2.461,205,1.893,221,3.421,222,0.751,223,1.28,224,0.897,225,1.947,226,0.897,227,0.897,228,0.633,229,0.897,230,0.581,231,0.897,232,0.581,233,1.622,234,0.897,235,0.633,236,0.897,237,1.261,238,0.897,239,0.633,240,0.82,241,0.897,242,0.897,243,0.01,244,0.015,245,0.01,269,2.136,284,1.439,313,1.089,333,1.929,350,2.461,364,0.907,369,0.988,371,1.076,373,0.764,383,2.418,395,2.136,400,1.28,473,1.089,478,4.742,486,1.947,490,2.969,493,2.136,501,2.632,506,1.4,519,2.632,546,1.7,556,3.877,557,1.576,558,2.716,560,2.136,566,1.893,570,2.136,575,2.461,578,2.136,587,1.779,588,1.893,594,1.893,595,2.632,599,2.136,601,1.538,607,3.689,611,2.045,625,2.461,632,2.969,634,1.7,644,1.213,649,2.329,650,3.22,660,2.632,661,1.368,663,1.893,669,2.632,670,2.461,686,1.7,719,2.461,722,3.22,818,1.893,819,2.136,845,1.576,848,1.576,882,3.421,897,2.363,911,2.632,967,2.461,972,1.576,973,2.136,974,2.954,975,3.877,976,3.634,977,2.954,978,3.634,979,3.634,980,4.454,981,3.634,982,4.106,983,3.16,984,2.954,985,1.892,986,2.461,987,2.954,988,1.892,989,4.106,990,1.892,991,1.892,992,2.954,993,1.892,994,2.461,995,4.106,996,2.461,997,1.892,998,2.954,999,1.892,1000,1.892,1001,3.932,1002,1.892,1003,1.892,1004,1.892,1005,1.892,1006,1.892,1007,1.892,1008,2.954,1009,2.954,1010,2.954,1011,2.954,1012,1.892,1013,1.892,1014,2.954,1015,2.954,1016,2.954,1017,1.892,1018,1.892,1019,1.892,1020,1.892,1021,1.892,1022,3.634,1023,2.954,1024,2.954,1025,3.634,1026,1.892,1027,2.954,1028,4.72,1029,2.954,1030,2.954,1031,4.106,1032,2.954,1033,2.954,1034,2.136,1035,2.461,1036,2.954,1037,2.954,1038,2.136,1039,4.106,1040,2.969,1041,2.461,1042,4.106,1043,2.461,1044,2.954,1045,2.461,1046,2.461,1047,4.72,1048,2.954,1049,1.368,1050,2.136,1051,2.461,1052,2.461,1053,2.969,1054,2.954,1055,4.72,1056,2.954,1057,2.954,1058,2.461,1059,2.461,1060,2.461,1061,2.954,1062,2.954,1063,2.954,1064,2.461,1065,2.461,1066,1.892,1067,1.892]],["title/classes/Team.html",[83,1.056,108,0.119]],["body/classes/Team.html",[3,0.323,4,0.323,9,0.238,11,0.632,25,0.416,26,1.123,35,1.334,40,1.281,42,0.632,43,0.033,44,0.533,45,0.769,46,1.207,59,2.834,61,3.124,77,1.402,83,2.16,95,1.669,107,0.369,108,0.121,185,2.257,233,1.604,243,0.016,244,0.022,245,0.022,343,3.561,369,1.452,373,1.274,374,1.954,394,2.771,400,2.133,410,1.388,484,1.669,545,4.113,546,2.834,611,2.798,618,3.561,679,4.207,722,4.113,994,4.596,996,4.739,1059,4.103,1068,2.669,1069,4.739,1070,5.688,1071,5.688,1072,3.204,1073,3.204,1074,4.342,1075,4.925,1076,4.103,1077,4.596,1078,4.925,1079,4.925,1080,4.103,1081,3.204,1082,3.204,1083,3.204,1084,3.204,1085,3.204,1086,3.204,1087,3.204]],["title/injectables/TeamService.html",[246,1.149,560,1.367]],["body/injectables/TeamService.html",[3,0.26,4,0.26,9,0.191,11,0.374,15,1.939,25,0.334,26,0.963,29,0.963,34,2.142,35,1.344,40,1.27,42,1.079,43,0.034,44,0.552,45,0.753,46,1.079,52,1.78,53,1.079,54,0.86,58,1.765,69,2.783,74,1.746,77,1.136,78,1.021,79,1.852,83,2.168,84,1.563,94,1.939,99,1.673,101,0.772,102,0.557,107,0.296,108,0.166,109,2.692,111,0.937,114,1.352,125,0.963,126,1.939,140,1.86,173,1.114,233,1.05,243,0.013,244,0.019,245,0.013,246,1.355,247,1.48,249,2.386,252,4.238,258,1.649,259,3.073,261,1.765,275,2.706,277,3.994,279,2.692,280,3.163,281,2.386,282,1.219,284,1.05,286,2.142,296,2.143,298,2.143,300,1.612,301,3.644,303,2.386,305,1.48,306,1.34,307,1.649,308,1.649,309,1.34,311,1.34,312,1.219,313,1.48,314,1.48,315,1.34,316,3.101,318,3.994,319,2.143,321,3.101,327,2.143,328,1.649,329,1.34,331,2.143,359,2.143,361,2.143,362,1.86,369,1.245,383,2.412,394,2.297,415,1.939,486,1.765,506,1.765,560,1.612,634,2.142,656,3.073,829,2.692,929,3.052,1069,3.101,1077,2.143,1088,2.143,1089,3.722,1090,3.722,1091,3.101,1092,3.101,1093,2.572,1094,3.722,1095,2.572,1096,3.722,1097,2.572,1098,3.722,1099,2.572,1100,3.722,1101,2.572,1102,3.722,1103,3.722,1104,2.572,1105,2.572,1106,2.572,1107,2.572,1108,2.572,1109,2.572,1110,1.86,1111,2.572,1112,2.572,1113,2.572,1114,2.572,1115,4.374,1116,2.572,1117,2.572,1118,2.572,1119,2.572,1120,4.794,1121,2.572,1122,2.572,1123,2.572,1124,2.572,1125,2.572,1126,2.572,1127,2.572,1128,2.572,1129,2.572]],["title/injectables/TimeService.html",[246,1.149,983,2.023]],["body/injectables/TimeService.html",[3,0.414,4,0.414,9,0.305,11,0.597,15,2.656,25,0.533,29,1.319,35,1.704,40,1.104,42,0.809,43,0.034,44,0.414,45,0.533,46,0.809,51,1.319,53,0.809,94,2.656,101,0.868,102,0.888,107,0.472,108,0.155,111,1.495,114,0.972,185,2.303,233,1.438,243,0.021,244,0.026,245,0.021,246,1.857,247,2.362,249,3.269,258,2.631,259,3.72,261,2.418,275,2.63,290,2.935,305,2.362,306,2.138,307,2.631,308,2.631,309,2.138,311,2.138,312,1.946,314,2.362,315,2.138,383,2.418,449,2.935,587,2.209,829,3.688,851,3.419,983,3.269,1053,3.688,1130,3.419,1131,5.804,1132,4.104,1133,4.104,1134,4.249,1135,5.1,1136,5.1,1137,4.104]],["title/components/TimerComponent.html",[0,0.565,239,1.056]],["body/components/TimerComponent.html",[0,0.779,1,0.783,2,1.602,3,0.257,4,0.257,5,1.208,6,1.208,7,1.208,8,1.208,9,0.189,11,0.371,18,1.208,19,2.699,20,1.606,21,1.753,23,1.753,25,0.331,26,0.956,29,0.956,34,2.127,40,1.294,42,0.503,43,0.034,44,0.439,45,0.687,46,0.503,53,1.141,54,1.934,62,2.674,68,1.753,77,0.876,78,1.011,79,0.928,80,2.37,84,0.783,96,1.602,99,1.606,101,0.371,102,0.552,107,0.293,108,0.096,114,0.876,119,1.208,185,2.164,188,1.843,208,1.633,222,1.011,223,1.602,224,1.208,225,2.263,226,1.208,227,1.208,228,0.852,229,1.208,230,0.783,231,1.208,232,0.783,233,0.719,234,1.208,235,0.852,236,1.208,237,0.783,238,1.208,239,1.596,240,2.684,241,1.208,242,1.208,243,0.013,244,0.019,245,0.013,263,2.747,391,1.466,400,2.068,409,1.753,448,2.747,497,4.236,556,4.236,563,1.466,571,3.976,581,3.976,587,2.068,598,3.249,603,2.674,611,2.466,613,2.123,615,3.976,621,2.674,648,3.625,686,2.504,688,3.625,703,3.943,718,1.843,750,2.674,891,3.625,897,1.466,1038,2.674,1046,3.08,1134,2.123,1138,2.123,1139,3.697,1140,3.697,1141,3.697,1142,4.351,1143,3.697,1144,5.453,1145,4.351,1146,4.773,1147,4.773,1148,3.976,1149,5.068,1150,4.773,1151,2.548,1152,3.697,1153,2.548,1154,2.548,1155,3.697,1156,5.286,1157,2.548,1158,4.773,1159,2.548,1160,4.773,1161,3.697,1162,4.773,1163,2.548,1164,2.548,1165,2.548,1166,2.548,1167,2.548,1168,2.548,1169,3.697,1170,2.548,1171,2.548,1172,2.548,1173,2.548,1174,2.548,1175,2.548,1176,2.548,1177,1.843,1178,4.773,1179,4.351,1180,4.773,1181,2.548,1182,2.548,1183,2.548,1184,2.548,1185,2.548,1186,2.548,1187,2.548,1188,2.548,1189,2.548,1190,2.548]],["title/coverage.html",[1191,3.581]],["body/coverage.html",[0,1.031,1,0.948,9,0.229,10,2.572,20,0.871,37,1.979,43,0.034,45,0.401,83,1.032,84,0.948,108,0.206,208,4.214,228,1.032,230,0.948,232,0.948,235,1.032,237,0.948,239,1.032,243,0.016,244,0.022,245,0.016,246,1.893,248,2.572,275,2.007,309,1.608,310,2.232,311,1.608,329,1.608,363,1.834,364,0.948,366,2.991,367,3.097,373,0.798,374,1.225,376,1.776,381,2.205,396,1.776,409,3.053,429,2.572,435,1.337,463,1.979,474,1.979,485,2.572,497,3.759,515,2.232,537,2.572,558,2.78,559,1.776,560,1.337,587,1.337,640,2.232,641,2.232,642,2.232,691,2.572,692,2.572,728,2.232,749,2.572,763,2.232,764,2.572,828,2.572,875,2.572,914,2.232,915,2.232,960,1.979,962,2.572,972,2.572,983,1.979,1068,2.572,1088,2.572,1110,2.232,1130,2.572,1138,2.572,1191,2.572,1192,2.572,1193,3.087,1194,3.087,1195,6.486,1196,4.233,1197,3.087,1198,4.242,1199,4.233,1200,3.087,1201,3.087,1202,4.233,1203,4.233,1204,4.233,1205,2.572,1206,3.526,1207,2.572,1208,2.572,1209,3.526,1210,3.526,1211,2.572,1212,4.233,1213,4.686,1214,2.572,1215,2.572,1216,2.572,1217,2.572,1218,2.572,1219,3.087,1220,4.233,1221,3.938,1222,2.572,1223,2.232,1224,2.572,1225,2.572,1226,3.526,1227,3.526,1228,2.572,1229,2.572,1230,3.087,1231,3.087]],["title/dependencies.html",[436,2.183,1232,2.641]],["body/dependencies.html",[43,0.034,52,1.342,102,0.945,104,2.8,105,3.831,106,2.76,243,0.022,244,0.027,245,0.022,306,2.275,436,2.513,473,2.513,513,3.638,514,2.8,785,3.638,853,3.638,912,3.831,919,3.638,1233,6.306,1234,4.368,1235,5.298,1236,4.368,1237,4.368,1238,4.368,1239,4.368,1240,3.638,1241,4.368,1242,4.368,1243,3.831,1244,4.368,1245,4.368,1246,4.368,1247,4.414,1248,4.368,1249,4.368,1250,4.368,1251,3.831,1252,4.368,1253,3.638,1254,4.368,1255,4.368,1256,4.368,1257,4.368,1258,4.368,1259,3.638,1260,4.368,1261,4.368,1262,4.368,1263,4.368]],["title/miscellaneous/functions.html",[1264,1.693,1265,3.161]],["body/miscellaneous/functions.html",[25,0.573,42,1.129,43,0.031,44,0.578,45,0.573,46,1.129,78,1.749,110,1.909,126,2.295,243,0.023,244,0.027,245,0.023,261,2.089,275,2.887,282,2.714,284,1.243,290,2.536,300,1.909,309,2.774,362,3.187,374,1.749,393,2.295,417,3.415,786,3.187,822,3.852,897,2.536,906,3.671,929,2.536,1034,3.187,1198,3.187,1221,3.187,1222,4.77,1223,3.187,1226,3.671,1227,4.77,1228,4.438,1229,4.438,1243,3.852,1264,2.825,1265,3.671,1266,5.327,1267,3.671,1268,3.671,1269,4.407,1270,4.407,1271,5.327,1272,5.327,1273,4.407,1274,4.407,1275,3.671,1276,3.187,1277,4.407,1278,3.187]],["title/index.html",[25,0.343,172,1.376,598,1.693]],["body/index.html",[0,0.902,4,0.338,9,0.374,20,1.262,43,0.023,44,0.338,51,1.158,52,1.771,84,1.03,121,1.929,122,2.793,126,2.332,129,3.237,146,2.424,160,2.793,182,2.793,243,0.017,244,0.023,245,0.023,290,2.9,371,1.221,374,2.223,382,2.149,386,1.331,393,2.332,408,2.149,410,2.183,432,2.793,448,1.929,449,1.929,506,2.122,514,2.149,528,1.929,563,1.929,564,2.793,586,2.424,587,1.939,594,3.447,601,1.746,766,3.695,823,2.793,841,2.793,1049,2.424,1050,2.424,1051,2.793,1058,2.793,1148,2.793,1177,2.424,1243,2.424,1251,2.424,1276,2.424,1278,2.424,1279,5.885,1280,3.353,1281,3.889,1282,5.039,1283,3.353,1284,3.353,1285,6.28,1286,3.353,1287,2.793,1288,3.353,1289,3.353,1290,6.054,1291,3.353,1292,5.039,1293,3.353,1294,4.476,1295,5.039,1296,2.793,1297,4.48,1298,2.793,1299,3.353,1300,3.353,1301,3.353,1302,2.793,1303,3.353,1304,4.48,1305,3.353,1306,3.729,1307,4.476,1308,3.353,1309,3.353,1310,3.353,1311,2.793,1312,3.353,1313,5.885,1314,4.198,1315,3.353,1316,4.802,1317,3.353,1318,2.793,1319,3.353,1320,3.353,1321,3.729,1322,4.48,1323,2.424,1324,4.476,1325,3.729,1326,3.353,1327,3.353,1328,3.353,1329,3.353,1330,4.198,1331,3.353,1332,2.793,1333,4.476,1334,3.353,1335,2.793,1336,3.353,1337,2.793,1338,2.793,1339,2.793,1340,5.039,1341,3.353,1342,3.353,1343,4.476,1344,3.353,1345,4.476,1346,2.793,1347,3.353,1348,3.353,1349,3.353,1350,3.353,1351,2.793,1352,3.353,1353,3.353,1354,4.476,1355,4.476,1356,4.476,1357,3.353,1358,3.353,1359,3.353,1360,3.353,1361,2.793,1362,4.476,1363,3.353,1364,4.476,1365,3.353,1366,3.353,1367,3.353,1368,3.353,1369,3.353,1370,3.353,1371,3.353,1372,3.729]],["title/modules.html",[435,1.862]],["body/modules.html",[43,0.029,106,2.588,178,4.14,205,3.665,243,0.026,244,0.029,245,0.026,434,3.185,435,2.153,445,2.859,446,2.859,1373,4.969,1374,6.02,1375,5.718]],["title/overview.html",[1376,3.581]],["body/overview.html",[1,1.738,2,1.859,43,0.033,222,1.703,228,2.082,230,1.738,232,1.738,235,1.893,237,1.738,239,1.893,243,0.022,244,0.027,245,0.022,247,2.469,365,3.103,433,2.034,434,4.202,435,1.859,436,2.469,437,3.575,438,3.575,439,3.575,440,2.751,441,3.575,442,3.575,443,3.575,444,3.575,445,3.257,446,3.257,447,4.367,448,2.469,449,2.469,472,2.235,484,2.235,660,2.751,663,2.751,818,2.751,819,3.103,820,3.575,821,3.575,960,2.751,1040,3.103,1376,3.575]],["title/routes.html",[472,2.239]],["body/routes.html",[43,0.03,243,0.026,244,0.03,245,0.026,472,2.658]],["title/todo.html",[119,1.252,172,1.376,598,1.693]],["body/todo.html",[0,0.889,3,0.244,12,2.049,14,2.704,15,1.26,20,1.004,43,0.028,44,0.244,51,1.343,52,1.431,53,0.477,58,1.147,59,2.987,64,1.75,68,1.147,69,2.002,74,1.89,80,1.551,83,1.841,84,1.431,86,1.551,94,1.854,100,1.551,106,1.26,109,3.054,110,1.048,117,1.26,119,3.062,120,1.393,121,2.049,126,1.26,137,1.75,159,2.016,161,2.016,163,3.519,170,3.88,173,1.048,177,1.393,179,2.016,180,2.016,185,1.413,188,1.75,196,1.551,205,1.551,233,1.4,240,1.83,243,0.012,244,0.018,245,0.012,261,1.147,263,2.049,275,1.688,280,2.575,281,3.182,282,1.688,284,0.682,290,1.393,343,3.054,363,1.048,364,0.743,369,0.809,372,1.551,373,1.284,374,1.413,379,1.551,386,0.96,391,1.393,392,1.551,393,1.26,394,1.048,410,1.048,433,1.147,436,1.393,472,1.26,496,2.966,500,1.393,502,2.016,506,1.147,518,2.016,524,3.519,526,1.75,528,1.393,532,2.016,546,1.393,563,1.393,569,2.016,570,2.575,573,2.016,586,1.75,587,1.542,588,3.182,594,1.551,595,1.551,601,1.854,603,1.75,609,2.966,611,1.542,618,1.75,634,1.393,656,1.551,748,1.75,751,2.016,759,2.016,766,3.182,786,1.75,818,1.551,822,1.75,896,2.016,897,1.393,911,2.282,912,3.054,913,2.016,916,2.016,928,2.016,929,2.68,961,2.016,970,2.016,973,1.75,975,3.054,986,3.519,1001,3.519,1034,2.575,1035,2.016,1041,2.016,1045,2.966,1049,1.75,1050,3.054,1052,2.016,1060,2.016,1064,2.016,1065,2.016,1076,2.016,1080,2.016,1177,3.054,1192,2.016,1240,2.016,1251,1.75,1253,2.966,1275,2.016,1281,1.75,1287,2.966,1296,2.016,1297,2.966,1298,3.519,1302,2.966,1306,2.966,1311,2.016,1314,2.966,1316,2.016,1321,2.016,1322,2.966,1323,1.75,1325,2.016,1330,2.016,1332,2.016,1337,2.016,1338,2.016,1339,2.016,1351,2.016,1372,2.016,1377,2.42,1378,2.42,1379,2.42,1380,2.42,1381,2.42,1382,2.42,1383,2.42,1384,2.966,1385,2.42,1386,2.42,1387,2.42,1388,2.42,1389,2.42,1390,2.42,1391,2.016,1392,2.42,1393,2.42,1394,2.42,1395,2.42,1396,2.42,1397,2.42,1398,3.56,1399,2.42,1400,2.42,1401,2.42,1402,3.56,1403,2.966,1404,2.42,1405,2.42,1406,2.42,1407,2.016,1408,3.56,1409,2.42,1410,2.42,1411,3.56,1412,3.56,1413,2.42,1414,5.366,1415,2.42,1416,2.016,1417,2.42,1418,2.42,1419,2.42,1420,2.42,1421,3.56,1422,2.42,1423,2.42,1424,2.42,1425,2.42,1426,2.42,1427,2.42,1428,2.42,1429,2.016,1430,2.42,1431,2.42,1432,2.966,1433,2.42,1434,2.42,1435,2.42,1436,2.42,1437,2.42,1438,4.964,1439,2.42,1440,2.42,1441,2.42,1442,2.42,1443,2.42,1444,2.42,1445,2.42,1446,2.42,1447,2.42,1448,2.42,1449,2.42,1450,2.42,1451,2.42,1452,2.42,1453,3.56,1454,2.966,1455,2.42,1456,2.42,1457,2.42,1458,2.42,1459,2.42,1460,2.42,1461,2.42,1462,2.42,1463,2.42,1464,2.42,1465,2.42,1466,2.42,1467,4.224,1468,2.42,1469,2.42,1470,2.42,1471,3.56,1472,2.42,1473,2.42,1474,2.42,1475,2.42,1476,2.42,1477,2.42,1478,2.42,1479,3.56,1480,2.42,1481,2.42,1482,2.42,1483,2.42,1484,2.42,1485,2.42,1486,3.56,1487,3.56,1488,3.56,1489,2.42,1490,2.42,1491,2.42,1492,2.42,1493,2.42,1494,2.42,1495,2.42,1496,2.42,1497,2.42,1498,2.42,1499,2.42,1500,3.56,1501,2.42,1502,2.42,1503,2.42,1504,2.42,1505,2.42,1506,2.42,1507,2.42,1508,2.42,1509,2.016,1510,2.42,1511,2.42,1512,2.42,1513,2.42,1514,2.42,1515,2.42,1516,2.42,1517,2.42,1518,2.42,1519,2.42,1520,3.56,1521,2.42,1522,2.42,1523,2.42,1524,2.42,1525,2.42,1526,2.42,1527,2.42,1528,2.42,1529,2.42,1530,2.42,1531,2.42,1532,2.42,1533,2.42,1534,2.42,1535,2.42,1536,2.42,1537,2.42,1538,2.42,1539,3.519,1540,2.42,1541,3.56,1542,2.42,1543,2.42,1544,2.42,1545,2.42,1546,2.42,1547,2.42,1548,2.42,1549,2.42,1550,2.42,1551,1.75,1552,2.42,1553,2.42,1554,2.42,1555,2.42,1556,2.42,1557,2.42,1558,2.42,1559,2.42]],["title/miscellaneous/variables.html",[1264,1.693,1551,2.743]],["body/miscellaneous/variables.html",[9,0.139,14,1.878,20,0.825,25,0.38,43,0.034,44,0.189,45,0.769,51,1.145,52,0.899,69,0.886,74,0.681,77,0.854,78,2.429,79,2.212,83,0.625,84,1.107,86,2.311,89,1.351,90,1.875,95,1.878,96,0.81,100,1.875,120,1.683,121,1.075,151,1.557,152,1.557,185,1.863,189,2.116,196,1.198,223,0.81,243,0.01,244,0.015,245,0.01,261,0.886,279,2.116,281,1.198,303,1.875,310,2.116,311,1.524,324,1.557,328,2.615,333,0.81,334,1.351,363,0.81,364,1.253,369,1.57,370,3.074,371,0.681,373,1.431,374,1.863,381,1.878,383,0.886,386,2.161,395,0.81,396,2.074,409,0.886,410,0.81,435,1.562,472,0.973,476,1.557,490,1.351,500,1.683,514,2.311,515,2.949,519,1.198,526,1.351,528,1.683,558,3.301,584,1.557,587,2.034,599,2.116,601,0.973,604,1.557,605,1.557,607,1.351,632,1.351,640,2.116,641,2.116,642,2.116,656,1.875,669,1.198,690,2.607,703,2.607,704,1.557,708,1.557,718,1.351,728,1.351,729,1.557,731,1.557,733,1.557,735,1.557,737,1.557,739,1.557,741,1.557,743,1.557,746,1.557,748,1.351,752,3.863,766,2.838,773,1.557,777,1.557,840,1.557,843,2.437,844,1.557,911,1.875,914,2.116,915,2.116,929,2.074,958,3.003,973,1.351,975,1.351,1038,1.351,1040,1.351,1043,1.557,1053,2.116,1091,2.437,1092,2.437,1110,2.116,1198,1.351,1205,1.557,1206,4.089,1207,1.557,1208,1.557,1209,3.398,1210,1.557,1211,2.437,1213,1.557,1214,2.437,1215,2.437,1216,2.437,1217,2.437,1218,1.557,1221,1.351,1223,2.116,1224,1.557,1225,1.557,1247,1.557,1259,1.557,1264,1.198,1267,4.673,1268,3.398,1276,2.607,1278,2.116,1281,1.351,1304,1.557,1318,1.557,1323,1.351,1335,3.003,1346,1.557,1361,1.557,1384,1.557,1391,1.557,1403,1.557,1407,1.557,1416,1.557,1429,1.557,1432,1.557,1454,3.398,1509,1.557,1539,1.557,1551,1.351,1560,1.869,1561,1.869,1562,1.869,1563,1.869,1564,2.926,1565,1.869,1566,1.869,1567,1.869,1568,1.869,1569,1.869,1570,1.869,1571,1.869,1572,1.869,1573,3.605,1574,1.869,1575,1.869,1576,1.869,1577,1.869,1578,1.869,1579,1.869,1580,1.869,1581,1.869,1582,1.869,1583,1.869,1584,1.869,1585,1.869,1586,1.869,1587,1.869,1588,2.926,1589,1.869,1590,1.869,1591,1.869,1592,2.926,1593,1.869,1594,2.926,1595,1.869,1596,1.869,1597,2.926,1598,1.869,1599,1.869,1600,1.869,1601,1.869,1602,1.869,1603,1.869,1604,1.869,1605,1.869,1606,1.869,1607,1.869,1608,1.869,1609,1.869,1610,1.869,1611,1.869,1612,1.869,1613,1.869,1614,1.869,1615,1.869,1616,1.869,1617,1.869,1618,1.869,1619,1.869,1620,1.869,1621,1.869,1622,1.869,1623,1.869,1624,1.869,1625,3.605,1626,1.869,1627,2.926,1628,1.869,1629,1.869,1630,2.926,1631,1.869,1632,1.869,1633,1.869,1634,1.869,1635,1.869,1636,1.869,1637,1.869,1638,1.869,1639,2.926,1640,1.869,1641,1.869,1642,1.869,1643,2.926,1644,1.869,1645,1.869,1646,1.869,1647,1.869,1648,1.869,1649,1.869,1650,1.869,1651,1.869,1652,1.869,1653,1.869,1654,1.869,1655,1.869,1656,1.869,1657,1.869,1658,2.926,1659,1.869,1660,1.869,1661,2.926,1662,1.869,1663,1.869,1664,1.869,1665,1.869,1666,1.869,1667,1.869,1668,1.869,1669,1.869,1670,2.926,1671,1.869,1672,2.926,1673,2.926,1674,1.869,1675,1.869,1676,1.869,1677,1.869,1678,1.869,1679,1.869,1680,1.869,1681,1.869,1682,2.926,1683,1.869,1684,1.869,1685,1.869,1686,1.869,1687,1.869,1688,1.869,1689,1.869,1690,2.926,1691,1.869,1692,1.869,1693,1.869,1694,1.869,1695,1.869,1696,1.869,1697,1.869,1698,1.869,1699,2.926,1700,1.869,1701,1.869,1702,1.869,1703,1.869,1704,1.869,1705,1.869,1706,1.869,1707,1.869,1708,1.869,1709,1.869,1710,2.926,1711,1.869,1712,1.869,1713,3.605,1714,2.926,1715,1.869,1716,1.869,1717,1.869,1718,1.869,1719,1.869,1720,1.869,1721,1.869,1722,1.869,1723,1.869,1724,1.869,1725,2.926,1726,1.869,1727,1.869,1728,1.869,1729,1.869,1730,4.428,1731,1.869,1732,1.869,1733,1.869,1734,1.869,1735,1.869,1736,1.869,1737,1.869,1738,1.869,1739,1.869,1740,1.869,1741,1.869,1742,2.926,1743,2.926,1744,1.869,1745,1.869,1746,2.926,1747,1.869,1748,1.869,1749,1.869,1750,1.869,1751,1.869,1752,1.869,1753,1.869,1754,1.869,1755,1.869,1756,1.869,1757,1.869,1758,1.869,1759,2.926,1760,1.869,1761,1.869,1762,1.869,1763,1.869,1764,1.869,1765,2.926,1766,2.926,1767,1.869,1768,1.869,1769,1.869,1770,1.869,1771,1.869,1772,1.869,1773,1.869,1774,1.869,1775,2.926,1776,1.869,1777,1.869,1778,1.869,1779,1.869,1780,1.869,1781,1.869,1782,1.869,1783,1.869,1784,2.926,1785,1.869,1786,1.869,1787,1.869,1788,1.869,1789,1.869,1790,1.869,1791,1.869,1792,1.869,1793,1.869,1794,1.869,1795,1.869,1796,1.869,1797,1.869,1798,1.869,1799,1.869,1800,1.869,1801,1.869,1802,1.869,1803,1.869,1804,1.869,1805,1.869]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":621,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1181,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":660,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["1.18.3",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1283,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":576,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":208,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":690,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1190,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":1017,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":211,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":1039,"title":{},"body":{"components/SignupComponent.html":{}}}],["19th",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1040,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1030,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":663,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":818,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":819,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":820,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":669,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":815,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":821,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":221,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9/9",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["_answers",{"_index":387,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":1069,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":384,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":388,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_token",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["a.points",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["absolute",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abused",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerated",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1519,"title":{},"body":{"todo.html":{}}}],["access",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":963,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["according",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["account",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":585,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":969,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":756,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":242,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":188,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":518,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":227,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":491,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":499,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":37,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":540,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":720,"title":{},"body":{"components/GameOverComponent.html":{}}}],["against",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1468,"title":{},"body":{"todo.html":{}}}],["agriculture",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alaskan",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["all(/^(?!.*\\/api",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowed",{"_index":501,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allowing",{"_index":1517,"title":{},"body":{"todo.html":{}}}],["allows",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":841,"title":{},"body":{"injectables/QuestionService.html":{},"index.html":{}}}],["already",{"_index":1001,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1335,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angu\\u2026",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":1281,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":919,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":305,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":732,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":734,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":736,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":738,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":740,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":742,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":744,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":747,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":473,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":876,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":925,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":910,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":912,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{},"todo.html":{}}}],["another",{"_index":1031,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":364,"title":{"interfaces/Answer.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":884,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":837,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":386,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answers(given",{"_index":405,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":807,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":1051,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1454,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/admin/check_token",{"_index":1803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/can_start",{"_index":1800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get_all",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":430,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":431,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":228,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":844,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":434,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":445,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1487,"title":{},"body":{"todo.html":{}}}],["architectural",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["architecture",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":783,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":948,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":798,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":808,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":811,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":812,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["art",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1317,"title":{},"body":{"index.html":{}}}],["artist",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ascending",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["assigns",{"_index":816,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["asteroid",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":417,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{}}}],["asyncdata",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1269,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":498,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":489,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":329,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":535,"title":{},"body":{"classes/Authorization.html":{}}}],["authorizes",{"_index":1446,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["automatic",{"_index":605,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1302,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autonomy",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowrongguess",{"_index":641,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":205,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{}}}],["await",{"_index":422,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1434,"title":{},"body":{"todo.html":{}}}],["azerbaijan",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["b.points",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["back",{"_index":1521,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1297,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":957,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":923,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1408,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1453,"title":{},"body":{"todo.html":{}}}],["bank",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":745,"title":{},"body":{"modules/MaterialModule.html":{}}}],["barber",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1034,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["basic",{"_index":1548,"title":{},"body":{"todo.html":{}}}],["basilica",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basis",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautification",{"_index":1379,"title":{},"body":{"todo.html":{}}}],["before",{"_index":500,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":1078,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["begun",{"_index":1557,"title":{},"body":{"todo.html":{}}}],["belt",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":1338,"title":{},"body":{"index.html":{},"todo.html":{}}}],["between",{"_index":1038,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["bildungsroman",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{}}}],["blob([data",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{}}}],["body",{"_index":853,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bond",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":286,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":215,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1361,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1426,"title":{},"body":{"todo.html":{}}}],["box",{"_index":213,"title":{},"body":{"components/AdminComponent.html":{}}}],["boy",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":519,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":543,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":573,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":544,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":642,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1374,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{},"todo.html":{}}}],["browser/animations",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":456,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1501,"title":{},"body":{"todo.html":{}}}],["bud",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buddy",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1316,"title":{},"body":{"index.html":{},"todo.html":{}}}],["built",{"_index":1306,"title":{},"body":{"index.html":{},"todo.html":{}}}],["button",{"_index":595,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":956,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["cached",{"_index":392,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":615,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1144,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":1176,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":571,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":477,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canada",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canstart",{"_index":1006,"title":{},"body":{"components/SignupComponent.html":{}}}],["carbon",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carmen",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["case",{"_index":343,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":425,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":307,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":851,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TimeService.html":{}}}],["catcherror(this.handleerroradmin",{"_index":326,"title":{},"body":{"injectables/AdminService.html":{}}}],["catcherror(this.handleerroruser",{"_index":1120,"title":{},"body":{"injectables/TeamService.html":{}}}],["categories",{"_index":1390,"title":{},"body":{"todo.html":{}}}],["category",{"_index":752,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["caveats",{"_index":1515,"title":{},"body":{"todo.html":{}}}],["center",{"_index":1461,"title":{},"body":{"todo.html":{}}}],["century",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cerium",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1364,"title":{},"body":{"index.html":{}}}],["changes",{"_index":903,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":946,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":943,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":944,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["characteristic",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charge",{"_index":378,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":528,"title":{},"body":{"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["check_token",{"_index":1802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":831,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":833,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkinterval",{"_index":1146,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["checktoken",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["checktoken(req",{"_index":503,"title":{},"body":{"classes/Authorization.html":{}}}],["chemical",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemistry",{"_index":1407,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["chicha",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["china",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorofluorocarbons",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choices",{"_index":758,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":199,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["circulation",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cities",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":108,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":484,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":200,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1147,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1155,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":616,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":685,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1282,"title":{},"body":{"index.html":{}}}],["click",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{}}}],["clicked",{"_index":186,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1140,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":727,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1311,"title":{},"body":{"index.html":{},"todo.html":{}}}],["coffee",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collection",{"_index":420,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":423,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":958,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":896,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["column",{"_index":202,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1372,"title":{},"body":{"index.html":{},"todo.html":{}}}],["comment",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":1513,"title":{},"body":{"todo.html":{}}}],["compared",{"_index":1494,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":987,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":1059,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":1053,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":578,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["completely",{"_index":357,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":226,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":349,"title":{},"body":{"injectables/AdminService.html":{}}}],["concat(['school,team",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["conduction",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":1464,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1380,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":931,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["connection",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1474,"title":{},"body":{"todo.html":{}}}],["considered",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":1029,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["console.log",{"_index":176,"title":{},"body":{"components/AdminComponent.html":{}}}],["console.log(`an",{"_index":426,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.log(errors",{"_index":793,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["console.log(teams",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["consoleoutput",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":312,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":1074,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":753,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":885,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":557,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":1072,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":699,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":755,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":486,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":843,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":668,"title":{},"body":{"components/GameComponent.html":{}}}],["contributes",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convection",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converted",{"_index":1547,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":702,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copied",{"_index":190,"title":{},"body":{"components/AdminComponent.html":{}}}],["copy",{"_index":717,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":371,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":370,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":914,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":817,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":604,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":1523,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1191,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":822,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["created",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":799,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1525,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1460,"title":{},"body":{"todo.html":{}}}],["crop",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cst",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"todo.html":{}}}],["culture",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["current",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":618,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["currentquestion",{"_index":545,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":954,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":955,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":942,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["database",{"_index":374,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":421,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":648,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1429,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dbpassword",{"_index":1216,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["dbuser",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1370,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deco",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":505,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team",{"_index":529,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.schoolname",{"_index":530,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.teamnumber",{"_index":531,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":520,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":635,"title":{},"body":{"components/GameComponent.html":{}}}],["default",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1351,"title":{},"body":{"index.html":{},"todo.html":{}}}],["denakk\\u2019e",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denali",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":436,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{},"todo.html":{}}}],["dependency",{"_index":1339,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1348,"title":{},"body":{"index.html":{}}}],["depth",{"_index":1531,"title":{},"body":{"todo.html":{}}}],["descending",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{}}}],["describe",{"_index":368,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["designed",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1296,"title":{},"body":{"index.html":{},"todo.html":{}}}],["develop",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["developed",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1278,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":1526,"title":{},"body":{"todo.html":{}}}],["diffusion",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dioxide",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directive",{"_index":224,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":241,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1315,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1294,"title":{},"body":{"index.html":{}}}],["disallows",{"_index":1559,"title":{},"body":{"todo.html":{}}}],["display",{"_index":630,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1139,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1318,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1366,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["div",{"_index":201,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1192,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["doesn't",{"_index":177,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["doesnt",{"_index":191,"title":{},"body":{"components/AdminComponent.html":{}}}],["dog",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["domesticated",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domsanitizer",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{}}}],["don",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":1049,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["don\\'t",{"_index":1067,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":350,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1403,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1437,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1463,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["during",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["dyno",{"_index":1512,"title":{},"body":{"todo.html":{}}}],["e2e",{"_index":1327,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":911,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":1043,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["earned",{"_index":1079,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":926,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["edge",{"_index":1495,"title":{},"body":{"todo.html":{}}}],["edwardian",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":927,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":223,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["emergencies",{"_index":1389,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":906,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1152,"title":{},"body":{"components/TimerComponent.html":{}}}],["end",{"_index":594,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ended",{"_index":1504,"title":{},"body":{"todo.html":{}}}],["endpoint",{"_index":1447,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":502,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":592,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enough",{"_index":175,"title":{},"body":{"components/AdminComponent.html":{}}}],["enter",{"_index":1055,"title":{},"body":{"components/SignupComponent.html":{}}}],["environment",{"_index":1206,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1344,"title":{},"body":{"index.html":{}}}],["err",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":428,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":282,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["error.error",{"_index":359,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["errorobject",{"_index":1274,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":786,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":792,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1481,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1385,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":670,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1516,"title":{},"body":{"todo.html":{}}}],["event",{"_index":273,"title":{},"body":{"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":353,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.total",{"_index":354,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":342,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":891,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":272,"title":{},"body":{"injectables/AdminService.html":{}}}],["everything",{"_index":182,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["example",{"_index":1057,"title":{},"body":{"components/SignupComponent.html":{}}}],["exchange",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":1324,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":899,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":184,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":570,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["expire",{"_index":1538,"title":{},"body":{"todo.html":{}}}],["expired",{"_index":280,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["explicitly",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1524,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1452,"title":{},"body":{"todo.html":{}}}],["export",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":514,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":377,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["eyes",{"_index":1533,"title":{},"body":{"todo.html":{}}}],["failed",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{}}}],["fails",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["failures",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":757,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":395,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1537,"title":{},"body":{"todo.html":{}}}],["fast",{"_index":174,"title":{},"body":{"components/AdminComponent.html":{}}}],["feature",{"_index":1462,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1416,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["federal",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feel",{"_index":1064,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["fields",{"_index":1553,"title":{},"body":{"todo.html":{}}}],["figaro",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["figure",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":346,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":347,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1304,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload(file",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":204,"title":{},"body":{"components/AdminComponent.html":{}}}],["filter(team",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1134,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["fine",{"_index":181,"title":{},"body":{"components/AdminComponent.html":{}}}],["finish",{"_index":1503,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":880,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":546,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["finished]{@link",{"_index":941,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":694,"title":{},"body":{"components/GameOverComponent.html":{}}}],["finishing",{"_index":1492,"title":{},"body":{"todo.html":{}}}],["firefox",{"_index":218,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":893,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["fix",{"_index":1520,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1444,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1377,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1320,"title":{},"body":{"index.html":{}}}],["flashy",{"_index":1497,"title":{},"body":{"todo.html":{}}}],["flute",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus",{"_index":1435,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1367,"title":{},"body":{"index.html":{}}}],["following",{"_index":1509,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["font",{"_index":209,"title":{},"body":{"components/AdminComponent.html":{}}}],["foods",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":534,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":389,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":920,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":937,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{}}}],["formcontrol",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["found",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1310,"title":{},"body":{"index.html":{}}}],["free",{"_index":1065,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["frontend",{"_index":1295,"title":{},"body":{"index.html":{}}}],["full",{"_index":482,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":497,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":1265,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funny",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{}}}],["further",{"_index":1329,"title":{},"body":{"index.html":{}}}],["gained",{"_index":628,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":959,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":233,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":231,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":541,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":542,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":230,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":479,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":232,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gas",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gecko",{"_index":219,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1314,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1280,"title":{},"body":{"index.html":{}}}],["geography",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georgian",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_all",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getadmin",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":871,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1131,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":856,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":418,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpracticequestions",{"_index":864,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":549,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1171,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteamfromserver",{"_index":1089,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1094,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteams",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["getteams(link",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{}}}],["getter",{"_index":857,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":411,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getters",{"_index":1549,"title":{},"body":{"todo.html":{}}}],["getting",{"_index":172,"title":{"index.html":{},"todo.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":296,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["gioachino",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["giovanni",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["github:angular/web",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":400,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":301,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["giver",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1530,"title":{},"body":{"todo.html":{}}}],["go",{"_index":1331,"title":{},"body":{"index.html":{}}}],["goddess",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1177,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["gradient",{"_index":1529,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1375,"title":{},"body":{"modules.html":{}}}],["greenhouse",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gross",{"_index":1528,"title":{},"body":{"todo.html":{}}}],["guard",{"_index":960,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":961,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":607,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":1032,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1382,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1383,"title":{},"body":{"todo.html":{}}}],["handled",{"_index":1542,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":309,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":362,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["handleerroradmin",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroradmin(error",{"_index":276,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroruser",{"_index":1090,"title":{},"body":{"injectables/TeamService.html":{}}}],["handleerroruser(error",{"_index":1096,"title":{},"body":{"injectables/TeamService.html":{}}}],["handlers",{"_index":1465,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":279,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":1275,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["hash",{"_index":1506,"title":{},"body":{"todo.html":{}}}],["having",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["headers",{"_index":328,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["heat",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":207,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1330,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":407,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{}}}],["heroku",{"_index":1286,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1342,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hobby",{"_index":1510,"title":{},"body":{"todo.html":{}}}],["holds",{"_index":750,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["holes",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href",{"_index":171,"title":{},"body":{"components/AdminComponent.html":{}}}],["hrs",{"_index":714,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlanchorelement",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{}}}],["htmlinputelement",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{}}}],["http",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1301,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":277,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpevent",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":302,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":356,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":344,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":348,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":303,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":847,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":327,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptions).pipe",{"_index":331,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptionsjson",{"_index":1110,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1115,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":310,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":830,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":304,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":335,"title":{},"body":{"injectables/AdminService.html":{}}}],["https",{"_index":1508,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/practical",{"_index":1456,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1459,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1443,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1489,"title":{},"body":{"todo.html":{}}}],["human",{"_index":704,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["humans",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hurt",{"_index":1532,"title":{},"body":{"todo.html":{}}}],["i.e",{"_index":565,"title":{},"body":{"components/GameComponent.html":{}}}],["iconic",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":1080,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["identifier",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":634,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["implements",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":451,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":934,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":748,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1305,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":915,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":797,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":804,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":826,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["inform",{"_index":1534,"title":{},"body":{"todo.html":{}}}],["information",{"_index":506,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{}}}],["init",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{}}}],["initiate",{"_index":974,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":572,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":246,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1470,"title":{},"body":{"todo.html":{}}}],["input",{"_index":913,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["inputs",{"_index":883,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["install",{"_index":1293,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1288,"title":{},"body":{"index.html":{}}}],["instance",{"_index":408,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instanceof",{"_index":521,"title":{},"body":{"classes/Authorization.html":{}}}],["instead",{"_index":391,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":1028,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1392,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1284,"title":{},"body":{"index.html":{}}}],["interface",{"_index":363,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1156,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1169,"title":{},"body":{"components/TimerComponent.html":{}}}],["iridium",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is\\u2026",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isn't",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":1066,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1522,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1500,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":603,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["j",{"_index":809,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":773,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join('\\n",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{}}}],["join(__dirname",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":1243,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":840,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":325,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":513,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":511,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":517,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1326,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1045,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kenai",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kinda",{"_index":930,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1475,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1473,"title":{},"body":{"todo.html":{}}}],["kuwait",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kuyokuk",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["largest",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1346,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["late",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":614,"title":{},"body":{"components/GameComponent.html":{}}}],["latter",{"_index":1558,"title":{},"body":{"todo.html":{}}}],["launch",{"_index":1358,"title":{},"body":{"index.html":{}}}],["left",{"_index":1544,"title":{},"body":{"todo.html":{}}}],["legend",{"_index":222,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":928,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["liechtenstein",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":599,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.click",{"_index":193,"title":{},"body":{"components/AdminComponent.html":{}}}],["link.href",{"_index":192,"title":{},"body":{"components/AdminComponent.html":{}}}],["list",{"_index":800,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":839,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":609,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["load",{"_index":1546,"title":{},"body":{"todo.html":{}}}],["loading",{"_index":1391,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":550,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":569,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["local",{"_index":1277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localstorage",{"_index":1541,"title":{},"body":{"todo.html":{}}}],["localstorage.getitem('admintoken",{"_index":317,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.getitem('usertoken",{"_index":1112,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.removeitem('admintoken",{"_index":360,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.removeitem('usertoken",{"_index":1129,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.setitem('admintoken",{"_index":320,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.setitem('usertoken",{"_index":1113,"title":{},"body":{"injectables/TeamService.html":{}}}],["located",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location.reload",{"_index":361,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["log",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":285,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1440,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":539,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":287,"title":{},"body":{"injectables/AdminService.html":{}}}],["loginform",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{}}}],["logs",{"_index":289,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":1035,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1438,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1421,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1472,"title":{},"body":{"todo.html":{}}}],["loss",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lot",{"_index":1417,"title":{},"body":{"todo.html":{}}}],["machine",{"_index":1555,"title":{},"body":{"todo.html":{}}}],["magic",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":538,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["maize",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["many",{"_index":627,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["map(event",{"_index":338,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(result",{"_index":1118,"title":{},"body":{"injectables/TeamService.html":{}}}],["map(team",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["marriage",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matbuttonmodule",{"_index":731,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":733,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":735,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":244,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":729,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":446,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":737,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":810,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":662,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":352,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":739,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":741,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":743,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":746,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":600,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1467,"title":{},"body":{"todo.html":{}}}],["mckinley",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meaning",{"_index":1345,"title":{},"body":{"index.html":{}}}],["means",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medal",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory",{"_index":1253,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["menu",{"_index":667,"title":{},"body":{"components/GameComponent.html":{}}}],["mesoamericans",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":496,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["millet",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["million",{"_index":1404,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":703,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1145,"title":{},"body":{"components/TimerComponent.html":{}}}],["mins",{"_index":713,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":1041,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1264,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":313,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modern",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modifying",{"_index":721,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":433,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{},"todo.html":{}}}],["modules",{"_index":435,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1247,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["monaco",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongo",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1251,"title":{},"body":{"dependencies.html":{},"index.html":{},"todo.html":{}}}],["monocots",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":563,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1439,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mount",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":1486,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":217,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":711,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1162,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":698,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1471,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":1076,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["mythology",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":198,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namesake",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaces",{"_index":1442,"title":{},"body":{"todo.html":{}}}],["native",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["navigate",{"_index":1300,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":586,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":1050,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["needed",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["new",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newbery",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newteam",{"_index":1025,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":493,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":494,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1313,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":551,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":453,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":881,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":900,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["nitrous",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1289,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1308,"title":{},"body":{"index.html":{}}}],["nodemon",{"_index":1369,"title":{},"body":{"index.html":{}}}],["non",{"_index":1384,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["nothing",{"_index":1368,"title":{},"body":{"index.html":{}}}],["notifies",{"_index":1556,"title":{},"body":{"todo.html":{}}}],["now",{"_index":1539,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":1290,"title":{},"body":{"index.html":{}}}],["nshima",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":532,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["number",{"_index":611,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["number,points",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{}}}],["numbers",{"_index":802,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["obelisk",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":369,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":908,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":774,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{}}}],["observable",{"_index":275,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["obtained",{"_index":1291,"title":{},"body":{"index.html":{}}}],["occur",{"_index":574,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":427,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1123,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1388,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":552,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":589,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":553,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":897,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":877,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":882,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":904,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":982,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":601,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["one?\\u201d",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ones",{"_index":1136,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":554,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opera/ie",{"_index":220,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1135,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{}}}],["otherwise",{"_index":1483,"title":{},"body":{"todo.html":{}}}],["out",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["output",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":566,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":234,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":695,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":696,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":692,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":709,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":700,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":701,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":706,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":463,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1334,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1376,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["oxide",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ozone",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1232,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["pages",{"_index":964,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":461,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":459,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["palladium",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papa",{"_index":787,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":785,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":789,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1360,"title":{},"body":{"index.html":{}}}],["param",{"_index":679,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":784,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":788,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":795,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":791,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1240,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1514,"title":{},"body":{"todo.html":{}}}],["part",{"_index":1490,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":372,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":476,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":481,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":1048,"title":{},"body":{"components/SignupComponent.html":{}}}],["peak",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["people",{"_index":1535,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":351,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":583,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1455,"title":{},"body":{"todo.html":{}}}],["period",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["periodically",{"_index":1430,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1353,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1433,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1350,"title":{},"body":{"index.html":{}}}],["play",{"_index":975,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":725,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":693,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":719,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":726,"title":{},"body":{"components/GameOverComponent.html":{}}}],["plutonium",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":625,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":547,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1405,"title":{},"body":{"todo.html":{}}}],["populate",{"_index":1552,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":638,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":1341,"title":{},"body":{"index.html":{}}}],["post",{"_index":1091,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1098,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":759,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":383,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["practice_questions",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":376,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":396,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["practicequestions(given",{"_index":398,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1450,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":765,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":769,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":764,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":770,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":780,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":776,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":989,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":593,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":718,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["prevents",{"_index":666,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["primarily",{"_index":1307,"title":{},"body":{"index.html":{}}}],["priority",{"_index":1491,"title":{},"body":{"todo.html":{}}}],["private",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1337,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":708,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["process.env.admin_password",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_password",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_user",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":777,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["processrow",{"_index":767,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":775,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1319,"title":{},"body":{"index.html":{}}}],["production",{"_index":1276,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1336,"title":{},"body":{"index.html":{}}}],["progress",{"_index":270,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{}}}],["project",{"_index":1279,"title":{},"body":{"index.html":{}}}],["promise",{"_index":385,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["properly",{"_index":909,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1328,"title":{},"body":{"index.html":{}}}],["provided",{"_index":291,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":314,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1445,"title":{},"body":{"todo.html":{}}}],["public",{"_index":394,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["pulls",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":1092,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1100,"title":{},"body":{"injectables/TeamService.html":{}}}],["qatar",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["question",{"_index":373,"title":{"classes/Question.html":{}},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":824,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":555,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":834,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":640,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":763,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":236,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":402,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":878,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":879,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":806,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":235,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":559,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":381,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["radiation",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":781,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1365,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1458,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":705,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1332,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1536,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1333,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1340,"title":{},"body":{"index.html":{}}}],["recently",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recompile",{"_index":1363,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":480,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1478,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":189,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["refreshes",{"_index":1543,"title":{},"body":{"todo.html":{}}}],["register",{"_index":967,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":475,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":1047,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":474,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":1063,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":978,"title":{},"body":{"components/SignupComponent.html":{}}}],["reign",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":829,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relating",{"_index":488,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1303,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1175,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["renowned",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replicate",{"_index":1505,"title":{},"body":{"todo.html":{}}}],["reportprogress",{"_index":332,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":334,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":516,"title":{},"body":{"classes/Authorization.html":{}}}],["req.headers.authorization[0",{"_index":536,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":492,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":929,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1448,"title":{},"body":{"todo.html":{}}}],["res",{"_index":196,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.sendfile(clientpath",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.status(403).json('403",{"_index":533,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('expired",{"_index":522,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('invalid",{"_index":523,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1158,"title":{},"body":{"components/TimerComponent.html":{}}}],["resides",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respective",{"_index":895,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":271,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":323,"title":{},"body":{"injectables/AdminService.html":{}}}],["rest",{"_index":1309,"title":{},"body":{"index.html":{}}}],["restart",{"_index":1148,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1466,"title":{},"body":{"todo.html":{}}}],["result",{"_index":243,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":1119,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":935,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1",{"_index":1117,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[1].push(i",{"_index":936,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":424,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":245,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":938,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":939,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["resume",{"_index":1061,"title":{},"body":{"components/SignupComponent.html":{}}}],["retrieval",{"_index":390,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":415,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":380,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["return",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["reverse",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{}}}],["rice",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":1371,"title":{},"body":{"index.html":{}}}],["river",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roman",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":315,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":229,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["rossini",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roughly",{"_index":575,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":970,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":558,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":471,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":483,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":472,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":460,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":470,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":778,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":825,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":813,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":814,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":827,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":794,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":801,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["royal",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1285,"title":{},"body":{"index.html":{}}}],["running",{"_index":1292,"title":{},"body":{"index.html":{}}}],["runs",{"_index":597,"title":{},"body":{"components/GameComponent.html":{}}}],["russia",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":306,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":308,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":710,"title":{},"body":{"components/GameOverComponent.html":{}}}],["sad",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{}}}],["safari",{"_index":180,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["safari/chrome",{"_index":216,"title":{},"body":{"components/AdminComponent.html":{}}}],["safety",{"_index":527,"title":{},"body":{"classes/Authorization.html":{}}}],["samarium",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":1554,"title":{},"body":{"todo.html":{}}}],["sanitizer",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":656,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1103,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":707,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":697,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":907,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1312,"title":{},"body":{"index.html":{}}}],["school",{"_index":722,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":994,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolnamecontrol",{"_index":1008,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.disable",{"_index":1023,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.setvalue(team.schoolname",{"_index":1012,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.value",{"_index":1019,"title":{},"body":{"components/SignupComponent.html":{}}}],["schools",{"_index":1075,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":626,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":1033,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1354,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1359,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["second",{"_index":632,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["seconds",{"_index":556,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":548,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":515,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":712,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1527,"title":{},"body":{"todo.html":{}}}],["see",{"_index":986,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1518,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":836,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["sending",{"_index":1398,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":269,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1298,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":564,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"dependencies.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":643,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":644,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":1002,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":173,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["setanswers(given",{"_index":873,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setdburl",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setinterval",{"_index":1149,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1161,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpracticequestions(given",{"_index":866,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":869,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":300,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["setters",{"_index":1550,"title":{},"body":{"todo.html":{}}}],["settimeout",{"_index":613,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken(giventoken",{"_index":298,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["seville",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha3",{"_index":1507,"title":{},"body":{"todo.html":{}}}],["shared/question",{"_index":375,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shiloh",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shiny",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shouldn't",{"_index":1476,"title":{},"body":{"todo.html":{}}}],["show",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shuffle",{"_index":768,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":779,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":782,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["side",{"_index":1441,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":973,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":965,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":478,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":238,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":976,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":977,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":237,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signupform",{"_index":979,"title":{},"body":{"components/SignupComponent.html":{}}}],["simple",{"_index":1046,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":901,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":1054,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":751,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":210,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":214,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":790,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slice(1",{"_index":796,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slow",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sluggish",{"_index":1493,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1449,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1477,"title":{},"body":{"todo.html":{}}}],["something",{"_index":170,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["somewhere",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["soooo",{"_index":168,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorry",{"_index":1062,"title":{},"body":{"components/SignupComponent.html":{}}}],["sort",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["sort((a",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorts",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["spain\\u2019s",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../admin",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1266,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1267,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../practicequestions.ts",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1268,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":469,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":429,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":728,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":875,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":888,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":889,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":890,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":887,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":892,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":886,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":894,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":902,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":905,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1138,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1151,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1167,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1170,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1166,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1168,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1154,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1157,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1159,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1163,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1164,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1165,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1172,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1153,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1198,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":1068,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":1073,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:21",{"_index":1084,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:22",{"_index":1085,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":1087,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":1086,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":1083,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":1082,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":1081,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:14",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:16",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:29",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:34",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:39",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:50",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:80",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":691,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":537,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":590,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":591,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":596,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":610,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":608,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":637,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":617,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":612,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":619,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":620,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":622,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":623,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":629,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":633,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":631,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":561,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":562,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":567,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":568,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":580,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":582,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":972,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:17",{"_index":997,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":993,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:24",{"_index":999,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:26",{"_index":1000,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:28",{"_index":984,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:37",{"_index":985,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:53",{"_index":988,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:58",{"_index":990,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:68",{"_index":991,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":962,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":966,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":968,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:17",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:23",{"_index":295,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:26",{"_index":297,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:35",{"_index":299,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:41",{"_index":283,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:46",{"_index":288,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:53",{"_index":274,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:61",{"_index":293,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:71",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:79",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:97",{"_index":278,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":828,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":832,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":838,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":835,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":1088,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1093,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1107,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1106,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:23",{"_index":1105,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:26",{"_index":1108,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:35",{"_index":1109,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:45",{"_index":1099,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:54",{"_index":1101,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:60",{"_index":1104,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:71",{"_index":1095,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:84",{"_index":1097,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1130,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1132,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1133,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":485,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:34",{"_index":495,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:45",{"_index":508,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":504,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/practicequestions.ts",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":366,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":749,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":762,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":761,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":760,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":754,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":587,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":598,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":581,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["state('correct",{"_index":922,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":924,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["static",{"_index":487,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1432,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":1479,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":1150,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":1160,"title":{},"body":{"components/TimerComponent.html":{}}}],["store",{"_index":410,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":367,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":859,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":858,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":860,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":861,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":865,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":867,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":868,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":870,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":872,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":874,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":863,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":862,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":382,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["stores",{"_index":1540,"title":{},"body":{"todo.html":{}}}],["storing",{"_index":379,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["string",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["stuff",{"_index":730,"title":{},"body":{"modules/MaterialModule.html":{}}}],["style",{"_index":916,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":992,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":1060,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["submitted",{"_index":980,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":950,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1347,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":998,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sugarcane",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":178,"title":{},"body":{"components/AdminComponent.html":{},"modules.html":{}}}],["supported",{"_index":1499,"title":{},"body":{"todo.html":{}}}],["sure",{"_index":524,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["surprising",{"_index":358,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1373,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":341,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronous",{"_index":183,"title":{},"body":{"components/AdminComponent.html":{}}}],["synchronously",{"_index":1357,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1436,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1343,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1299,"title":{},"body":{"index.html":{}}}],["table",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":602,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":1036,"title":{},"body":{"components/SignupComponent.html":{}}}],["tap",{"_index":1111,"title":{},"body":{"injectables/TeamService.html":{}}}],["tap(result",{"_index":1116,"title":{},"body":{"injectables/TeamService.html":{}}}],["target",{"_index":1480,"title":{},"body":{"todo.html":{}}}],["team",{"_index":83,"title":{"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":1124,"title":{},"body":{"injectables/TeamService.html":{}}}],["team.points",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":723,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname},${team.teamnumber},${team.points",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["team.service",{"_index":842,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":724,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":1026,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamexists",{"_index":981,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":996,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["teamnumbercontrol",{"_index":1010,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.disable",{"_index":1024,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.setvalue(team.teamnumber",{"_index":1013,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.value",{"_index":1020,"title":{},"body":{"components/SignupComponent.html":{}}}],["teams",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":560,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":23,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1141,"title":{},"body":{"components/TimerComponent.html":{}}}],["teosinte",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":1386,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1323,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1387,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1322,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":324,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":206,"title":{},"body":{"components/AdminComponent.html":{}}}],["thermos",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thing",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["things",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1173,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":1042,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":406,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":399,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":403,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._token",{"_index":318,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this.adminservice",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.checktoken().subscribe",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.getteams().subscribe(teams",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.loggedin",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.loginform.value.password).subscribe",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.token",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(file.files[0]).subscribe",{"_index":195,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":951,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":953,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.breakend",{"_index":673,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":664,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1178,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1186,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":197,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":654,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":932,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.file",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.finishanimation",{"_index":945,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":680,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":413,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":675,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":339,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":414,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":678,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":404,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":397,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":401,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.http.get(uri.admin.check_token",{"_index":340,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1137,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":849,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":852,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.team.get",{"_index":1128,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.get(uri.team.get_all",{"_index":330,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.admin.login",{"_index":322,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1114,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":855,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":854,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1127,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1121,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":337,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":846,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":850,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":659,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":684,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1180,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1179,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":646,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":657,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1126,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1122,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":805,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1125,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":674,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":653,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":655,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":949,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":652,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":1005,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1183,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":1014,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":651,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":971,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.sanitizer.bypasssecuritytrusturl(url",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.saving",{"_index":715,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":683,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":682,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":803,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.signupform.get('schoolname",{"_index":1009,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('teamnumber",{"_index":1011,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.start",{"_index":1184,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1187,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":947,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":952,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":933,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":940,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1182,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":1022,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":650,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.team._id",{"_index":1018,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":658,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":645,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":1015,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":1016,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":647,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":677,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.teamexists",{"_index":1027,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver().subscribe(team",{"_index":1007,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":1021,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.practice",{"_index":848,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":661,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.team",{"_index":649,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.token",{"_index":845,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.timer",{"_index":688,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":672,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":689,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":665,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":687,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":676,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":681,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":1004,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":321,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this['_",{"_index":412,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1485,"title":{},"body":{"todo.html":{}}}],["thought",{"_index":169,"title":{},"body":{"components/AdminComponent.html":{}}}],["thus",{"_index":1352,"title":{},"body":{"index.html":{}}}],["tiber",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":185,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":1070,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":240,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1142,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1143,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":239,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1451,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":983,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":1071,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":119,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token(giventoken",{"_index":319,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["token]{@link",{"_index":316,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["tokenexpirederror",{"_index":509,"title":{},"body":{"classes/Authorization.html":{}}}],["tokens",{"_index":281,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["tonsorial",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":1349,"title":{},"body":{"index.html":{}}}],["total",{"_index":577,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1381,"title":{},"body":{"todo.html":{}}}],["transfer",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":771,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":917,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1484,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tries",{"_index":898,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":918,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":921,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":333,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":419,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":823,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":772,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1378,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":579,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":1058,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tz(start",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u201cthe",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":686,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":1037,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":671,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":1056,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1321,"title":{},"body":{"index.html":{},"todo.html":{}}}],["united",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unix",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":187,"title":{},"body":{"components/AdminComponent.html":{}}}],["until",{"_index":1052,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":588,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1102,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":355,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":345,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":292,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":294,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":311,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":336,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1457,"title":{},"body":{"todo.html":{}}}],["use",{"_index":766,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["user",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":624,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":507,"title":{},"body":{"classes/Authorization.html":{}}}],["username",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userroutes",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":490,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1356,"title":{},"body":{"index.html":{}}}],["using",{"_index":290,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["usually",{"_index":1502,"title":{},"body":{"todo.html":{}}}],["valid",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["validators",{"_index":1003,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.required",{"_index":995,"title":{},"body":{"components/SignupComponent.html":{}}}],["validity",{"_index":1545,"title":{},"body":{"todo.html":{}}}],["value",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":416,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["vapor",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":225,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":409,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1551,"title":{"miscellaneous/variables.html":{}},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":584,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["vatican",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":510,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":512,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":393,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":1325,"title":{},"body":{"index.html":{},"todo.html":{}}}],["victorian",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":639,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild(timercomponent",{"_index":636,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{}}}],["virginia\\u2026",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtual",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":432,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["vs",{"_index":1511,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wasn't",{"_index":1469,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1362,"title":{},"body":{"index.html":{}}}],["water",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1189,"title":{},"body":{"components/TimerComponent.html":{}}}],["ways",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1259,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["webkit",{"_index":212,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1488,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":1355,"title":{},"body":{"index.html":{}}}],["weren't",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{}}}],["west",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whatnot",{"_index":1498,"title":{},"body":{"todo.html":{}}}],["wheat",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":284,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["whipping",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whittier",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":203,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1188,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1185,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.url.createobjecturl(blob",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{}}}],["window.url.revokeobjecturl(url",{"_index":194,"title":{},"body":{"components/AdminComponent.html":{}}}],["winner",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wipes",{"_index":716,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":1044,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":526,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["wonky",{"_index":1496,"title":{},"body":{"todo.html":{}}}],["wont",{"_index":1482,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1287,"title":{},"body":{"index.html":{},"todo.html":{}}}],["worked",{"_index":525,"title":{},"body":{"classes/Authorization.html":{}}}],["works",{"_index":179,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["world",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["worse",{"_index":1174,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":606,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":1077,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["yukon",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":447,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consoleOutput\n                            \n                            \n                                file\n                            \n                            \n                                loginForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                getTeams\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload(file: HTMLInputElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:80\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            HTMLInputElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams(link: HTMLAnchorElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:50\n                \n            \n\n\n            \n                \n                    Gets the teams from the server, sorts them by points, and outputs in a nice csv format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                            HTMLAnchorElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:22\n                \n            \n\n\n            \n                \n                    Checks if token is valid on page init \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:39\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:14\n                            \n                        \n\n                \n                    \n                        The link to the team CSV file \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    password: new FormControl('')\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:34\n                            \n                        \n\n                \n                    \n                        The login form containing the password \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:29\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n  /** The link to the team CSV file */\n  file;\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService, private sanitizer: DomSanitizer) { }\n\n  /** Checks if token is valid on page init */\n  ngOnInit() {\n    if (this.adminService.loggedIn()) {\n      this.adminService.checkToken().subscribe();\n    }\n  }\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** The login form containing the password */\n  loginForm = new FormGroup({\n    password: new FormControl('')\n  });\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.loginForm.value.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.token = token;\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Gets the teams from the server, sorts them by points, and outputs in a nice csv format */\n  getTeams(link: HTMLAnchorElement) {\n    this.adminService.getTeams().subscribe(teams => {\n      console.log(teams);\n      if (!teams) {\n        return;\n      }\n      const data = teams\n        .filter(team => team.points) // remove teams with no points\n        .sort((a, b) => a.points - b.points) // sort teams according to points in ascending order\n        .map(team => `${team.schoolName},${team.teamNumber},${team.points}`) // map to strings\n        .concat(['School,Team Number,Points']) // add header\n        .reverse() // change to descending order\n        .join('\\n');\n      const blob = new Blob([data], {type: 'text/csv'});\n      const url = window.URL.createObjectURL(blob);\n      this.file = this.sanitizer.bypassSecurityTrustUrl(url);\n      // todo this would be funny if it weren't so sad (i have no idea why this is needed but it fails with\n      //   'Failed - no file' on chrome on the first click if this isn't here soooo)\n      // i thought it might have something to do with href not getting set fast enough but console.log doesn't support\n      // this - works on safari just fine\n      // everything here should be synchronous so the file should exist by the time the link is clicked\n      // unless link isn't actually a reference, but rather a copied value. console.log doesnt support this.\n      link.href = url;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    });\n\n  }\n\n  /** Upload the questions to the server */\n  fileUpload(file: HTMLInputElement): void {\n    this.adminService.uploadQuestions(file.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n     Get teams as CSV \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                       Get teams as CSV               {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkToken\n                            \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getTeams\n                            \n                            \n                                    Private\n                                handleErrorAdmin\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:17\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \ncheckToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:71\n                \n            \n\n\n            \n                \n                    Checks that the current admin token is valid \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:79\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:53\n                \n            \n\n\n            \n                \n                    Gets all of the teams from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorAdmin(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:97\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:41\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:46\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:61\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:23\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:26\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:35\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient, HttpErrorResponse,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsText, URI } from '../constants';\nimport { Team } from '../models/team';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The token for the admin user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('adminToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.token !== '';\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, password, {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Gets all of the teams from the server */\n  getTeams(): Observable {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.TEAM.GET_ALL, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.token })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Checks that the current admin token is valid */\n  checkToken() {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.ADMIN.CHECK_TOKEN, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorAdmin(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('adminToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ReactiveFormsModule\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:34\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:45\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TokenExpiredError, verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          if (err instanceof TokenExpiredError) {\n            return res.status(403).json('Expired token');\n          } else {\n            return res.status(403).json('Invalid token');\n          }\n        } else {\n          // todo not sure why this worked without the safety check before\n          if (decoded.team) {\n            req.headers.authorization = [decoded.type, decoded.team.schoolName, decoded.team.teamNumber];\n          } else {\n            req.headers.authorization = [decoded.type, null, null];\n          }\n          next();\n        }\n      });\n    } else {\n      res.status(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'user' || req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.team = this.team;\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.team;\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.team;\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.team = undefined;\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.log(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.token };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.practice) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.practice) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.log(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.team === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                signupForm\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:37\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:53\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:58\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:68\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signupForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                        The signup form that contains the school name and team number \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:24\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:26\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** The signup form that contains the school name and team number */\n  signupForm = new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  });\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n    if (this.teamService.token !== '') {\n      this.teamService.getTeamFromServer().subscribe(team => {\n        if (team) {\n          const schoolNameControl = this.signupForm.get('schoolName');\n          const teamNumberControl = this.signupForm.get('teamNumber');\n          schoolNameControl.setValue(team.schoolName);\n          teamNumberControl.setValue(team.teamNumber);\n          this.team = team;\n        }\n      });\n    }\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.practice = true;\n    this.teamService.team = this.team;\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    const schoolNameControl = this.signupForm.get('schoolName');\n    const teamNumberControl = this.signupForm.get('teamNumber');\n    this.team.schoolName = schoolNameControl.value;\n    this.team.teamNumber = teamNumberControl.value;\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (!team) {\n          this.submitted = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.team = newTeam;\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n          this.teamExists = true;\n        } else {\n          this.submitted = true;\n          this.teamExists = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.team = team;\n          this.teamService.team = this.team;\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        Submit\n      \n      \n        -->\n        That team has already registered. Resume game?\n        -->\n        -->\n        That team has already registered and finished the game.\n        -->\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                  Submit                    -->        That team has already registered. Resume game?        -->        -->        That team has already registered and finished the game.        -->                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:21\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:22\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                            \n                                    Public\n                                practice\n                            \n                            \n                                    Public\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTeamFromServer\n                            \n                            \n                                    Private\n                                handleErrorUser\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team?: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:71\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorUser(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:84\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:45\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:54\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:60\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:23\n                            \n                        \n\n                \n                    \n                        The token for the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:26\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:35\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  public team: Team;\n  /** Whether or not this is a practice game */\n  public practice: boolean;\n  /** The token for the user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('userToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('userToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      tap(result => this.token = result[1]),\n      map(result => result[0]),\n      catchError(this.handleErrorUser)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(this.handleErrorUser)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team?: Team): Observable {\n    if (team) {\n      return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n        catchError(this.handleErrorUser)\n      );\n    } else {\n      const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n      return this.http.get(URI.TEAM.GET, httpOptions).pipe(\n        catchError(this.handleErrorUser)\n      );\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorUser(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('userToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/practiceQuestions.ts\n            \n            variable\n            practiceQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            function\n            setDbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            mongodb-memory-server : ^5.1.5\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                        \n                            setDbURL   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setDbURL\n                        \n                        \n                    \n                \n            \n            \n                \nsetDbURL()\n                \n            \n\n\n\n\n            \n                \n                    Sets dbURL based on whether we are using the production database or a local development version \n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nAll that is needed to run or work on this project is an installed version of node and npm. Everything else can be \nobtained by running npm install in the directory of this project.\nDevelopment server\nRun npm start for a frontend dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nBackend information\nThe backend of this project is built primarily using nodejs, along with express for REST,\nand mongodb for the database.\nFrontend information\nThe frontend of this project is built primarily using the Angular framework.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile them when they are changed and watch the js file and re-run it when it is changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However, that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  todo add unit tests.\n  todo add integration tests.\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO There are a lot of new ways to do things that might be worth looking in to\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails? - could start up in memory database, use that and periodically check if database is up,\n  and if it's up, transfer the teams and stats data.\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo can you move mongodb-memory-server to dev-dependencies? If not, how can you make it so you can?\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\nPriority for finishing:\ntodo app (animations in particular) is sluggish on safari compared to chrome\n  animations on edge are wonky - flashy and whatnot\n  Make sure to state that chrome is most supported browser - if any issues move to chrome. However, other browsers will usually work.\ntodo finish stats module\ntodo not every team has a non null time ended - why? -- see if you can replicate\ntodo hash for admin password - SHA3 -- also need to use https\nTODO create admin interface that has the following functionality:\n  Built in documentation - hobby vs free dyno\n    - common potential issues with csv parsing; caveats; etc.\ntodo look into only sending one question at a time, and only allowing each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\ntodo use some less gross colors for animations - maybe a gradient or something, or something that gives it depth. something\n  that doesn't hurt my eyes would be a good start.\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\nCURRENT BUILD:\nAdmin service now stores token in localstorage.\nExpired tokens now handled - Refreshes page since it is left in incorrect state after expired tokens are deleted\nChecks validity of admin token on page load.\nConverted some basic getters and setters into public variables\nLoads teams using token in localstorage and populate fields but don't submit - in case of multiple teams on same machine.\nUser tokens now store identifying team information, rather than teams storing tokens.\nNotifies user whether team already exists and has begun game, or if team already exists and has finished the game (and\nin the latter case, disallows play)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbPassword   (src/.../constants.ts)\n                        \n                        \n                            dbURL   (src/.../server.ts)\n                        \n                        \n                            dbUser   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            practiceQuestions   (src/.../practiceQuestions.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.ADMIN_PASSWORD || 'password'\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_PASSWORD\n                        \n                    \n\n                \n                    \n                        Database password \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_USER\n                        \n                    \n\n                \n                    \n                        Database username \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/practiceQuestions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    question: 'By area, which country is the considered the second largest in the world, to Russia?',\n    category: 'Geography',\n    answers: [\n      'Azerbaijan',\n      'Canada',\n      'United States',\n      'Russia',\n      'China'\n    ],\n    correctAnswer: 'Canada'\n  },\n  {\n    question: 'The characteristic color of a shiny coffee thermos is designed to prevent heat loss by which of the following processes?',\n    category: 'Heat Exchange',\n    answers: [\n      'Convection',\n      'Radiation',\n      'Slow Diffusion',\n      'Conduction',\n      'Circulation'\n    ],\n    correctAnswer: 'Radiation'\n  },\n  {\n    question: 'Which native Denakk\\u2019e name for the Alaskan peak Mount McKinley means \\u201cThe High One?\\u201d',\n    category: 'Location, Location',\n    answers: [\n      'Yukon',\n      'Kenai',\n      'Denali',\n      'Kuyokuk',\n      'Whittier'\n    ],\n    correctAnswer: 'Denali'\n  },\n  {\n    question: 'While humans have recently accelerated the greenhouse effect, which mostly non-human created gas ' +\n      'contributes most to this process?',\n    category: 'Got Some Gas',\n    answers: [\n      'Water vapor',\n      'Ozone',\n      'Carbon Dioxide',\n      'Nitrous Oxide',\n      'Chlorofluorocarbons'\n    ],\n    correctAnswer: 'Water vapor'\n  },\n  {\n    question: 'The largest object in our asteroid belt, named after the Roman goddess of agriculture, is the namesake ' +\n      'of which chemical element?',\n    category: 'Astronomy, Chemistry, and Mythology',\n    answers: [\n      'Cerium',\n      'Iridium',\n      'Plutonium',\n      'Samarium',\n      'Palladium'\n    ],\n    correctAnswer: 'Cerium'\n  },\n  {\n    question: 'This modern crop is a domesticated teosinte developed by early Mesoamericans which can be found in foods ' +\n      'such as nshima, chicha, and angu\\u2026',\n    category: 'Monocots',\n    answers: [\n      'Rice',\n      'Sugarcane',\n      'Maize',\n      'Wheat',\n      'Millet'\n    ],\n    correctAnswer: 'Maize'\n  },\n  {\n    question: 'Which city-state, located on the west bank of the Tiber River, is renowned for its basilica and obelisk?',\n    category: 'Autonomy',\n    answers: [\n      'Monaco',\n      'Qatar',\n      'Liechtenstein',\n      'Vatican City',\n      'Kuwait'\n    ],\n    correctAnswer: 'Vatican City'\n  },\n  {\n    question: 'Which opera by Gioachino Rossini features Figaro, a tonsorial artist who resides in one of Spain\\u2019s ' +\n      'largest cities?',\n    category: 'Figaro! Figaro! Figaro!',\n    answers: [\n      'Carmen',\n      'The Marriage of Figaro',\n      'The Magic Flute',\n      'Don Giovanni',\n      'The Barber of Seville'\n    ],\n    correctAnswer: 'The Barber of Seville'\n  },\n  {\n    question: 'The architectural period developed during and named after the reign of an iconic royal figure of the late' +\n      ' 19th century is\\u2026',\n    category: 'Architecture',\n    answers: [\n      'Georgian',\n      'Art deco',\n      'Victorian',\n      'Edwardian',\n      'Federal'\n    ],\n    correctAnswer: 'Victorian'\n  },\n  {\n    question: 'This Newbery Medal winner is a bildungsroman about a boy and an abused dog who form a bond in West Virginia\\u2026',\n    category: 'A Bildungsroman',\n    answers: [\n      'Bud, Not Buddy',\n      'The Giver',\n      'The Whipping Boy',\n      'Shiloh',\n      'Holes'\n    ],\n    correctAnswer: 'Shiloh'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The questions that will form the basis of practiceQuestions, questions, and answers during development. \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    GET_ALL: '/api/team/get_all',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/can_start'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login',\n    CHECK_TOKEN: '/api/admin/check_token'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
