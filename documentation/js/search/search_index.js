var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.565,1,0.97]],["body/components/AdminComponent.html",[0,0.802,1,1.269,2,1.29,3,0.193,4,0.193,5,0.907,6,0.907,7,0.907,8,0.907,9,0.355,10,1.593,11,0.278,12,3.039,13,2.979,14,2.937,15,1.714,16,1.552,17,2.345,18,0.907,19,2.494,20,1.483,21,1.412,22,3.659,23,1.412,24,2.979,25,0.249,26,0.771,27,4.476,28,3.659,29,0.771,30,2.979,31,2.482,32,2.648,33,3.441,34,1.714,35,1.124,36,1.913,37,3.039,38,3.659,39,4.13,40,1.138,41,1.913,42,0.722,43,0.034,44,0.452,45,0.643,46,0.722,47,2.979,48,3.659,49,1.913,50,3.95,51,1.324,52,1.709,53,0.935,54,1.497,55,2.979,56,3.659,57,1.913,58,1.412,59,2.946,60,2.979,61,2.151,62,2.154,63,2.979,64,4.753,65,4.741,66,3.048,67,1.913,68,1.552,69,2.122,70,2.154,71,2.979,72,1.913,73,1.714,74,1.504,75,2.979,76,4.13,77,0.453,78,1.182,79,1.085,80,1.913,81,2.648,82,2.482,83,1.913,84,0.996,85,1.521,86,3.048,87,3.237,88,3.048,89,1.913,90,3.039,91,1.91,92,5.12,93,1.913,94,1.913,95,1.552,96,1.958,97,1.789,98,2.979,99,2.979,100,1.032,101,1.91,102,0.601,103,0.414,104,1.913,105,1.226,106,1.383,107,0.996,108,0.22,109,0.113,110,2.154,111,0.829,112,0.706,113,1.913,114,0.696,115,1.913,116,1.913,117,1.913,118,1.906,119,1.913,120,0.907,121,1.226,122,1.101,123,1.593,124,1.913,125,0.946,126,1.906,127,1.913,128,1.593,129,1.383,130,1.913,131,3.659,132,1.913,133,1.913,134,1.913,135,1.913,136,1.913,137,2.987,138,1.913,139,1.913,140,1.383,141,1.913,142,1.913,143,1.913,144,3.048,145,1.913,146,1.383,147,1.913,148,1.913,149,1.913,150,1.913,151,1.593,152,2.482,153,1.913,154,1.913,155,1.913,156,1.226,157,1.714,158,1.939,159,1.452,160,1.913,161,1.593,162,1.913,163,1.913,164,1.91,165,2.979,166,2.979,167,1.412,168,2.979,169,1.552,170,2.482,171,4.753,172,2.482,173,4.13,174,2.482,175,1.639,176,1.91,177,3.441,178,1.552,179,0.84,180,1.714,181,3.441,182,5.377,183,3.429,184,2.979,185,2.154,186,2.482,187,2.482,188,1.91,189,2.979,190,2.154,191,2.979,192,2.979,193,2.154,194,1.383,195,2.482,196,2.979,197,1.714,198,2.154,199,2.979,200,4.13,201,2.979,202,2.979,203,2.482,204,3.441,205,2.482,206,2.482,207,4.13,208,2.154,209,1.182,210,2.482,211,2.154,212,4.741,213,1.381,214,2.482,215,2.482,216,1.91,217,0.706,218,1.165,219,2.979,220,2.979,221,4.13,222,2.979,223,1.552,224,1.226,225,2.979,226,3.441,227,1.552,228,2.482,229,2.482,230,2.482,231,2.979,232,2.979,233,2.979,234,2.154,235,2.979,236,2.979,237,2.482,238,2.482,239,2.979,240,1.913,241,1.913,242,2.482,243,1.593,244,1.226,245,1.913,246,1.913,247,1.91,248,1.913,249,1.593,250,1.913,251,2.979,252,4.741,253,3.659,254,3.659,255,1.913,256,1.913,257,1.913,258,1.913,259,1.913,260,1.593,261,0.759,262,1.29,263,0.907,264,1.958,265,0.907,266,1.593,267,1.913,268,0.907,269,0.64,270,0.907,271,0.587,272,0.907,273,0.587,274,0.539,275,0.907,276,0.64,277,0.907,278,0.587,279,0.907,280,0.64,281,0.829,282,0.907,283,0.907,284,0.01,285,0.015,286,0.01]],["title/injectables/AdminService.html",[37,2.023,287,1.149]],["body/injectables/AdminService.html",[3,0.249,4,0.249,9,0.369,11,0.359,14,2.884,15,2.079,25,0.321,26,0.935,29,0.935,31,3.918,34,2.079,35,1.313,37,2.316,40,1.26,42,1.031,43,0.034,44,0.527,45,0.702,46,1.031,50,3.56,51,1.295,52,1.445,53,1.092,54,0.826,58,2.23,59,2.079,68,1.882,69,2.818,70,2.613,74,1.713,77,1.312,78,1.434,79,1.822,82,2.057,84,0.826,85,1.445,87,3.09,90,2.316,95,1.882,100,1.593,102,0.786,103,0.535,108,0.284,109,0.093,112,1.408,114,0.899,125,1.352,140,1.786,156,2.739,158,1.07,179,1.019,197,2.079,206,2.057,249,2.057,284,0.013,285,0.019,286,0.013,287,1.316,288,1.421,289,2.057,290,2.316,291,3.614,292,3.614,293,4.169,294,3.918,295,3.614,296,3.614,297,4.703,298,3.614,299,1.583,300,3.015,301,2.47,302,1.713,303,2.47,304,2.079,305,3.614,306,4.703,307,2.47,308,3.614,309,3.614,310,2.613,311,3.01,312,3.01,313,3.614,314,3.56,315,2.47,316,2.373,317,3.614,318,3.918,319,2.47,320,2.613,321,3.56,322,2.316,323,1.171,324,2.47,325,3.614,326,1.421,327,3.614,328,2.47,329,3.614,330,3.614,331,3.614,332,2.47,333,3.614,334,2.47,335,2.057,336,2.47,337,2.057,338,2.47,339,1.565,340,3.56,341,2.47,342,3.015,343,2.47,344,1.421,345,1.286,346,1.583,347,1.583,348,2.47,349,2.057,350,1.583,351,1.286,352,2.613,353,1.286,354,1.171,355,1.421,356,1.421,357,1.286,358,3.01,359,2.47,360,3.918,361,2.057,362,2.47,363,3.918,364,2.47,365,2.47,366,2.47,367,2.057,368,2.47,369,4.703,370,3.918,371,2.739,372,2.226,373,2.47,374,3.01,375,2.47,376,0.98,377,1.786,378,2.47,379,2.47,380,2.47,381,2.47,382,2.47,383,2.47,384,2.47,385,2.47,386,2.47,387,4.703,388,2.47,389,2.47,390,2.47,391,2.057,392,3.614,393,2.47,394,2.47,395,2.47,396,3.614,397,2.47,398,2.47,399,2.47,400,2.057,401,2.47,402,2.057,403,1.786]],["title/interfaces/Answer.html",[209,1.253,218,0.89]],["body/interfaces/Answer.html",[3,0.334,4,0.334,9,0.204,11,0.482,25,0.43,26,1.148,43,0.034,44,0.54,45,0.43,51,1.542,52,1.016,53,0.653,58,1.569,77,1.36,79,1.205,100,1.573,102,0.646,108,0.381,109,0.168,111,1.922,112,1.321,118,1.723,125,1.148,157,1.904,158,2.488,179,0.933,209,2.214,213,1.674,217,1.321,218,1.654,284,0.023,285,0.023,286,0.017,323,1.569,339,1.433,404,2.393,405,1.904,406,2.121,407,3.62,408,1.674,409,3.21,410,3.209,411,2.123,412,1.569,413,2.553,414,2.393,415,2.121,416,2.393,417,2.393,418,1.723,419,3.209,420,2.373,421,2.393,422,4.45,423,2.123,424,2.393,425,2.393,426,3.209,427,2.393,428,1.904,429,2.121,430,1.723,431,2.781,432,1.433,433,1.904,434,2.393,435,2.393,436,2.393,437,2.317,438,2.393,439,2.393,440,2.393,441,2.393,442,2.393,443,2.393,444,2.553,445,2.121,446,1.569,447,1.569,448,2.393,449,2.393,450,3.62,451,2.393,452,2.393,453,1.723,454,2.393,455,2.121,456,2.393,457,2.393,458,2.393,459,2.393,460,2.393,461,2.393,462,2.393,463,2.393,464,2.393,465,2.393,466,1.904,467,2.393]],["title/components/AppComponent.html",[0,0.565,269,1.056]],["body/components/AppComponent.html",[0,1.078,1,1.298,2,2.249,3,0.426,4,0.426,5,2.003,6,2.003,7,2.003,8,2.003,9,0.26,11,0.615,18,2.003,19,2.994,20,1.802,21,2.462,23,2.462,43,0.033,44,0.524,97,2.249,102,0.615,103,0.915,108,0.486,109,0.16,261,1.677,262,2.249,263,2.003,264,2.78,265,2.003,268,2.003,269,1.961,270,2.003,271,1.298,272,2.003,273,1.298,274,1.192,275,2.003,276,1.413,277,2.003,278,1.298,279,2.003,280,1.413,281,1.83,282,2.003,283,2.003,284,0.022,285,0.027,286,0.022,357,3.054,468,3.52,469,5.621,470,5.192,471,4.326]],["title/modules/AppModule.html",[472,1.497,473,2.023]],["body/modules/AppModule.html",[1,1.81,3,0.366,4,0.366,9,0.223,20,1.022,43,0.034,102,0.923,103,0.785,105,2.324,106,3.408,107,1.888,108,0.417,109,0.137,261,1.439,269,2.101,271,1.81,273,1.81,276,1.97,278,1.81,280,1.97,284,0.019,285,0.024,286,0.019,344,2.086,472,1.719,473,4.161,474,1.571,475,2.086,476,4.363,477,4.363,478,3.02,479,2.324,480,3.02,481,3.02,482,3.02,483,3.02,484,3.39,485,3.39,486,3.926,487,2.086,488,1.888,489,3.625,490,3.408,491,4.713,492,3.408,493,4.713,494,4.713,495,4.713,496,3.625,497,3.625,498,3.02,499,3.625,500,3.02,501,3.02,502,2.324,503,3.02,504,3.625,505,3.02,506,3.625,507,3.02]],["title/modules/AppRoutingModule.html",[472,1.497,484,1.816]],["body/modules/AppRoutingModule.html",[0,1.046,1,1.585,3,0.422,4,0.422,9,0.258,14,2.179,43,0.034,102,0.901,103,0.905,108,0.481,109,0.158,125,1.082,271,1.585,273,1.585,274,1.18,278,1.585,284,0.022,285,0.027,286,0.022,474,1.812,479,2.681,484,2.969,490,3.025,492,3.731,498,3.485,500,3.485,501,3.485,502,2.681,503,3.485,507,3.485,508,4.183,509,4.183,510,5.16,511,2.915,512,2.407,513,3.587,514,4.183,515,5.092,516,4.299,517,4.662,518,3.485,519,5.16,520,5.16,521,5.16,522,4.183]],["title/classes/Authorization.html",[109,0.119,372,1.644]],["body/classes/Authorization.html",[3,0.309,4,0.309,9,0.335,11,0.446,14,2.698,25,0.398,29,1.34,40,1.041,42,0.949,43,0.034,44,0.485,45,0.673,46,0.949,53,0.949,54,1.609,68,2.192,69,2.776,70,3.044,74,1.752,77,0.725,96,2.66,100,1.357,101,3.321,102,0.7,108,0.352,109,0.116,112,0.997,118,2.505,120,1.452,125,0.792,137,3.044,164,3.892,167,1.996,176,3.924,178,1.595,211,2.214,227,2.829,284,0.016,285,0.022,286,0.016,294,3.507,312,5.008,354,1.452,372,2.192,377,3.479,431,1.996,437,1.823,523,1.595,524,2.551,525,1.996,526,4.39,527,4.209,528,4.209,529,3.746,530,4.209,531,6.012,532,6.012,533,3.062,534,4.675,535,3.746,536,5.18,537,4.209,538,3.321,539,4.315,540,4.209,541,3.062,542,4.81,543,4.209,544,3.062,545,4.209,546,3.062,547,3.062,548,4.209,549,2.551,550,1.963,551,3.044,552,4.81,553,3.062,554,2.551,555,1.963,556,4.81,557,3.062,558,3.062,559,3.062,560,3.062,561,2.214,562,3.062,563,3.062,564,3.062,565,3.062,566,3.507,567,4.81,568,4.81,569,4.209,570,4.81]],["title/components/GameComponent.html",[0,0.565,271,0.97]],["body/components/GameComponent.html",[0,0.761,1,0.528,2,1.186,3,0.173,4,0.173,5,0.815,6,0.815,7,0.815,8,0.815,9,0.106,11,0.398,12,2.495,16,1.426,17,2.188,18,0.815,19,2.41,20,1.434,21,1.298,23,1.298,25,0.589,26,0.708,29,0.708,32,2.495,35,1.048,40,1.299,42,0.54,43,0.034,44,0.393,45,0.661,46,0.54,51,1.401,53,1.028,54,1.7,61,2.475,73,2.606,74,1.796,77,0.808,78,1.797,79,1.649,84,1.65,96,1.298,97,1.186,100,1.391,102,0.718,103,0.372,108,0.198,109,0.065,111,1.186,112,0.649,114,0.626,121,1.755,159,1.545,167,1.298,175,1.086,176,2.495,179,1.391,185,1.98,213,1.141,217,1.382,218,1.098,223,1.426,224,1.755,227,1.426,261,0.682,262,1.186,263,0.815,264,1.845,265,0.815,268,0.815,269,0.575,270,0.815,271,1.196,272,0.815,273,0.528,274,1.589,275,0.815,276,0.575,277,0.815,278,0.528,279,0.815,280,1.302,281,2.346,282,0.815,283,0.815,284,0.022,285,0.014,286,0.009,304,3.206,311,2.281,339,1.186,354,1.618,355,0.989,376,2.018,408,0.916,412,0.815,415,1.755,432,2.202,444,1.575,446,1.298,447,1.298,453,1.426,487,0.989,505,1.431,512,0.989,518,3.773,525,1.845,526,1.98,538,1.755,555,2.903,571,1.431,572,2.738,573,3.413,574,3.413,575,2.738,576,3.413,577,4.53,578,2.468,579,2.188,580,2.843,581,3.413,582,2.815,583,3.893,584,3.893,585,2.738,586,3.893,587,4.251,588,3.893,589,3.436,590,1.431,591,2.606,592,2.734,593,2.058,594,2.738,595,1.718,596,2.281,597,2.738,598,1.755,599,1.718,600,1.718,601,3.893,602,2.281,603,2.281,604,2.738,605,2.281,606,2.738,607,2.281,608,2.738,609,3.893,610,2.815,611,2.738,612,1.718,613,2.281,614,1.718,615,2.738,616,2.281,617,2.738,618,1.98,619,1.755,620,2.738,621,1.718,622,3.243,623,1.718,624,2.738,625,2.738,626,2.495,627,1.755,628,1.718,629,2.738,630,1.755,631,1.98,632,2.738,633,1.426,634,2.738,635,2.281,636,2.281,637,2.738,638,2.815,639,1.718,640,2.281,641,1.718,642,1.962,643,1.718,644,3.542,645,2.738,646,2.281,647,2.738,648,1.718,649,1.98,650,1.718,651,1.718,652,3.676,653,1.718,654,1.718,655,2.281,656,3.243,657,2.738,658,2.738,659,2.281,660,1.718,661,2.281,662,1.718,663,1.98,664,1.718,665,1.755,666,1.718,667,2.738,668,1.718,669,2.281,670,2.738,671,1.718,672,2.815,673,1.98,674,1.98,675,1.431,676,1.101,677,3.893,678,3.413,679,1.431,680,2.281,681,1.755,682,1.98,683,1.718,684,1.718,685,1.718,686,2.738,687,3.413,688,1.101,689,2.738,690,3.413,691,3.542,692,1.575,693,1.243,694,2.738,695,2.188,696,3.413,697,3.893,698,1.431,699,1.718,700,1.718,701,1.101,702,1.431,703,1.718,704,1.718,705,2.738,706,3.413,707,1.718,708,1.718,709,2.281,710,1.718,711,1.243,712,3.243,713,3.413,714,4.53,715,1.718,716,3.413,717,1.718,718,0.989,719,1.718,720,1.431,721,1.718,722,1.243]],["title/components/GameOverComponent.html",[0,0.565,273,0.97]],["body/components/GameOverComponent.html",[0,0.954,1,0.891,2,1.757,3,0.293,4,0.293,5,1.376,6,1.376,7,1.376,8,1.376,9,0.179,11,0.422,12,2.6,16,2.113,17,2.997,18,1.376,19,2.784,20,1.656,21,1.923,23,1.923,25,0.377,26,1.049,29,1.049,32,3.245,35,1.436,40,1.153,42,0.572,43,0.034,44,0.537,45,0.608,46,0.572,52,1.246,53,0.8,54,0.971,61,2.113,74,1.703,77,0.687,84,2.044,97,1.757,102,0.68,103,0.628,107,2.113,108,0.334,109,0.11,112,0.687,114,1.057,125,1.309,126,2.113,128,3.379,159,2.009,167,1.923,179,1.144,261,1.152,262,1.757,263,1.376,264,2.4,265,1.376,268,1.376,269,0.971,270,1.376,271,0.891,272,1.376,273,1.555,274,1.711,275,1.376,276,0.971,277,1.376,278,0.891,279,1.376,280,0.971,281,1.257,282,1.376,283,1.376,284,0.015,285,0.021,286,0.028,310,2.933,326,2.334,355,1.67,376,1.152,408,1.356,432,1.257,488,1.512,502,3.537,525,1.923,593,2.454,598,3.245,642,1.757,665,2.6,676,1.86,679,2.418,681,2.6,682,2.099,693,2.099,701,3.245,709,2.418,718,1.67,722,2.933,723,4.597,724,2.418,725,4.056,726,4.056,727,4.676,728,4.056,729,5.665,730,5.519,731,2.418,732,4.056,733,2.902,734,4.056,735,2.933,736,3.379,737,4.056,738,2.902,739,4.056,740,3.379,741,2.902,742,5.872,743,4.676,744,4.676,745,4.676,746,4.056,747,4.056,748,2.902,749,2.902,750,2.099,751,2.418,752,2.902,753,2.902,754,2.933,755,4.056,756,4.056,757,4.056,758,4.056,759,4.056]],["title/modules/MaterialModule.html",[472,1.497,485,1.816]],["body/modules/MaterialModule.html",[3,0.436,4,0.436,9,0.266,11,0.629,43,0.034,102,0.922,103,0.935,108,0.497,109,0.164,125,1.118,284,0.022,285,0.027,286,0.022,472,2.495,474,2.624,479,2.769,485,3.029,490,3.124,492,3.806,760,3.124,761,4.729,762,5.263,763,4.385,764,4.32,765,4.385,766,4.32,767,4.385,768,4.32,769,4.385,770,4.32,771,4.385,772,4.32,773,4.385,774,4.32,775,4.385,776,4.32,777,4.32,778,4.385,779,4.32,780,3.124]],["title/interfaces/PracticeQuestion.html",[209,1.253,413,1.816]],["body/interfaces/PracticeQuestion.html",[3,0.333,4,0.333,9,0.203,11,0.48,25,0.429,26,1.146,43,0.034,44,0.539,45,0.429,51,1.541,52,1.014,53,0.651,58,1.565,77,1.359,79,1.202,100,1.572,102,0.645,108,0.38,109,0.168,111,1.919,112,1.32,118,1.719,125,1.146,157,1.899,158,2.486,179,0.931,209,2.212,213,1.672,217,1.359,218,1.572,284,0.023,285,0.023,286,0.017,323,1.565,339,1.43,404,2.387,405,1.899,406,2.115,407,3.615,408,1.672,409,3.207,410,3.205,411,2.12,412,1.565,413,3.075,414,3.203,415,2.115,416,2.387,417,2.387,418,1.719,419,3.205,420,2.37,421,2.387,422,4.448,423,2.12,424,2.387,425,2.387,426,3.203,427,2.387,428,1.899,429,2.115,430,1.719,431,2.779,432,1.43,433,1.899,434,2.387,435,2.387,436,2.387,437,2.315,438,2.387,439,2.387,440,2.387,441,2.387,442,2.387,443,2.387,444,2.549,445,2.115,446,1.565,447,1.565,448,2.387,449,2.387,450,3.615,451,2.387,452,2.387,453,1.719,454,2.387,455,2.115,456,2.387,457,2.387,458,2.387,459,2.387,460,2.387,461,2.387,462,2.387,463,2.387,464,2.387,465,2.387,466,1.899,467,2.387]],["title/classes/Question.html",[109,0.119,217,0.748]],["body/classes/Question.html",[3,0.412,4,0.412,9,0.251,11,0.739,25,0.53,26,1.314,35,1.561,40,1.254,42,0.805,43,0.034,44,0.412,45,0.753,46,0.805,77,1.513,108,0.47,109,0.154,204,4.61,216,4.025,217,1.542,284,0.021,285,0.026,286,0.021,423,2.492,431,2.977,523,2.125,711,4.002,781,3.4,782,2.951,783,3.4,784,4.081,785,4.081,786,5.082,787,5.534,788,5.534,789,5.534,790,4.081,791,4.081,792,4.081]],["title/classes/QuestionPreparer.html",[109,0.119,793,2.283]],["body/classes/QuestionPreparer.html",[3,0.324,4,0.324,9,0.198,11,0.467,20,1.226,25,0.417,29,1.367,40,1.067,42,0.972,43,0.034,44,0.497,45,0.641,46,0.972,51,1.506,53,0.633,54,1.074,64,4.107,77,1.379,85,0.986,91,2.787,100,1.605,102,0.633,108,0.37,109,0.187,111,2.466,112,1.03,120,1.522,125,1.569,129,2.322,144,2.675,178,1.673,180,2.502,185,3.145,213,1.074,217,1.348,218,1.49,226,4.107,228,2.675,284,0.017,285,0.022,286,0.017,376,1.274,405,3.041,408,1.074,409,2.502,412,1.522,423,2.097,437,2.466,444,3.041,523,1.673,525,2.062,526,4.34,652,3.145,692,2.502,695,2.058,793,3.145,794,2.675,795,5.284,796,4.348,797,4.348,798,4.348,799,3.211,800,4.348,801,5.284,802,3.623,803,3.145,804,4.348,805,3.211,806,3.623,807,4.348,808,3.211,809,4.348,810,4.348,811,4.6,812,3.211,813,3.623,814,3.145,815,3.211,816,3.211,817,3.211,818,3.211,819,3.211,820,3.211,821,3.211,822,3.211,823,3.211,824,3.623,825,3.211,826,3.211,827,3.211,828,4.348,829,3.211,830,4.348,831,3.211,832,3.211,833,3.211,834,3.211,835,3.211,836,3.211,837,3.211,838,4.348,839,4.348,840,3.211,841,3.211,842,3.211,843,3.211,844,3.211,845,2.058,846,2.322,847,2.675,848,2.675,849,2.675,850,2.675,851,3.211,852,3.211,853,3.211,854,3.211]],["title/injectables/QuestionService.html",[287,1.149,592,1.816]],["body/injectables/QuestionService.html",[3,0.344,4,0.344,9,0.21,11,0.496,15,2.604,25,0.443,26,1.171,29,1.171,35,1.561,40,1.172,42,0.892,43,0.034,44,0.457,45,0.732,46,0.892,51,1.171,52,1.39,53,0.892,68,2.357,69,2.145,85,1.047,95,2.357,100,0.961,102,0.86,103,0.738,108,0.392,109,0.192,112,1.282,114,1.241,125,1.171,179,1.276,213,1.513,217,1.334,218,1.276,284,0.018,285,0.023,286,0.018,287,1.648,288,1.961,290,2.901,299,2.185,300,3.47,302,2.145,316,2.671,342,2.185,344,1.961,345,1.775,346,2.185,347,2.185,351,1.775,353,1.775,354,1.616,356,1.961,357,1.775,371,3.47,372,2.646,412,1.616,453,2.357,582,3.914,592,2.604,593,2.56,633,2.357,642,2.509,782,3.272,803,3.272,855,2.839,856,3.272,857,5.081,858,4.525,859,4.525,860,4.525,861,5.413,862,3.408,863,4.525,864,3.77,865,3.408,866,3.408,867,3.77,868,3.77,869,3.408,870,2.839,871,2.839,872,2.839,873,3.408,874,3.408,875,3.77,876,3.408,877,5.413,878,4.509,879,3.408,880,4.233,881,3.408,882,3.408]],["title/classes/QuestionStore.html",[109,0.119,418,1.644]],["body/classes/QuestionStore.html",[3,0.272,4,0.272,9,0.166,11,0.392,25,0.35,26,0.996,29,0.996,34,2.215,40,1.296,42,1.022,43,0.034,44,0.598,45,0.673,46,1.022,51,1.601,52,0.828,53,1.094,54,1.502,58,1.825,77,1.343,78,1.07,79,1.635,100,1.726,102,0.56,108,0.31,109,0.17,111,2.122,112,1.227,118,1.404,125,0.996,157,2.215,158,2.5,179,1.086,209,1.944,213,1.287,217,1.16,218,1.382,284,0.02,285,0.02,286,0.014,323,1.278,339,1.668,405,3.474,406,1.728,407,2.784,408,1.287,409,2.215,410,2.468,411,2.201,412,1.278,413,2.215,414,1.949,415,2.468,416,2.784,417,2.784,418,2.005,419,3.454,420,2.554,421,3.248,422,4.452,423,2.291,424,3.248,425,3.248,426,3.746,427,2.784,428,2.215,429,2.468,430,2.005,431,2.737,432,1.668,433,2.584,434,1.949,435,1.949,436,1.949,437,2.457,438,1.949,439,1.949,440,1.949,441,1.949,442,1.949,443,1.949,444,2.819,445,2.468,446,1.825,447,1.825,448,2.784,449,2.784,450,3.248,451,1.949,452,1.949,453,2.005,454,2.784,455,2.879,456,2.784,457,1.949,458,1.949,459,1.949,460,1.949,461,1.949,462,1.949,463,1.949,464,1.949,465,1.949,466,1.551,467,1.949,523,1.404,582,1.949,883,3.85,884,3.85,885,2.696,886,2.696,887,2.696,888,2.696,889,2.696,890,2.696,891,2.696,892,2.696,893,2.696,894,2.696,895,2.696,896,2.696,897,2.696,898,2.696,899,2.696,900,2.696,901,2.696]],["title/components/QuestionsComponent.html",[0,0.565,276,1.056]],["body/components/QuestionsComponent.html",[0,0.962,1,0.747,2,1.548,3,0.245,4,0.245,5,1.153,6,1.153,7,1.153,8,1.153,9,0.15,11,0.354,16,1.861,18,1.153,19,2.667,20,1.587,21,1.694,23,1.694,25,0.676,26,0.924,29,0.924,35,1.301,40,1.238,42,0.835,43,0.034,44,0.502,45,0.698,46,0.835,51,1.345,53,0.835,54,1.416,61,1.861,62,2.583,73,2.686,77,0.846,81,2.29,85,1.097,96,2.213,97,1.548,102,0.757,103,0.526,108,0.28,109,0.092,112,0.576,114,0.885,120,1.153,121,3.188,122,3.173,125,0.629,146,2.583,169,1.861,179,1.316,213,1.663,216,2.29,217,1.333,218,1.671,223,1.266,234,2.583,242,2.025,247,1.558,261,0.965,262,1.548,263,1.153,264,2.213,265,1.153,268,1.153,269,0.813,270,1.153,271,0.747,272,1.153,273,0.747,274,0.686,275,1.153,276,1.561,277,1.153,278,0.747,279,1.153,280,0.813,281,1.053,282,1.153,283,1.153,284,0.024,285,0.018,286,0.013,304,2.686,314,3.889,326,2.056,339,1.548,345,1.266,354,1.153,376,0.965,412,1.153,423,1.973,525,1.694,578,3.886,579,3.188,580,4.143,592,2.992,610,2.583,622,3.889,627,1.558,642,2.154,655,2.976,659,2.976,661,2.976,675,2.025,691,2.976,712,2.025,811,2.976,824,2.025,864,2.025,902,2.025,903,4.235,904,4.235,905,4.235,906,3.572,907,4.668,908,3.572,909,2.976,910,3.572,911,4.235,912,2.431,913,3.572,914,2.431,915,2.431,916,2.431,917,2.431,918,3.528,919,2.431,920,3.572,921,2.431,922,3.572,923,2.976,924,3.572,925,3.572,926,3.572,927,4.668,928,2.431,929,4.235,930,3.572,931,2.431,932,2.976,933,3.572,934,3.572,935,3.572,936,2.29,937,3.528,938,4.143,939,2.583,940,2.583,941,3.528,942,4.235,943,2.431,944,2.025,945,2.431,946,2.431,947,2.431,948,3.572,949,2.431,950,3.572,951,3.572,952,2.431,953,2.025,954,1.399,955,2.431,956,2.431,957,2.431,958,2.431,959,2.431,960,2.431,961,2.431,962,2.431,963,2.431,964,2.431,965,3.572,966,2.431,967,2.431,968,2.431,969,2.431,970,2.431,971,2.431,972,2.431,973,2.431,974,2.431,975,2.431,976,2.431,977,3.572,978,2.431,979,3.572,980,3.572,981,2.431,982,2.431,983,2.025,984,2.431]],["title/guards/RegisterGuard.html",[513,2.023,985,2.023]],["body/guards/RegisterGuard.html",[3,0.41,4,0.41,9,0.25,11,0.591,16,2.115,25,0.528,29,1.31,35,1.696,40,1.097,42,0.801,43,0.034,44,0.41,45,0.528,46,0.801,53,0.801,74,2.105,100,1.145,102,0.803,103,0.879,108,0.467,109,0.154,112,1.2,114,1.479,179,1.429,227,2.639,274,1.631,284,0.021,285,0.026,286,0.021,287,1.845,326,2.915,356,2.337,357,2.115,376,1.612,432,1.759,512,2.337,513,3.247,516,5.055,538,3.247,591,3.541,593,2.628,598,3.247,619,3.247,676,2.603,681,2.603,698,4.22,718,2.337,731,3.383,985,3.247,986,3.383,987,3.383,988,5.066,989,5.066,990,5.066,991,4.061,992,4.22,993,4.061,994,5.066,995,4.22,996,4.061]],["title/components/SignupComponent.html",[0,0.565,278,0.97]],["body/components/SignupComponent.html",[0,0.802,1,0.588,2,1.292,3,0.193,4,0.193,5,0.908,6,0.908,7,0.908,8,0.908,9,0.118,11,0.279,12,1.912,16,1.553,17,2.348,18,0.908,19,2.495,20,1.484,21,1.414,23,1.414,25,0.249,26,0.771,29,0.771,32,2.65,33,3.444,35,1.125,40,1.164,42,0.378,43,0.034,44,0.5,45,0.388,46,0.378,51,1.069,53,0.815,54,1.382,59,2.73,61,2.471,68,1.553,73,2.73,74,1.505,78,1.778,79,1.631,84,2.083,85,1.573,86,3.051,88,3.732,91,3.041,97,1.292,100,0.841,102,0.69,103,0.415,105,1.228,108,0.22,109,0.073,114,0.698,125,1.069,158,2.055,159,2.033,167,1.414,169,2.153,175,1.64,176,1.912,179,1.445,183,2.157,188,2.65,193,2.157,194,1.385,213,0.997,217,0.706,218,0.841,229,3.444,238,2.485,244,1.912,260,3.444,261,0.76,262,1.292,263,0.908,264,1.96,265,0.908,266,1.596,268,0.908,269,0.641,270,0.908,271,0.588,272,0.908,273,0.588,274,1.626,275,0.908,276,0.641,277,0.908,278,1.27,279,0.908,280,0.641,281,0.83,282,0.908,283,0.908,284,0.01,285,0.015,286,0.01,310,2.157,355,1.102,376,1.778,391,2.485,408,0.997,420,2.428,432,2.146,437,1.292,512,1.102,517,4.755,525,1.96,529,2.989,538,2.65,555,2.65,579,1.912,589,3.89,590,1.596,591,2.73,593,2.146,598,1.912,602,2.485,607,2.485,610,2.157,619,1.912,626,1.912,627,2.65,631,2.157,633,1.553,638,3.704,642,2.055,656,2.485,663,2.989,665,1.912,676,1.228,681,2.348,682,3.239,692,2.379,693,1.385,695,1.912,701,2.65,702,2.485,718,1.716,751,2.485,754,3.239,845,1.912,846,2.157,872,1.596,875,1.596,909,3.444,936,2.65,992,2.485,997,1.596,998,2.157,999,2.983,1000,3.89,1001,3.663,1002,2.983,1003,3.663,1004,3.663,1005,4.48,1006,3.663,1007,4.134,1008,3.175,1009,2.983,1010,1.916,1011,2.485,1012,2.983,1013,1.916,1014,4.134,1015,1.916,1016,1.916,1017,2.983,1018,1.916,1019,2.485,1020,4.134,1021,2.485,1022,1.916,1023,2.983,1024,1.916,1025,1.916,1026,3.952,1027,1.916,1028,1.916,1029,1.916,1030,1.916,1031,1.916,1032,1.916,1033,2.983,1034,2.983,1035,2.983,1036,2.983,1037,1.916,1038,1.916,1039,2.983,1040,2.983,1041,2.983,1042,1.916,1043,1.916,1044,1.916,1045,1.916,1046,1.916,1047,3.663,1048,2.983,1049,2.983,1050,3.663,1051,1.916,1052,2.983,1053,4.744,1054,2.983,1055,2.983,1056,3.444,1057,1.916,1058,2.983,1059,2.983,1060,2.157,1061,2.485,1062,2.485,1063,2.983,1064,2.157,1065,4.134,1066,2.989,1067,4.134,1068,2.485,1069,2.983,1070,2.485,1071,2.485,1072,4.744,1073,2.983,1074,2.157,1075,2.485,1076,2.485,1077,2.983,1078,4.744,1079,2.983,1080,2.983,1081,2.485,1082,2.485,1083,2.983,1084,2.983,1085,2.983,1086,2.983,1087,2.485,1088,1.916]],["title/classes/Team.html",[84,1.056,109,0.119]],["body/classes/Team.html",[3,0.326,4,0.326,9,0.199,11,0.635,25,0.419,26,1.129,35,1.34,40,1.283,42,0.637,43,0.034,44,0.534,45,0.77,46,1.208,59,2.845,61,3.129,77,1.404,84,2.161,96,1.53,108,0.372,109,0.122,156,3.169,159,2.262,217,1.171,274,1.608,284,0.017,285,0.022,286,0.022,408,1.459,411,1.962,431,3.035,437,2.141,447,1.53,523,1.681,578,4.123,579,3.169,642,2.8,649,3.575,711,4.215,754,4.123,1019,4.608,1021,4.749,1082,4.118,1089,2.689,1090,4.749,1091,5.701,1092,5.701,1093,3.228,1094,3.228,1095,4.364,1096,4.943,1097,4.943,1098,4.608,1099,4.943,1100,4.943,1101,4.118,1102,3.228,1103,3.228,1104,3.228,1105,3.228,1106,3.228,1107,3.228,1108,3.228]],["title/injectables/TeamService.html",[287,1.149,593,1.367]],["body/injectables/TeamService.html",[3,0.262,4,0.262,9,0.16,11,0.378,15,2.157,25,0.338,26,0.97,29,0.97,34,2.157,35,1.351,40,1.273,42,1.082,43,0.034,44,0.553,45,0.755,46,1.082,52,1.784,53,1.082,54,0.869,58,1.777,69,2.788,74,1.754,77,1.141,78,1.031,79,1.86,84,2.169,85,1.569,95,1.953,100,1.676,102,0.774,103,0.562,108,0.299,109,0.166,110,2.711,112,1.355,114,0.946,125,0.97,126,1.953,140,1.879,158,1.125,167,1.777,179,1.057,274,1.057,284,0.013,285,0.019,286,0.013,287,1.365,288,1.495,290,2.403,293,4.254,299,1.665,300,3.087,302,1.777,316,2.712,318,4.012,320,2.711,321,3.665,322,2.403,323,1.232,326,2.157,335,2.164,337,2.164,339,1.624,340,3.665,342,2.403,344,1.495,345,1.353,346,1.665,347,1.665,351,1.353,353,1.353,354,1.232,355,1.495,356,1.495,357,1.353,358,3.123,360,4.012,361,2.164,363,3.123,370,2.164,371,1.665,372,1.353,374,2.164,400,2.164,402,2.164,403,1.879,408,1.254,420,2.421,431,2.523,453,1.953,525,1.777,593,1.624,665,2.403,688,3.087,856,2.711,954,3.062,1090,3.123,1098,2.164,1109,2.164,1110,3.749,1111,3.749,1112,3.123,1113,3.123,1114,2.598,1115,3.749,1116,2.598,1117,3.749,1118,2.598,1119,3.749,1120,2.598,1121,3.749,1122,2.598,1123,3.749,1124,3.749,1125,2.598,1126,2.598,1127,2.598,1128,2.598,1129,2.598,1130,2.598,1131,1.879,1132,2.598,1133,2.598,1134,2.598,1135,2.598,1136,4.399,1137,2.598,1138,2.598,1139,2.598,1140,2.598,1141,4.816,1142,2.598,1143,2.598,1144,2.598,1145,2.598,1146,2.598,1147,2.598,1148,2.598,1149,2.598,1150,2.598]],["title/injectables/TimeService.html",[287,1.149,1008,2.023]],["body/injectables/TimeService.html",[3,0.416,4,0.416,9,0.254,11,0.6,15,2.942,25,0.536,29,1.322,35,1.707,40,1.107,42,0.813,43,0.034,44,0.416,45,0.536,46,0.813,51,1.322,53,0.813,95,2.663,102,0.869,103,0.892,108,0.474,109,0.156,112,0.976,114,1.501,159,2.306,175,2.029,188,3.277,197,2.942,274,1.442,284,0.021,285,0.026,286,0.021,287,1.862,288,2.371,290,3.277,299,2.642,300,3.725,302,2.424,316,2.635,344,2.371,345,2.146,346,2.642,347,2.642,351,2.146,353,2.146,354,1.954,356,2.371,357,2.146,420,2.424,488,2.663,856,3.697,878,3.433,1008,3.277,1151,3.433,1152,5.812,1153,4.121,1154,4.121,1155,4.259,1156,5.113,1157,5.113,1158,4.121]],["title/components/TimerComponent.html",[0,0.565,280,1.056]],["body/components/TimerComponent.html",[0,0.784,1,0.791,2,1.613,3,0.26,4,0.26,5,1.22,6,1.22,7,1.22,8,1.22,9,0.159,11,0.375,18,1.22,19,2.706,20,1.61,21,1.765,23,1.765,25,0.334,26,0.963,29,0.963,34,2.143,40,1.296,42,0.508,43,0.034,44,0.441,45,0.689,46,0.508,53,1.143,54,1.938,62,2.693,68,1.94,77,0.882,78,1.021,79,0.937,81,2.387,85,0.791,97,1.613,100,1.61,102,0.375,103,0.557,108,0.296,109,0.097,112,0.882,120,1.22,159,2.171,169,1.341,175,1.903,203,3.995,223,1.341,224,2.387,247,1.65,261,1.021,262,1.613,263,1.22,264,2.273,265,1.22,268,1.22,269,0.861,270,1.22,271,0.791,272,1.22,273,0.791,274,0.726,275,1.22,276,0.861,277,1.22,278,0.791,279,1.22,280,1.604,281,2.688,282,1.22,283,1.22,284,0.013,285,0.019,286,0.013,304,2.759,428,1.481,437,2.077,446,1.765,487,2.759,535,4.245,589,4.245,603,3.995,613,3.995,630,3.262,642,2.473,644,2.144,646,3.995,652,2.693,680,3.645,718,2.518,720,3.645,735,3.955,750,1.861,782,2.693,918,3.645,1064,2.693,1071,3.102,1155,2.144,1159,2.144,1160,3.724,1161,3.724,1162,3.724,1163,4.376,1164,3.724,1165,5.47,1166,4.376,1167,4.795,1168,4.795,1169,3.995,1170,5.088,1171,2.574,1172,3.724,1173,2.574,1174,2.574,1175,3.724,1176,5.304,1177,2.574,1178,4.795,1179,2.574,1180,4.795,1181,3.724,1182,4.795,1183,2.574,1184,2.574,1185,2.574,1186,2.574,1187,2.574,1188,2.574,1189,3.724,1190,2.574,1191,2.574,1192,2.574,1193,2.144,1194,2.574,1195,2.574,1196,2.574,1197,2.574,1198,1.861,1199,4.795,1200,4.376,1201,4.795,1202,2.574,1203,2.574,1204,2.574,1205,2.574,1206,2.574,1207,2.574,1208,2.574,1209,2.574,1210,2.574,1211,2.574]],["title/coverage.html",[1212,3.581]],["body/coverage.html",[0,1.034,1,0.956,9,0.192,10,2.592,20,0.877,37,1.994,43,0.034,45,0.404,84,1.041,85,0.956,109,0.207,175,1.235,209,1.689,217,0.737,218,0.877,247,4.216,269,1.041,271,0.956,273,0.956,276,1.041,278,0.956,280,1.041,284,0.016,285,0.022,286,0.016,287,1.899,289,2.592,316,2.018,351,1.621,352,2.25,353,1.621,372,1.621,405,3.001,406,3.109,411,1.235,413,1.79,418,2.217,433,1.79,446,3.055,468,2.592,474,1.348,502,1.994,513,1.994,524,2.592,535,3.771,551,2.25,571,2.592,591,2.791,592,1.79,593,1.348,672,2.25,673,2.25,674,2.25,723,2.592,724,2.592,760,2.25,781,2.592,793,2.25,794,2.592,855,2.592,902,2.592,939,2.25,940,2.25,985,1.994,987,2.592,997,2.592,1008,1.994,1089,2.592,1109,2.592,1131,2.25,1151,2.592,1159,2.592,1212,2.592,1213,3.111,1214,3.111,1215,3.111,1216,6.489,1217,4.256,1218,3.111,1219,4.25,1220,4.256,1221,3.111,1222,3.111,1223,4.256,1224,4.256,1225,4.256,1226,2.592,1227,3.546,1228,2.592,1229,2.592,1230,3.546,1231,3.546,1232,2.592,1233,4.256,1234,4.698,1235,2.592,1236,2.592,1237,2.592,1238,2.592,1239,2.592,1240,3.111,1241,4.256,1242,3.949,1243,2.592,1244,2.25,1245,2.592,1246,2.592,1247,3.546,1248,3.546,1249,2.592,1250,2.592,1251,3.111,1252,3.111]],["title/dependencies.html",[475,2.183,1253,2.641]],["body/dependencies.html",[43,0.034,52,1.35,103,0.952,105,2.818,106,3.846,107,2.77,284,0.023,285,0.027,286,0.023,345,2.29,349,3.662,350,3.41,475,2.53,512,2.53,549,3.662,550,2.818,692,2.53,813,3.662,880,3.662,944,3.662,1254,6.313,1255,4.396,1256,5.319,1257,4.396,1258,4.396,1259,4.396,1260,4.396,1261,3.662,1262,4.396,1263,4.396,1264,4.396,1265,4.396,1266,4.396,1267,4.396,1268,4.431,1269,4.396,1270,4.396,1271,4.396,1272,3.846,1273,4.396,1274,3.662,1275,4.396,1276,4.396,1277,4.396,1278,4.396,1279,4.396,1280,4.396,1281,4.396]],["title/miscellaneous/functions.html",[1282,1.693,1283,3.161]],["body/miscellaneous/functions.html",[25,0.574,42,1.131,43,0.031,44,0.578,45,0.574,46,1.131,78,1.754,111,1.915,126,2.302,169,2.302,179,1.246,197,2.543,284,0.023,285,0.027,286,0.023,302,2.095,316,2.889,323,2.718,339,1.915,350,3.421,351,2.779,403,3.196,411,1.754,430,2.302,455,3.421,814,3.196,849,4.446,932,3.682,954,2.543,1060,3.196,1219,3.196,1242,3.196,1243,4.776,1244,3.196,1247,3.682,1248,4.776,1249,4.446,1250,4.446,1282,2.833,1283,3.682,1284,5.336,1285,3.682,1286,3.682,1287,4.42,1288,4.42,1289,5.336,1290,5.336,1291,4.42,1292,4.42,1293,3.682,1294,3.196,1295,4.42,1296,3.196]],["title/index.html",[25,0.343,466,1.52,630,1.693]],["body/index.html",[0,0.905,4,0.341,9,0.312,20,1.268,43,0.023,44,0.341,51,1.163,52,1.774,85,1.037,122,1.943,123,2.812,126,2.342,129,3.252,146,2.441,167,2.132,170,2.812,171,2.812,172,4.213,175,1.785,178,1.758,180,3.323,186,4.911,190,2.441,194,2.441,197,2.91,198,3.252,208,3.252,213,1.129,223,1.758,284,0.017,285,0.023,286,0.023,350,2.164,411,2.229,419,2.164,423,1.34,430,2.342,445,2.164,447,2.397,471,2.812,487,1.943,488,1.758,550,2.164,596,2.812,618,2.441,626,3.456,633,1.758,850,2.812,868,2.812,1074,2.441,1075,2.812,1081,2.812,1169,2.812,1198,2.441,1272,2.441,1294,2.441,1296,2.441,1297,3.376,1298,3.899,1299,3.376,1300,3.376,1301,6.286,1302,3.376,1303,2.812,1304,3.376,1305,6.063,1306,3.376,1307,3.376,1308,5.057,1309,3.376,1310,4.497,1311,5.057,1312,2.812,1313,4.492,1314,2.812,1315,3.376,1316,3.376,1317,3.376,1318,3.376,1319,4.492,1320,3.376,1321,3.746,1322,4.497,1323,3.376,1324,3.376,1325,3.376,1326,2.812,1327,3.376,1328,5.895,1329,4.213,1330,3.376,1331,5.776,1332,3.376,1333,2.812,1334,3.376,1335,3.376,1336,3.746,1337,4.492,1338,2.441,1339,4.497,1340,3.376,1341,3.376,1342,3.376,1343,3.376,1344,4.213,1345,3.376,1346,2.812,1347,4.497,1348,3.376,1349,2.812,1350,3.376,1351,2.812,1352,2.812,1353,2.812,1354,5.057,1355,3.376,1356,3.376,1357,4.497,1358,3.376,1359,4.497,1360,2.812,1361,3.376,1362,3.376,1363,3.376,1364,3.376,1365,3.376,1366,3.376,1367,3.376,1368,4.497,1369,4.497,1370,4.497,1371,3.376,1372,3.376,1373,3.376,1374,3.376,1375,2.812,1376,4.497,1377,3.376,1378,4.497,1379,3.376,1380,3.376,1381,3.376,1382,3.376,1383,3.376,1384,3.376,1385,3.376]],["title/modules.html",[474,1.862]],["body/modules.html",[43,0.029,107,2.59,244,3.667,284,0.026,285,0.029,286,0.026,473,3.188,474,2.154,484,2.862,485,2.862,1386,4.973,1387,4.973,1388,6.022,1389,5.721]],["title/overview.html",[1390,3.581]],["body/overview.html",[1,1.741,2,1.865,43,0.033,261,1.709,269,2.084,271,1.741,273,1.741,276,1.895,278,1.741,280,1.895,284,0.022,285,0.027,286,0.022,288,2.478,404,3.113,472,2.041,473,4.203,474,1.865,475,2.478,476,3.587,477,3.587,478,3.587,479,2.76,480,3.587,481,3.587,482,3.587,483,3.587,484,3.261,485,3.261,486,4.376,487,2.478,488,2.243,511,2.243,523,2.243,692,2.478,695,2.76,845,2.76,846,3.113,847,3.587,848,3.587,985,2.76,1066,3.113,1390,3.587]],["title/routes.html",[511,2.239]],["body/routes.html",[43,0.03,284,0.026,285,0.03,286,0.026,511,2.659]],["title/todo.html",[120,1.252,466,1.52,630,1.693]],["body/todo.html",[0,0.896,3,0.431,9,0.152,14,2.448,20,1.018,43,0.028,44,0.249,51,1.352,52,1.444,53,0.487,58,1.17,59,2.458,66,2.055,69,1.712,73,1.42,74,1.822,81,1.581,84,1.673,85,1.444,90,1.581,95,1.285,96,1.712,101,2.315,107,1.285,110,3.399,111,1.069,118,1.285,120,3.068,122,1.42,126,1.285,137,1.784,156,1.581,157,1.42,158,1.564,159,1.695,161,2.055,164,1.581,169,1.285,174,2.055,175,1.695,178,1.881,180,3.008,181,2.055,183,1.784,190,2.611,193,1.784,195,2.055,198,1.784,205,2.055,208,1.784,209,1.433,210,4.498,211,3.089,217,1.185,218,0.696,223,1.881,224,1.581,227,1.285,230,3.008,234,1.784,237,4.168,243,2.055,244,1.581,274,1.205,281,1.85,284,0.013,285,0.019,286,0.013,302,1.17,304,1.42,316,1.712,322,1.581,323,1.712,376,0.979,408,0.825,410,1.581,411,1.433,423,0.979,428,2.078,429,1.581,430,1.285,472,1.17,475,1.42,488,1.881,511,1.285,534,3.008,539,2.055,554,2.055,561,1.784,566,2.055,605,2.055,618,1.784,619,3.35,626,1.581,627,1.581,633,1.881,640,3.558,642,1.564,649,1.784,688,1.581,780,1.784,783,2.055,803,1.784,814,1.784,845,1.581,923,2.055,936,2.315,937,3.558,938,2.055,941,2.055,953,2.055,954,2.705,986,2.055,995,2.055,998,1.784,1000,2.611,1011,3.558,1026,2.055,1056,2.055,1060,2.611,1061,2.055,1062,2.055,1070,3.008,1074,3.089,1076,2.055,1087,2.055,1101,2.055,1193,2.055,1198,3.089,1261,2.055,1272,2.611,1274,3.008,1293,2.055,1298,1.784,1303,3.008,1312,2.055,1313,3.008,1314,3.558,1321,2.055,1326,2.055,1329,3.008,1336,2.055,1337,3.008,1338,1.784,1344,2.055,1346,2.055,1351,3.008,1352,2.055,1353,2.055,1391,2.467,1392,2.467,1393,2.467,1394,2.467,1395,2.467,1396,2.467,1397,2.467,1398,3.558,1399,2.467,1400,2.467,1401,2.467,1402,2.467,1403,2.467,1404,2.467,1405,2.055,1406,2.467,1407,2.467,1408,2.467,1409,2.467,1410,2.467,1411,2.467,1412,3.611,1413,2.467,1414,2.467,1415,2.467,1416,3.611,1417,3.008,1418,2.467,1419,2.467,1420,2.467,1421,2.055,1422,3.611,1423,2.467,1424,2.467,1425,3.611,1426,3.611,1427,2.467,1428,4.701,1429,2.467,1430,2.055,1431,2.467,1432,2.467,1433,2.467,1434,3.611,1435,3.611,1436,2.467,1437,2.467,1438,2.467,1439,2.467,1440,2.467,1441,2.467,1442,2.467,1443,2.055,1444,2.467,1445,2.467,1446,2.467,1447,3.008,1448,2.467,1449,2.467,1450,2.467,1451,2.467,1452,2.467,1453,2.467,1454,2.467,1455,2.467,1456,2.467,1457,2.467,1458,2.467,1459,2.467,1460,2.467,1461,2.467,1462,2.467,1463,2.467,1464,2.467,1465,2.467,1466,2.467,1467,2.467,1468,3.611,1469,3.008,1470,3.611,1471,2.467,1472,2.467,1473,2.467,1474,2.467,1475,2.467,1476,2.467,1477,2.467,1478,3.611,1479,2.467,1480,2.467,1481,2.467,1482,4.271,1483,2.467,1484,2.467,1485,2.467,1486,3.611,1487,2.467,1488,2.467,1489,2.467,1490,2.467,1491,2.467,1492,2.467,1493,2.467,1494,3.611,1495,2.467,1496,2.467,1497,2.467,1498,2.467,1499,2.467,1500,2.467,1501,3.611,1502,3.611,1503,3.611,1504,3.611,1505,2.467,1506,2.467,1507,2.467,1508,2.467,1509,2.467,1510,3.611,1511,2.467,1512,4.271,1513,2.467,1514,2.467,1515,2.467,1516,2.467,1517,2.467,1518,2.467,1519,2.467,1520,2.467,1521,3.611,1522,2.467,1523,3.008,1524,2.467,1525,2.467,1526,2.467,1527,2.467,1528,2.467,1529,2.467,1530,3.611,1531,2.467,1532,2.467,1533,2.467,1534,2.467,1535,2.467,1536,2.467,1537,2.467,1538,2.467,1539,2.467,1540,2.467,1541,2.467,1542,2.467,1543,2.467,1544,2.467,1545,2.467,1546,3.611,1547,2.467,1548,2.467,1549,2.467,1550,2.467,1551,2.467,1552,2.467,1553,2.467,1554,3.611,1555,2.467,1556,2.467,1557,2.467,1558,2.467,1559,2.467,1560,2.467,1561,2.467,1562,3.611,1563,2.467,1564,2.467,1565,2.467,1566,2.467,1567,2.467,1568,2.467,1569,2.467,1570,2.467,1571,2.467,1572,2.467,1573,2.467,1574,2.467,1575,2.467,1576,2.467]],["title/miscellaneous/variables.html",[1282,1.693,1577,3.161]],["body/miscellaneous/variables.html",[9,0.117,14,1.893,20,0.833,25,0.384,43,0.034,44,0.191,45,0.771,51,1.152,52,0.907,69,0.897,74,0.689,77,0.861,78,2.432,79,2.215,84,0.633,85,1.116,87,2.136,90,1.213,91,1.894,96,1.723,97,0.82,101,1.894,121,1.894,122,1.089,151,1.577,152,1.577,159,1.873,164,1.213,175,1.873,177,1.577,178,1.539,180,2.563,187,1.577,188,1.894,209,0.751,213,0.633,214,1.577,215,2.461,216,3.437,217,1.315,218,1.158,227,1.539,262,0.82,284,0.01,285,0.015,286,0.01,302,0.897,320,2.136,322,1.213,342,1.894,352,2.136,353,1.539,367,1.577,371,2.632,376,0.751,377,1.368,408,1.579,409,3.085,411,1.873,418,1.893,420,0.897,423,2.168,432,0.82,433,2.091,446,0.897,447,0.897,474,1.574,511,0.986,515,1.577,529,1.368,550,2.33,551,2.97,555,1.213,561,1.368,591,3.31,616,1.577,631,2.136,633,0.986,635,1.577,636,1.577,638,1.368,663,1.368,669,2.461,672,2.136,673,2.136,674,2.136,688,1.894,701,1.213,722,2.628,735,2.628,736,1.577,740,1.577,750,1.368,760,1.368,761,1.577,763,1.577,765,1.577,767,1.577,769,1.577,771,1.577,773,1.577,775,1.577,778,1.577,780,1.368,802,1.577,806,1.577,867,1.577,870,2.461,871,1.577,936,1.894,939,2.136,940,2.136,954,2.091,983,3.028,998,1.368,1000,1.368,1064,1.368,1066,1.368,1068,1.577,1112,2.461,1113,2.461,1131,2.136,1219,1.368,1226,1.577,1227,4.108,1228,1.577,1229,1.577,1230,3.421,1231,1.577,1232,2.461,1234,1.577,1235,2.461,1236,2.461,1237,2.461,1238,2.461,1239,1.577,1242,1.368,1244,2.136,1245,1.577,1246,1.577,1268,1.577,1282,1.213,1285,4.687,1286,3.421,1294,2.628,1296,2.136,1298,1.368,1319,1.577,1333,1.577,1338,1.368,1349,3.028,1360,1.577,1375,1.577,1398,1.577,1405,1.577,1417,1.577,1421,1.577,1430,1.577,1443,1.577,1447,1.577,1469,3.421,1523,1.577,1577,1.577,1578,1.892,1579,1.892,1580,1.892,1581,1.892,1582,2.954,1583,1.892,1584,1.892,1585,1.892,1586,1.892,1587,1.892,1588,1.892,1589,1.892,1590,1.892,1591,1.892,1592,3.634,1593,1.892,1594,1.892,1595,1.892,1596,1.892,1597,1.892,1598,1.892,1599,1.892,1600,1.892,1601,1.892,1602,1.892,1603,1.892,1604,1.892,1605,1.892,1606,1.892,1607,1.892,1608,2.954,1609,1.892,1610,1.892,1611,1.892,1612,2.954,1613,1.892,1614,2.954,1615,1.892,1616,1.892,1617,2.954,1618,1.892,1619,1.892,1620,1.892,1621,1.892,1622,1.892,1623,1.892,1624,1.892,1625,1.892,1626,1.892,1627,1.892,1628,1.892,1629,1.892,1630,1.892,1631,1.892,1632,1.892,1633,1.892,1634,1.892,1635,1.892,1636,1.892,1637,1.892,1638,1.892,1639,1.892,1640,1.892,1641,1.892,1642,1.892,1643,1.892,1644,3.634,1645,1.892,1646,2.954,1647,1.892,1648,1.892,1649,2.954,1650,1.892,1651,1.892,1652,1.892,1653,1.892,1654,1.892,1655,1.892,1656,1.892,1657,1.892,1658,2.954,1659,1.892,1660,1.892,1661,1.892,1662,2.954,1663,1.892,1664,1.892,1665,1.892,1666,1.892,1667,1.892,1668,1.892,1669,1.892,1670,1.892,1671,1.892,1672,1.892,1673,1.892,1674,1.892,1675,1.892,1676,1.892,1677,2.954,1678,1.892,1679,1.892,1680,2.954,1681,1.892,1682,1.892,1683,1.892,1684,1.892,1685,1.892,1686,1.892,1687,1.892,1688,1.892,1689,2.954,1690,1.892,1691,2.954,1692,2.954,1693,1.892,1694,1.892,1695,1.892,1696,1.892,1697,1.892,1698,1.892,1699,1.892,1700,1.892,1701,2.954,1702,1.892,1703,1.892,1704,1.892,1705,1.892,1706,1.892,1707,1.892,1708,1.892,1709,2.954,1710,1.892,1711,1.892,1712,1.892,1713,1.892,1714,1.892,1715,1.892,1716,1.892,1717,1.892,1718,2.954,1719,1.892,1720,1.892,1721,1.892,1722,1.892,1723,1.892,1724,1.892,1725,1.892,1726,1.892,1727,1.892,1728,1.892,1729,2.954,1730,1.892,1731,1.892,1732,3.634,1733,2.954,1734,1.892,1735,1.892,1736,1.892,1737,1.892,1738,1.892,1739,1.892,1740,1.892,1741,1.892,1742,1.892,1743,1.892,1744,2.954,1745,1.892,1746,1.892,1747,1.892,1748,1.892,1749,4.454,1750,1.892,1751,1.892,1752,1.892,1753,1.892,1754,1.892,1755,1.892,1756,1.892,1757,1.892,1758,1.892,1759,1.892,1760,1.892,1761,2.954,1762,2.954,1763,1.892,1764,2.954,1765,1.892,1766,1.892,1767,1.892,1768,1.892,1769,1.892,1770,1.892,1771,1.892,1772,1.892,1773,1.892,1774,1.892,1775,1.892,1776,1.892,1777,2.954,1778,1.892,1779,1.892,1780,1.892,1781,1.892,1782,1.892,1783,2.954,1784,2.954,1785,1.892,1786,1.892,1787,1.892,1788,1.892,1789,1.892,1790,1.892,1791,1.892,1792,1.892,1793,2.954,1794,1.892,1795,1.892,1796,1.892,1797,1.892,1798,1.892,1799,1.892,1800,1.892,1801,1.892,1802,1.892,1803,1.892,1804,1.892,1805,1.892,1806,1.892,1807,1.892,1808,1.892,1809,1.892,1810,1.892,1811,1.892,1812,1.892,1813,1.892,1814,1.892,1815,1.892,1816,1.892,1817,1.892,1818,1.892,1819,1.892,1820,1.892,1821,1.892,1822,1.892]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":652,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":1202,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["009000",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":692,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"dependencies.html":{},"overview.html":{}}}],["1.18.3",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["1.6.6",{"_index":1299,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":608,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":247,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":722,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":1211,"title":{},"body":{"components/TimerComponent.html":{}}}],["10mb",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/11",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["12/12/2020",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/31/1969",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13/13",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":1042,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":250,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":1065,"title":{},"body":{"components/SignupComponent.html":{}}}],["19th",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1066,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1241,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1055,"title":{},"body":{"components/SignupComponent.html":{}}}],["23/23",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":695,"title":{},"body":{"components/GameComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.1.9",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["3.2.7",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":192,"title":{},"body":{"components/AdminComponent.html":{}}}],["300",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":845,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":846,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["5.0.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":847,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["6.5.2",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":701,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":842,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["7",{"_index":848,"title":{},"body":{"classes/QuestionPreparer.html":{},"overview.html":{}}}],["7/7",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["7pm",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":260,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["8pm",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9/9",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["_answers",{"_index":424,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_id",{"_index":1090,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["_practicequestions",{"_index":421,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_questions",{"_index":425,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["_token",{"_index":293,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["a.points",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{}}}],["absolute",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abused",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accelerated",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":1529,"title":{},"body":{"todo.html":{}}}],["access",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["accessing",{"_index":988,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["according",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["account",{"_index":1407,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":617,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":994,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":787,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":283,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":1193,"title":{},"body":{"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["adding",{"_index":554,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["admin'},{'name",{"_index":268,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin(req",{"_index":530,"title":{},"body":{"classes/Authorization.html":{}}}],["admin.component.css",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":292,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminpassword",{"_index":1235,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminroutes",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admins",{"_index":537,"title":{},"body":{"classes/Authorization.html":{}}}],["adminservice",{"_index":37,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":573,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":752,"title":{},"body":{"components/GameOverComponent.html":{}}}],["against",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agnostic",{"_index":1483,"title":{},"body":{"todo.html":{}}}],["agriculture",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alaskan",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["all(/^(?!.*\\/api",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowed",{"_index":538,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["allowing",{"_index":1527,"title":{},"body":{"todo.html":{}}}],["allows",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":868,"title":{},"body":{"injectables/QuestionService.html":{},"index.html":{}}}],["already",{"_index":1026,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1437,"title":{},"body":{"todo.html":{}}}],["america/chicago",{"_index":1801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":1349,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angu\\u2026",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":1298,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":944,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":344,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":764,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":766,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":768,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":770,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":772,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":774,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":776,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":779,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":512,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":903,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":950,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":935,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":937,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["another",{"_index":229,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["answer",{"_index":218,"title":{"interfaces/Answer.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answerclicked",{"_index":911,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":864,"title":{},"body":{"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["answers",{"_index":423,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answers(given",{"_index":442,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["answers.push(answer",{"_index":834,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["anything",{"_index":1075,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1469,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api/admin/check_token",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/admin/login",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/answer/check",{"_index":1809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/can_start",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/now",{"_index":1814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/date/start",{"_index":1815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practice/check",{"_index":1804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/practicequestions/get",{"_index":1803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/delete",{"_index":1808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/get",{"_index":1805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/questions/save",{"_index":1806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/stats/questions",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get",{"_index":1810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/get_all",{"_index":1812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/team/save",{"_index":1813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiroutes",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":469,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":470,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":269,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/json",{"_index":871,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":473,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":484,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1503,"title":{},"body":{"todo.html":{}}}],["architectural",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["architecture",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":811,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["array(this.currentquestion.answers.length).fill('inactive",{"_index":973,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array.from(array(rows.length).keys",{"_index":825,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array.length",{"_index":835,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[i",{"_index":838,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["array[j",{"_index":839,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["art",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1332,"title":{},"body":{"index.html":{}}}],["artist",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ascending",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["assigns",{"_index":843,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["asteroid",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["astronomy",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":455,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{}}}],["asyncdata",{"_index":1249,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":1287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{}}}],["authenticate",{"_index":536,"title":{},"body":{"classes/Authorization.html":{}}}],["authenticating",{"_index":528,"title":{},"body":{"classes/Authorization.html":{}}}],["authorization",{"_index":372,"title":{"classes/Authorization.html":{}},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["authorization.checktoken(req",{"_index":569,"title":{},"body":{"classes/Authorization.html":{}}}],["authorize",{"_index":1551,"title":{},"body":{"todo.html":{}}}],["authorizes",{"_index":1461,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":1438,"title":{},"body":{"todo.html":{}}}],["automatic",{"_index":636,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":190,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["autonomy",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowrongguess",{"_index":673,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":244,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["avoid",{"_index":98,"title":{},"body":{"components/AdminComponent.html":{}}}],["await",{"_index":460,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["away",{"_index":1449,"title":{},"body":{"todo.html":{}}}],["azerbaijan",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["b.points",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["back",{"_index":1531,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1313,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":982,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":948,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1422,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1468,"title":{},"body":{"todo.html":{}}}],["bank",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bar",{"_index":777,"title":{},"body":{"modules/MaterialModule.html":{}}}],["barber",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1060,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["basilica",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basis",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautification",{"_index":1393,"title":{},"body":{"todo.html":{}}}],["before",{"_index":227,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":1099,"title":{},"body":{"classes/Team.html":{}}}],["begin",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behind",{"_index":1572,"title":{},"body":{"todo.html":{}}}],["belt",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["benefits",{"_index":1561,"title":{},"body":{"todo.html":{}}}],["better",{"_index":1352,"title":{},"body":{"index.html":{},"todo.html":{}}}],["between",{"_index":1064,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["bildungsroman",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob",{"_index":149,"title":{},"body":{"components/AdminComponent.html":{}}}],["blob([data",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{}}}],["body",{"_index":880,"title":{},"body":{"injectables/QuestionService.html":{},"dependencies.html":{}}}],["bodyparserjson",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodyparsertext",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bond",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":326,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":254,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1375,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1440,"title":{},"body":{"todo.html":{}}}],["box",{"_index":252,"title":{},"body":{"components/AdminComponent.html":{}}}],["boy",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":555,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":576,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":605,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":577,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":674,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":1388,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{},"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{},"todo.html":{}}}],["browser/animations",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":491,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1518,"title":{},"body":{"todo.html":{}}}],["bud",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buddy",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1331,"title":{},"body":{"index.html":{}}}],["built",{"_index":1321,"title":{},"body":{"index.html":{},"todo.html":{}}}],["button",{"_index":627,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":981,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["c",{"_index":219,"title":{},"body":{"components/AdminComponent.html":{}}}],["cached",{"_index":429,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["call",{"_index":646,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":1165,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["calling",{"_index":1197,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":603,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can_start",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":516,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canada",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canstart",{"_index":1031,"title":{},"body":{"components/SignupComponent.html":{}}}],["carbon",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carmen",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["case",{"_index":156,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catch",{"_index":463,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["catcherror",{"_index":346,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":878,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TimeService.html":{}}}],["catcherror(this.handleerroradmin",{"_index":369,"title":{},"body":{"injectables/AdminService.html":{}}}],["catcherror(this.handleerroruser",{"_index":1141,"title":{},"body":{"injectables/TeamService.html":{}}}],["categories",{"_index":1404,"title":{},"body":{"todo.html":{}}}],["category",{"_index":216,"title":{},"body":{"components/AdminComponent.html":{},"classes/Question.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["center",{"_index":1476,"title":{},"body":{"todo.html":{}}}],["century",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cerium",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1378,"title":{},"body":{"index.html":{}}}],["changes",{"_index":929,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.currentquestion",{"_index":971,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":968,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":969,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["character",{"_index":233,"title":{},"body":{"components/AdminComponent.html":{}}}],["characteristic",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charge",{"_index":415,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["check",{"_index":178,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["check_token",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkanswer",{"_index":858,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answerindex",{"_index":860,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checked",{"_index":184,"title":{},"body":{"components/AdminComponent.html":{}}}],["checkinterval",{"_index":1167,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["checktoken",{"_index":294,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["checktoken(req",{"_index":540,"title":{},"body":{"classes/Authorization.html":{}}}],["chemical",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemistry",{"_index":1421,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["chicha",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["china",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorofluorocarbons",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choices",{"_index":789,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":238,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["chrome",{"_index":1512,"title":{},"body":{"todo.html":{}}}],["circulation",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cities",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":109,"title":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":523,"title":{},"body":{"classes/Authorization.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":239,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":1168,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":1175,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":647,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":717,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":172,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["clicked",{"_index":622,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientpath",{"_index":1236,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":1161,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":759,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1326,"title":{},"body":{"index.html":{},"todo.html":{}}}],["coffee",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collection",{"_index":458,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["collection.findone",{"_index":461,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["color",{"_index":983,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":923,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["column",{"_index":241,"title":{},"body":{"components/AdminComponent.html":{}}}],["columns",{"_index":212,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1441,"title":{},"body":{"todo.html":{}}}],["command",{"_index":198,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["comment",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compared",{"_index":1511,"title":{},"body":{"todo.html":{}}}],["compares",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compete",{"_index":1012,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":1082,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":188,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["completed",{"_index":610,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["completely",{"_index":398,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":265,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":505,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":390,"title":{},"body":{"injectables/AdminService.html":{}}}],["concat(['school,team",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["conduction",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":1479,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1394,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":956,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["connection",{"_index":1442,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1489,"title":{},"body":{"todo.html":{}}}],["considered",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":1054,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1436,"title":{},"body":{"todo.html":{}}}],["console.error(`an",{"_index":464,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["console.error(errors",{"_index":821,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["console.log",{"_index":1563,"title":{},"body":{"todo.html":{}}}],["console.log(json.parse(json.stringify(obj",{"_index":1571,"title":{},"body":{"todo.html":{}}}],["consoleoutput",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":354,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":1095,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(adminservice",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{}}}],["constructor(http",{"_index":299,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":784,"title":{},"body":{"classes/Question.html":{}}}],["constructor(questionservice",{"_index":912,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["constructor(router",{"_index":590,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["constructor(schoolname",{"_index":1093,"title":{},"body":{"classes/Team.html":{}}}],["constructor(teamservice",{"_index":731,"title":{},"body":{"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["constructs",{"_index":786,"title":{},"body":{"classes/Question.html":{}}}],["contain",{"_index":225,"title":{},"body":{"components/AdminComponent.html":{}}}],["containing",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":525,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":870,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1411,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":700,"title":{},"body":{"components/GameComponent.html":{}}}],["contributes",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convection",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":734,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":749,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":213,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctanswer",{"_index":409,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":939,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corresponding",{"_index":844,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["counted",{"_index":635,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["course",{"_index":1532,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":1212,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":849,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":826,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["creating",{"_index":1534,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1475,"title":{},"body":{"todo.html":{}}}],["crop",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto",{"_index":349,"title":{},"body":{"injectables/AdminService.html":{},"dependencies.html":{}}}],["cst",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["culture",{"_index":1420,"title":{},"body":{"todo.html":{}}}],["current",{"_index":304,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":649,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["currentquestion",{"_index":578,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":979,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":980,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion]{@link",{"_index":967,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["d",{"_index":220,"title":{},"body":{"components/AdminComponent.html":{}}}],["d00000",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dangeroustodo",{"_index":1553,"title":{},"body":{"todo.html":{}}}],["data",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["database",{"_index":411,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["database.collection(name",{"_index":459,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["date",{"_index":215,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["date.now",{"_index":680,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1443,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dbpassword",{"_index":1237,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dburl",{"_index":1244,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["dbuser",{"_index":1238,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decides",{"_index":1384,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":476,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deco",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decoded",{"_index":542,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team",{"_index":563,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.schoolname",{"_index":564,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.team.teamnumber",{"_index":565,"title":{},"body":{"classes/Authorization.html":{}}}],["decoded.type",{"_index":556,"title":{},"body":{"classes/Authorization.html":{}}}],["decorators",{"_index":666,"title":{},"body":{"components/GameComponent.html":{}}}],["default",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["delete",{"_index":1807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deleted",{"_index":1365,"title":{},"body":{"index.html":{}}}],["denakk\\u2019e",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["denali",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":475,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{},"todo.html":{}}}],["dependency",{"_index":1353,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1362,"title":{},"body":{"index.html":{}}}],["depth",{"_index":1540,"title":{},"body":{"todo.html":{}}}],["descending",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{}}}],["describe",{"_index":407,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["designed",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":1312,"title":{},"body":{"index.html":{},"todo.html":{}}}],["develop",{"_index":1413,"title":{},"body":{"todo.html":{}}}],["developed",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1296,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["difference",{"_index":1560,"title":{},"body":{"todo.html":{}}}],["different",{"_index":1535,"title":{},"body":{"todo.html":{}}}],["diffusion",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dioxide",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directive",{"_index":263,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":282,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1330,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1310,"title":{},"body":{"index.html":{}}}],["display",{"_index":661,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":1160,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1333,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dist/server",{"_index":1380,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":308,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1416,"title":{},"body":{"todo.html":{}}}],["div",{"_index":240,"title":{},"body":{"components/AdminComponent.html":{}}}],["documentation",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["dog",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["domesticated",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domsanitizer",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{}}}],["don",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":194,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":266,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["done",{"_index":391,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1417,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["dos",{"_index":1453,"title":{},"body":{"todo.html":{}}}],["down",{"_index":1557,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1478,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1424,"title":{},"body":{"todo.html":{}}}],["during",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamic",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["dyno",{"_index":182,"title":{},"body":{"components/AdminComponent.html":{}}}],["dynos",{"_index":1554,"title":{},"body":{"todo.html":{}}}],["e",{"_index":221,"title":{},"body":{"components/AdminComponent.html":{}}}],["e2e",{"_index":1341,"title":{},"body":{"index.html":{}}}],["each",{"_index":936,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":1068,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["earned",{"_index":1100,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":951,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["edge",{"_index":1513,"title":{},"body":{"todo.html":{}}}],["edwardian",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effect",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":952,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":262,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["emergencies",{"_index":1403,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":932,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":1172,"title":{},"body":{"components/TimerComponent.html":{}}}],["end",{"_index":626,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ended",{"_index":1525,"title":{},"body":{"todo.html":{}}}],["endpoint",{"_index":1462,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":539,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["ends",{"_index":624,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":1078,"title":{},"body":{"components/SignupComponent.html":{}}}],["environment",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1358,"title":{},"body":{"index.html":{}}}],["err",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["err.message",{"_index":467,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["error",{"_index":323,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["error.error",{"_index":400,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["errorobject",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":814,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["errors.length",{"_index":820,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["es6",{"_index":1496,"title":{},"body":{"todo.html":{}}}],["escaped",{"_index":235,"title":{},"body":{"components/AdminComponent.html":{}}}],["essential",{"_index":1399,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":702,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["event",{"_index":314,"title":{},"body":{"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":394,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.total",{"_index":395,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":385,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":918,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":313,"title":{},"body":{"injectables/AdminService.html":{}}}],["everything",{"_index":1306,"title":{},"body":{"index.html":{}}}],["example",{"_index":1080,"title":{},"body":{"components/SignupComponent.html":{}}}],["exchange",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":1339,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":925,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exist",{"_index":448,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["exists",{"_index":602,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["expire",{"_index":1546,"title":{},"body":{"todo.html":{}}}],["expired",{"_index":321,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["expires",{"_index":1548,"title":{},"body":{"todo.html":{}}}],["expiring",{"_index":1552,"title":{},"body":{"todo.html":{}}}],["explicitly",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploited",{"_index":1533,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1467,"title":{},"body":{"todo.html":{}}}],["export",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exporter",{"_index":236,"title":{},"body":{"components/AdminComponent.html":{}}}],["exports",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":550,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["express.static(clientpath",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":414,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["eyes",{"_index":1542,"title":{},"body":{"todo.html":{}}}],["failed",{"_index":1574,"title":{},"body":{"todo.html":{}}}],["fails",{"_index":1444,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1409,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":788,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":432,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1545,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1477,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1430,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["federal",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feel",{"_index":1087,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["figaro",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["figure",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["file.name",{"_index":387,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":388,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1319,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload(file",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":243,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["filter(team",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{}}}],["finally",{"_index":196,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":1155,"title":{},"body":{"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["fine",{"_index":1522,"title":{},"body":{"todo.html":{}}}],["finish",{"_index":1524,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":907,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":579,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":966,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":726,"title":{},"body":{"components/GameOverComponent.html":{}}}],["finishing",{"_index":1508,"title":{},"body":{"todo.html":{}}}],["firefox",{"_index":257,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":920,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":1056,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["fix",{"_index":1530,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1459,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1391,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1335,"title":{},"body":{"index.html":{}}}],["flashy",{"_index":1515,"title":{},"body":{"todo.html":{}}}],["flute",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus",{"_index":1450,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1381,"title":{},"body":{"index.html":{}}}],["following",{"_index":214,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["font",{"_index":248,"title":{},"body":{"components/AdminComponent.html":{}}}],["foods",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":568,"title":{},"body":{"classes/Authorization.html":{}}}],["force",{"_index":426,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["forkjoin",{"_index":945,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":962,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{}}}],["formcontrol",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["formgroup",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["found",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1325,"title":{},"body":{"index.html":{}}}],["free",{"_index":183,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["frontend",{"_index":1311,"title":{},"body":{"index.html":{}}}],["full",{"_index":521,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fun",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":535,"title":{},"body":{"classes/Authorization.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["functions",{"_index":1283,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1343,"title":{},"body":{"index.html":{}}}],["gained",{"_index":659,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":984,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":274,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":272,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":574,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":575,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":271,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":518,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":273,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gas",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gecko",{"_index":258,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1329,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1297,"title":{},"body":{"index.html":{}}}],["geography",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georgian",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_all",{"_index":1811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getadmin",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{}}}],["getanswers",{"_index":898,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getcanstart",{"_index":1152,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":295,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":305,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfromdatabase",{"_index":883,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getfromdatabase(name",{"_index":456,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getpracticequestions",{"_index":891,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getquestions",{"_index":582,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{}}}],["gets",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":1191,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteamfromserver",{"_index":1110,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":1115,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteams",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["getteams(link",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{}}}],["getter",{"_index":884,"title":{},"body":{"classes/QuestionStore.html":{}}}],["getter(name",{"_index":449,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["getting",{"_index":466,"title":{"index.html":{},"todo.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["gettoken",{"_index":335,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["gioachino",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["giovanni",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["given",{"_index":437,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":340,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["giver",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1539,"title":{},"body":{"todo.html":{}}}],["go",{"_index":1345,"title":{},"body":{"index.html":{}}}],["goddess",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1198,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1423,"title":{},"body":{"todo.html":{}}}],["gradient",{"_index":1538,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1389,"title":{},"body":{"modules.html":{}}}],["greenhouse",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gross",{"_index":1537,"title":{},"body":{"todo.html":{}}}],["guard",{"_index":985,"title":{"guards/RegisterGuard.html":{}},"body":{"guards/RegisterGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":986,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":638,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":1058,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1396,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1397,"title":{},"body":{"todo.html":{}}}],["handleerror",{"_index":351,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":403,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["handleerroradmin",{"_index":296,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroradmin(error",{"_index":317,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerroruser",{"_index":1111,"title":{},"body":{"injectables/TeamService.html":{}}}],["handleerroruser(error",{"_index":1117,"title":{},"body":{"injectables/TeamService.html":{}}}],["handlers",{"_index":1480,"title":{},"body":{"todo.html":{}}}],["handles",{"_index":320,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["happens",{"_index":1547,"title":{},"body":{"todo.html":{}}}],["having",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["headers",{"_index":371,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["heat",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":246,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1344,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":444,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{}}}],["helpers.ts",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":173,"title":{},"body":{"components/AdminComponent.html":{}}}],["heroku",{"_index":171,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["heroku's",{"_index":1356,"title":{},"body":{"index.html":{}}}],["hha",{"_index":1800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["high",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hobby",{"_index":181,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["holds",{"_index":782,"title":{},"body":{"classes/Question.html":{},"injectables/QuestionService.html":{},"components/TimerComponent.html":{}}}],["holes",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hrs",{"_index":746,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["htmlanchorelement",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{}}}],["htmlinputelement",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{}}}],["http",{"_index":302,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1317,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":300,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":493,"title":{},"body":{"modules/AppModule.html":{}}}],["httperrorresponse",{"_index":318,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpevent",{"_index":306,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype",{"_index":341,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":397,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":386,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":389,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpheaders",{"_index":342,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["httpheaders(headers",{"_index":874,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httpoptions",{"_index":370,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptions).pipe",{"_index":374,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["httpoptionsjson",{"_index":1131,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":1136,"title":{},"body":{"injectables/TeamService.html":{}}}],["httpoptionstext",{"_index":352,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionswithauth",{"_index":857,"title":{},"body":{"injectables/QuestionService.html":{}}}],["httprequest",{"_index":343,"title":{},"body":{"injectables/AdminService.html":{}}}],["httprequest('post",{"_index":378,"title":{},"body":{"injectables/AdminService.html":{}}}],["https://angular.io/guide/practical",{"_index":1471,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1474,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1458,"title":{},"body":{"todo.html":{}}}],["https://jlongster.com/backend",{"_index":1505,"title":{},"body":{"todo.html":{}}}],["human",{"_index":736,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["humans",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hurt",{"_index":1541,"title":{},"body":{"todo.html":{}}}],["i.e",{"_index":597,"title":{},"body":{"components/GameComponent.html":{}}}],["iconic",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":1101,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["idea",{"_index":1499,"title":{},"body":{"todo.html":{}}}],["identifier",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":665,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["implements",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["important",{"_index":207,"title":{},"body":{"components/AdminComponent.html":{}}}],["imports",{"_index":490,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1427,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":959,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":780,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1320,"title":{},"body":{"index.html":{}}}],["incorrect",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":940,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indices",{"_index":824,"title":{},"body":{"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{}}}],["indices.foreach(index",{"_index":831,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["indices.map(index",{"_index":853,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["infoit",{"_index":1550,"title":{},"body":{"todo.html":{}}}],["inform",{"_index":1543,"title":{},"body":{"todo.html":{}}}],["information",{"_index":167,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"index.html":{}}}],["init",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{}}}],["initiate",{"_index":999,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":604,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":287,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":288,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1485,"title":{},"body":{"todo.html":{}}}],["input",{"_index":938,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["inputs",{"_index":910,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["install",{"_index":1309,"title":{},"body":{"index.html":{}}}],["installed",{"_index":170,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["instance",{"_index":445,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["instanceof",{"_index":557,"title":{},"body":{"classes/Authorization.html":{}}}],["instead",{"_index":428,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":1053,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1406,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1300,"title":{},"body":{"index.html":{}}}],["interface",{"_index":209,"title":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":404,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"overview.html":{}}}],["internet",{"_index":1408,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":1176,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":1189,"title":{},"body":{"components/TimerComponent.html":{}}}],["iridium",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is\\u2026",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isn't",{"_index":1057,"title":{},"body":{"components/SignupComponent.html":{}}}],["isn\\'t",{"_index":1088,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":230,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["issues",{"_index":205,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["it's",{"_index":224,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["it\\'s",{"_index":267,"title":{},"body":{"components/AdminComponent.html":{}}}],["j",{"_index":836,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["javascript",{"_index":802,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["join('\\n",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{}}}],["join(__dirname",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":350,"title":{},"body":{"injectables/AdminService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["json",{"_index":867,"title":{},"body":{"injectables/QuestionService.html":{},"miscellaneous/variables.html":{}}}],["json'}).pipe",{"_index":368,"title":{},"body":{"injectables/AdminService.html":{}}}],["jsonwebtoken",{"_index":549,"title":{},"body":{"classes/Authorization.html":{},"dependencies.html":{}}}],["jwtverify",{"_index":547,"title":{},"body":{"classes/Authorization.html":{}}}],["jwtverify(token",{"_index":553,"title":{},"body":{"classes/Authorization.html":{}}}],["karma",{"_index":1340,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1070,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kenai",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kinda",{"_index":955,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1490,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1488,"title":{},"body":{"todo.html":{}}}],["kuwait",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kuyokuk",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["largest",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1360,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["lasts",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["late",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":645,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1372,"title":{},"body":{"index.html":{}}}],["legend",{"_index":261,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":953,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["letter",{"_index":222,"title":{},"body":{"components/AdminComponent.html":{}}}],["liechtenstein",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lies",{"_index":1564,"title":{},"body":{"todo.html":{}}}],["limit",{"_index":631,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":199,"title":{},"body":{"components/AdminComponent.html":{}}}],["lines",{"_index":231,"title":{},"body":{"components/AdminComponent.html":{}}}],["link",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["link.click",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["link.href",{"_index":160,"title":{},"body":{"components/AdminComponent.html":{}}}],["list",{"_index":827,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["literal",{"_index":866,"title":{},"body":{"injectables/QuestionService.html":{}}}],["little",{"_index":640,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["live",{"_index":1568,"title":{},"body":{"todo.html":{}}}],["loading",{"_index":1405,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":583,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":601,"title":{},"body":{"components/GameComponent.html":{}}}],["local",{"_index":1295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["localstorage.getitem('admintoken",{"_index":359,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.getitem('usertoken",{"_index":1133,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.removeitem('admintoken",{"_index":401,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.removeitem('usertoken",{"_index":1150,"title":{},"body":{"injectables/TeamService.html":{}}}],["localstorage.setitem('admintoken",{"_index":362,"title":{},"body":{"injectables/AdminService.html":{}}}],["localstorage.setitem('usertoken",{"_index":1134,"title":{},"body":{"injectables/TeamService.html":{}}}],["located",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location.reload",{"_index":402,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["log",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":325,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":297,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1455,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":572,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["login(password",{"_index":327,"title":{},"body":{"injectables/AdminService.html":{}}}],["loginform",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{}}}],["logs",{"_index":329,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":1061,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["longer",{"_index":1558,"title":{},"body":{"todo.html":{}}}],["look",{"_index":237,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["looking",{"_index":1435,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1487,"title":{},"body":{"todo.html":{}}}],["loss",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lot",{"_index":1431,"title":{},"body":{"todo.html":{}}}],["magic",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":185,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["mainly",{"_index":1549,"title":{},"body":{"todo.html":{}}}],["maize",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["major",{"_index":1559,"title":{},"body":{"todo.html":{}}}],["make",{"_index":210,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["many",{"_index":658,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["map(event",{"_index":381,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(result",{"_index":1139,"title":{},"body":{"injectables/TeamService.html":{}}}],["map(team",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["marriage",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matbuttonmodule",{"_index":763,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":765,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":767,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":285,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":761,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":485,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":769,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":837,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["math.floor(this.questions.length",{"_index":694,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":393,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":771,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":773,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":775,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":778,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":632,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1482,"title":{},"body":{"todo.html":{}}}],["mckinley",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meaning",{"_index":1359,"title":{},"body":{"index.html":{}}}],["means",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medal",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory",{"_index":1274,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["menu",{"_index":699,"title":{},"body":{"components/GameComponent.html":{}}}],["mesoamericans",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":309,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":534,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["millet",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["million",{"_index":1418,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":735,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":1166,"title":{},"body":{"components/TimerComponent.html":{}}}],["mins",{"_index":745,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minutes",{"_index":193,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":1282,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/team",{"_index":355,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modern",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modifying",{"_index":753,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":472,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{},"todo.html":{}}}],["modules",{"_index":474,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":1268,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["monaco",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongo",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb",{"_index":1272,"title":{},"body":{"dependencies.html":{},"index.html":{},"todo.html":{}}}],["monocots",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":223,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1454,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mount",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":1502,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":256,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":743,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":1182,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":730,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1486,"title":{},"body":{"todo.html":{}}}],["multiple",{"_index":1097,"title":{},"body":{"classes/Team.html":{}}}],["mystery",{"_index":1573,"title":{},"body":{"todo.html":{}}}],["mythology",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namesake",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["namespaces",{"_index":1457,"title":{},"body":{"todo.html":{}}}],["native",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["navigate",{"_index":1316,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":618,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":1074,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["needed",{"_index":1302,"title":{},"body":{"index.html":{}}}],["new",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newbery",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newteam",{"_index":1050,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":176,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["nextfunction",{"_index":532,"title":{},"body":{"classes/Authorization.html":{}}}],["ng",{"_index":1328,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":584,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":908,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":926,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{}}}],["nitrous",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1304,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1323,"title":{},"body":{"index.html":{}}}],["nodemon",{"_index":1383,"title":{},"body":{"index.html":{}}}],["non",{"_index":1398,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["nothing",{"_index":1382,"title":{},"body":{"index.html":{}}}],["now",{"_index":1523,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":1305,"title":{},"body":{"index.html":{}}}],["nshima",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":566,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{}}}],["number",{"_index":642,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["number,points",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{}}}],["numbers",{"_index":829,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["obelisk",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":408,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":934,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["objects",{"_index":803,"title":{},"body":{"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"todo.html":{}}}],["observable",{"_index":316,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["obtained",{"_index":1307,"title":{},"body":{"index.html":{}}}],["occur",{"_index":606,"title":{},"body":{"components/GameComponent.html":{}}}],["occurred",{"_index":465,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["of(team",{"_index":1144,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1402,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":585,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":620,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":586,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":169,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":904,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":909,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answerindex",{"_index":930,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":1007,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":633,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["one?\\u201d",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ones",{"_index":1157,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":587,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opera/ie",{"_index":259,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":1156,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{}}}],["otherwise",{"_index":1498,"title":{},"body":{"todo.html":{}}}],["out",{"_index":488,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{},"todo.html":{}}}],["outages",{"_index":1410,"title":{},"body":{"todo.html":{}}}],["output",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":598,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":275,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":727,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":728,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":724,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":741,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":732,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":733,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":738,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":502,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1348,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1390,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["oxide",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ozone",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1253,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":989,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":507,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":501,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":500,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":498,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["palladium",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papa",{"_index":815,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["papaparse",{"_index":813,"title":{},"body":{"classes/QuestionPreparer.html":{},"dependencies.html":{}}}],["papaparse(csv",{"_index":817,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parallel",{"_index":1374,"title":{},"body":{"index.html":{}}}],["param",{"_index":711,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"classes/Team.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":812,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed",{"_index":816,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.data",{"_index":822,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parsed.errors",{"_index":819,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["parser",{"_index":1261,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["part",{"_index":1506,"title":{},"body":{"todo.html":{}}}],["particular",{"_index":410,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"todo.html":{}}}],["password",{"_index":87,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["password').tostring",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":515,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["pathmatch",{"_index":520,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["paths",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payment",{"_index":1073,"title":{},"body":{"components/SignupComponent.html":{}}}],["peak",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["people",{"_index":1544,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":392,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":615,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1470,"title":{},"body":{"todo.html":{}}}],["period",{"_index":187,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["periodically",{"_index":1445,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1367,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1448,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1364,"title":{},"body":{"index.html":{}}}],["play",{"_index":1000,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["played",{"_index":757,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":725,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":751,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":758,"title":{},"body":{"components/GameOverComponent.html":{}}}],["plutonium",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":656,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["points",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":580,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1419,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":670,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":1355,"title":{},"body":{"index.html":{}}}],["post",{"_index":1112,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":1119,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":204,"title":{},"body":{"components/AdminComponent.html":{},"classes/Question.html":{}}}],["practice",{"_index":420,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/variables.html":{}}}],["practice_questions",{"_index":1802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["practicequestion",{"_index":413,"title":{"interfaces/PracticeQuestion.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["practicequestions",{"_index":433,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["practicequestions(given",{"_index":435,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["practices",{"_index":1465,"title":{},"body":{"todo.html":{}}}],["prepare",{"_index":795,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prepare(csv",{"_index":798,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts",{"_index":794,"title":{},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["preparer.ts:13",{"_index":799,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:35",{"_index":808,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["preparer.ts:43",{"_index":805,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prescribed",{"_index":1415,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":1014,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":625,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":750,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["prevents",{"_index":698,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["primarily",{"_index":1322,"title":{},"body":{"index.html":{}}}],["printing",{"_index":1566,"title":{},"body":{"todo.html":{}}}],["priority",{"_index":1507,"title":{},"body":{"todo.html":{}}}],["private",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1351,"title":{},"body":{"index.html":{},"todo.html":{}}}],["process",{"_index":740,"title":{},"body":{"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["process.env.mongodb_password",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongodb_user",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.start_date",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":806,"title":{},"body":{"classes/QuestionPreparer.html":{},"miscellaneous/variables.html":{}}}],["processrow",{"_index":796,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["processrow(row",{"_index":804,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["prod",{"_index":1334,"title":{},"body":{"index.html":{}}}],["production",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1350,"title":{},"body":{"index.html":{}}}],["progress",{"_index":311,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{}}}],["project",{"_index":186,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["promise",{"_index":422,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["properly",{"_index":234,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["properties",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protected",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protractor",{"_index":1342,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1567,"title":{},"body":{"todo.html":{}}}],["provided",{"_index":330,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":356,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":478,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":290,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1460,"title":{},"body":{"todo.html":{}}}],["ps:scale",{"_index":200,"title":{},"body":{"components/AdminComponent.html":{}}}],["public",{"_index":431,"title":{},"body":{"interfaces/Answer.html":{},"classes/Authorization.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"injectables/TeamService.html":{}}}],["pulls",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":1113,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":1121,"title":{},"body":{"injectables/TeamService.html":{}}}],["qatar",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["question",{"_index":217,"title":{"classes/Question.html":{}},"body":{"components/AdminComponent.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(row[1",{"_index":851,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionhelper",{"_index":588,"title":{},"body":{"components/GameComponent.html":{}}}],["questionindex",{"_index":861,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionloaddelay",{"_index":672,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questionpreparer",{"_index":793,"title":{"classes/QuestionPreparer.html":{}},"body":{"classes/QuestionPreparer.html":{},"coverage.html":{}}}],["questions",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["questions'},{'name",{"_index":277,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions(given",{"_index":439,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["questions.component.css",{"_index":905,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":906,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.push(question",{"_index":833,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["questionscomponent",{"_index":276,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":592,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["questionstore",{"_index":418,"title":{"classes/QuestionStore.html":{}},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["quiz",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quote",{"_index":232,"title":{},"body":{"components/AdminComponent.html":{}}}],["radiation",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomly",{"_index":809,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["re",{"_index":1379,"title":{},"body":{"index.html":{}}}],["reactiveformsmodule",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["read",{"_index":1473,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":737,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1346,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":174,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["really",{"_index":1347,"title":{},"body":{"index.html":{}}}],["reason",{"_index":1354,"title":{},"body":{"index.html":{}}}],["recently",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recompile",{"_index":1377,"title":{},"body":{"index.html":{}}}],["redirects",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirectto",{"_index":519,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1493,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":669,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":992,"title":{},"body":{"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["register.guard",{"_index":514,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":1072,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":513,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":1086,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":1003,"title":{},"body":{"components/SignupComponent.html":{}}}],["reign",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":856,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relating",{"_index":527,"title":{},"body":{"classes/Authorization.html":{}}}],["relevant",{"_index":291,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1318,"title":{},"body":{"index.html":{}}}],["rely",{"_index":1196,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"index.html":{}}}],["renowned",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replicate",{"_index":1526,"title":{},"body":{"todo.html":{}}}],["reportprogress",{"_index":375,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":377,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":552,"title":{},"body":{"classes/Authorization.html":{}}}],["req.headers.authorization[0",{"_index":570,"title":{},"body":{"classes/Authorization.html":{}}}],["request",{"_index":531,"title":{},"body":{"classes/Authorization.html":{}}}],["requests",{"_index":954,"title":{},"body":{"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1463,"title":{},"body":{"todo.html":{}}}],["res",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["res.sendfile(clientpath",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.status(403).json('403",{"_index":567,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('expired",{"_index":558,"title":{},"body":{"classes/Authorization.html":{}}}],["res.status(403).json('invalid",{"_index":559,"title":{},"body":{"classes/Authorization.html":{}}}],["reset",{"_index":487,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":1178,"title":{},"body":{"components/TimerComponent.html":{}}}],["resides",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["respective",{"_index":922,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":312,"title":{},"body":{"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["responsetype",{"_index":366,"title":{},"body":{"injectables/AdminService.html":{}}}],["rest",{"_index":1324,"title":{},"body":{"index.html":{}}}],["restart",{"_index":1169,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{}}}],["restarts",{"_index":1481,"title":{},"body":{"todo.html":{}}}],["result",{"_index":284,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0",{"_index":1140,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[0].push(this.questionservice.checkanswer(i",{"_index":960,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1",{"_index":1138,"title":{},"body":{"injectables/TeamService.html":{}}}],["result[1].push(i",{"_index":961,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[name",{"_index":462,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["results",{"_index":286,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":963,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":964,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["resume",{"_index":1084,"title":{},"body":{"components/SignupComponent.html":{}}}],["retrieval",{"_index":427,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrieves",{"_index":453,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{}}}],["retrieving",{"_index":417,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["retrying",{"_index":1520,"title":{},"body":{"todo.html":{}}}],["return",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["reverse",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{}}}],["rice",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":1385,"title":{},"body":{"index.html":{}}}],["river",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roman",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":357,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":270,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["rossini",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roughly",{"_index":607,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":995,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":591,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routermodule",{"_index":510,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":522,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":511,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["routing",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routing.module",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":509,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":226,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["row[2",{"_index":852,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[3",{"_index":840,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[8].charcodeat(0",{"_index":841,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["row[index",{"_index":854,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["rows",{"_index":228,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{}}}],["rows.length",{"_index":828,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["royal",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1301,"title":{},"body":{"index.html":{}}}],["running",{"_index":1308,"title":{},"body":{"index.html":{}}}],["runs",{"_index":629,"title":{},"body":{"components/GameComponent.html":{}}}],["russia",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":345,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":347,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":742,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari",{"_index":1510,"title":{},"body":{"todo.html":{}}}],["safari/chrome",{"_index":255,"title":{},"body":{"components/AdminComponent.html":{}}}],["safety",{"_index":562,"title":{},"body":{"classes/Authorization.html":{}}}],["samarium",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sanitizer",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":688,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["save(team",{"_index":1124,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":739,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":729,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":933,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1327,"title":{},"body":{"index.html":{}}}],["school",{"_index":754,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":1019,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolnamecontrol",{"_index":1033,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.disable",{"_index":1048,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.setvalue(team.schoolname",{"_index":1037,"title":{},"body":{"components/SignupComponent.html":{}}}],["schoolnamecontrol.value",{"_index":1044,"title":{},"body":{"components/SignupComponent.html":{}}}],["schools",{"_index":1096,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":657,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":1059,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1368,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1373,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1439,"title":{},"body":{"todo.html":{}}}],["second",{"_index":663,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["seconds",{"_index":589,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":581,"title":{},"body":{"components/GameComponent.html":{}}}],["secret",{"_index":551,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secs",{"_index":744,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1536,"title":{},"body":{"todo.html":{}}}],["see",{"_index":1011,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seems",{"_index":1521,"title":{},"body":{"todo.html":{}}}],["seen",{"_index":1528,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":863,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["sending",{"_index":1412,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":310,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1314,"title":{},"body":{"index.html":{},"todo.html":{}}}],["sequentially",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":596,"title":{},"body":{"components/GameComponent.html":{},"index.html":{}}}],["server",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"injectables/TeamService.html":{},"dependencies.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["services/admin.service",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{}}}],["services/question.service",{"_index":675,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":676,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":1027,"title":{},"body":{"components/SignupComponent.html":{}}}],["set",{"_index":158,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["setanswers(given",{"_index":900,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setdburl",{"_index":1243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setinterval",{"_index":1170,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":1181,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpracticequestions(given",{"_index":893,"title":{},"body":{"classes/QuestionStore.html":{}}}],["setquestions(given",{"_index":896,"title":{},"body":{"classes/QuestionStore.html":{}}}],["sets",{"_index":339,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["settimeout",{"_index":644,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken(giventoken",{"_index":337,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["seville",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha3",{"_index":348,"title":{},"body":{"injectables/AdminService.html":{}}}],["sha3(password).tostring",{"_index":365,"title":{},"body":{"injectables/AdminService.html":{}}}],["sha3(process.env.admin_password",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/question",{"_index":412,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{}}}],["shiloh",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shiny",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shouldn't",{"_index":1491,"title":{},"body":{"todo.html":{}}}],["show",{"_index":82,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shuffle",{"_index":797,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffle(array",{"_index":807,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shuffles",{"_index":810,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["shutting",{"_index":1556,"title":{},"body":{"todo.html":{}}}],["side",{"_index":1456,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":998,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["signing",{"_index":990,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":517,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":279,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":1001,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":1002,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":278,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signupform",{"_index":1004,"title":{},"body":{"components/SignupComponent.html":{}}}],["simple",{"_index":1071,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":927,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":1077,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":783,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":249,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["sizing",{"_index":253,"title":{},"body":{"components/AdminComponent.html":{}}}],["skipemptylines",{"_index":818,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["sleep",{"_index":191,"title":{},"body":{"components/AdminComponent.html":{}}}],["sleeps",{"_index":1555,"title":{},"body":{"todo.html":{}}}],["slice(1",{"_index":823,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["slow",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sluggish",{"_index":1509,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1464,"title":{},"body":{"todo.html":{}}}],["solutions",{"_index":1576,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1492,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1428,"title":{},"body":{"todo.html":{}}}],["sometimes",{"_index":1565,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":1085,"title":{},"body":{"components/SignupComponent.html":{}}}],["sort",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["sort((a",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{}}}],["sorts",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["spain\\u2019s",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../admin",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.ts",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../async",{"_index":1284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":1285,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../practicequestions.ts",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.ts",{"_index":1286,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../uri.ts",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":508,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":468,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":760,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":902,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":915,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":916,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":917,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":914,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":919,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:39",{"_index":913,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:45",{"_index":921,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:66",{"_index":928,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:78",{"_index":931,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":1159,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":1171,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":1187,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":1190,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":1186,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":1188,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":1174,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":1177,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":1179,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":1183,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":1184,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":1185,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":1192,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":1173,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/models/team.ts",{"_index":1089,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":1094,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:21",{"_index":1105,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:22",{"_index":1106,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":1108,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":1107,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":1104,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":1103,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":1102,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:14",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:16",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:18",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:23",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:25",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:31",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:38",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:49",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:73",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":723,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":571,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:114",{"_index":621,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:141",{"_index":623,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:151",{"_index":628,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:165",{"_index":641,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:174",{"_index":639,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":668,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":648,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":643,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":650,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":651,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":653,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":654,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":660,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":664,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":662,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":594,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":595,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":599,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":600,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":612,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:96",{"_index":614,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":997,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:17",{"_index":1022,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":1018,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:24",{"_index":1024,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:26",{"_index":1025,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:28",{"_index":1009,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:37",{"_index":1010,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:53",{"_index":1013,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:58",{"_index":1015,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:68",{"_index":1016,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":987,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:10",{"_index":991,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/register.guard.ts:17",{"_index":993,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":289,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:19",{"_index":301,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:25",{"_index":334,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:28",{"_index":336,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:37",{"_index":338,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":324,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:48",{"_index":328,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:55",{"_index":315,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:63",{"_index":332,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:73",{"_index":303,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:81",{"_index":307,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:99",{"_index":319,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":855,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:16",{"_index":859,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:24",{"_index":865,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:37",{"_index":862,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":1109,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:13",{"_index":1114,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:19",{"_index":1128,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":1127,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:23",{"_index":1126,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:26",{"_index":1129,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:35",{"_index":1130,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:45",{"_index":1120,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:54",{"_index":1122,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:60",{"_index":1125,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:71",{"_index":1116,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:84",{"_index":1118,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":1151,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:12",{"_index":1153,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/app/services/time.service.ts:18",{"_index":1154,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/admin",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/api.ts",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/authorization.ts",{"_index":524,"title":{},"body":{"classes/Authorization.html":{},"coverage.html":{}}}],["src/server/authorization.ts:34",{"_index":533,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:45",{"_index":544,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/authorization.ts:8",{"_index":541,"title":{},"body":{"classes/Authorization.html":{}}}],["src/server/constants.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/practicequestions.ts",{"_index":1239,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/server/question",{"_index":405,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["src/server/server.ts",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/server/user",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/question.ts",{"_index":781,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/shared/question.ts:13",{"_index":792,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:14",{"_index":791,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:15",{"_index":790,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/question.ts:2",{"_index":785,"title":{},"body":{"classes/Question.html":{}}}],["src/shared/uri.ts",{"_index":1246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":175,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":630,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starting",{"_index":168,"title":{},"body":{"components/AdminComponent.html":{}}}],["starts",{"_index":613,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["state('correct",{"_index":947,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":949,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["static",{"_index":526,"title":{},"body":{"classes/Authorization.html":{},"components/GameComponent.html":{},"classes/QuestionPreparer.html":{}}}],["statistics",{"_index":1426,"title":{},"body":{"todo.html":{}}}],["stats",{"_index":1447,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["still",{"_index":1494,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":203,"title":{},"body":{"components/AdminComponent.html":{},"components/TimerComponent.html":{}}}],["stops",{"_index":1180,"title":{},"body":{"components/TimerComponent.html":{}}}],["store",{"_index":447,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"classes/Team.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["store.ts",{"_index":406,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"coverage.html":{}}}],["store.ts:19",{"_index":886,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:21",{"_index":885,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:23",{"_index":887,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:25",{"_index":888,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:28",{"_index":892,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:33",{"_index":894,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:38",{"_index":895,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:43",{"_index":897,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:48",{"_index":899,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:53",{"_index":901,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:58",{"_index":890,"title":{},"body":{"classes/QuestionStore.html":{}}}],["store.ts:66",{"_index":889,"title":{},"body":{"classes/QuestionStore.html":{}}}],["stored",{"_index":419,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"index.html":{}}}],["storing",{"_index":416,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["string",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["stuff",{"_index":762,"title":{},"body":{"modules/MaterialModule.html":{}}}],["style",{"_index":941,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":1017,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":1083,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":1005,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":975,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1361,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":1023,"title":{},"body":{"components/SignupComponent.html":{}}}],["such",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sugarcane",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":1386,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1517,"title":{},"body":{"todo.html":{}}}],["sure",{"_index":211,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"todo.html":{}}}],["surprising",{"_index":399,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1387,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":384,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1371,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1451,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1357,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1315,"title":{},"body":{"index.html":{}}}],["table",{"_index":1252,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1251,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":634,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":1062,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["tap",{"_index":1132,"title":{},"body":{"injectables/TeamService.html":{}}}],["tap(result",{"_index":1137,"title":{},"body":{"injectables/TeamService.html":{}}}],["target",{"_index":1495,"title":{},"body":{"todo.html":{}}}],["team",{"_index":84,"title":{"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["team._id",{"_index":1145,"title":{},"body":{"injectables/TeamService.html":{}}}],["team.points",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{},"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":755,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname},${team.teamnumber},${team.points",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["team.service",{"_index":869,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":756,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":1051,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamexists",{"_index":1006,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":1021,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["teamnumbercontrol",{"_index":1035,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.disable",{"_index":1049,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.setvalue(team.teamnumber",{"_index":1038,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumbercontrol.value",{"_index":1045,"title":{},"body":{"components/SignupComponent.html":{}}}],["teams",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":593,"title":{"injectables/TeamService.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":23,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":1162,"title":{},"body":{"components/TimerComponent.html":{}}}],["teosinte",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["term",{"_index":1400,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1338,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":1401,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1337,"title":{},"body":{"index.html":{},"todo.html":{}}}],["text",{"_index":367,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["text/csv",{"_index":151,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["text/plain",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textarea",{"_index":245,"title":{},"body":{"components/AdminComponent.html":{}}}],["thermos",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thing",{"_index":177,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["things",{"_index":1433,"title":{},"body":{"todo.html":{}}}],["think",{"_index":1194,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":1067,"title":{},"body":{"components/SignupComponent.html":{}}}],["this._answers",{"_index":443,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._practicequestions",{"_index":436,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._questions",{"_index":440,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this._token",{"_index":360,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this.adminservice",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.checktoken().subscribe",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.getteams().subscribe(teams",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.loggedin",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.login(this.loginform.value.password).subscribe",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.token",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(file.files[0]).subscribe",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":976,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":978,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.breakend",{"_index":705,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":696,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":1199,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":1207,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":686,"title":{},"body":{"components/GameComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":957,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.file",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.finishanimation",{"_index":970,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":712,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.force",{"_index":451,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.gameover",{"_index":707,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":382,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfromdatabase(name",{"_index":452,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getquestions",{"_index":710,"title":{},"body":{"components/GameComponent.html":{}}}],["this.getter('answers",{"_index":441,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('practicequestions",{"_index":434,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.getter('questions",{"_index":438,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["this.http.get(uri.admin.check_token",{"_index":383,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":1158,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get",{"_index":876,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get",{"_index":879,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.team.get",{"_index":1149,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.get(uri.team.get_all",{"_index":373,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.admin.login",{"_index":364,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":1135,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":882,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":881,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":1148,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":1142,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":380,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.httpoptionswithauth",{"_index":873,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.httpoptionswithauth).pipe",{"_index":877,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.index",{"_index":691,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":716,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":1201,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":1200,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":678,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":689,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":1147,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":1143,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.processrow(rows[index",{"_index":832,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.put(team",{"_index":1146,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":706,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":685,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":687,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answerindex",{"_index":974,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":684,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":1030,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":1204,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":1039,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":683,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":996,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.sanitizer.bypasssecuritytrusturl(url",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.saving",{"_index":747,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":715,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":714,"title":{},"body":{"components/GameComponent.html":{}}}],["this.shuffle(indices",{"_index":830,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["this.signupform.get('schoolname",{"_index":1034,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.signupform.get('teamnumber",{"_index":1036,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.start",{"_index":1205,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":1208,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":972,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":977,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":958,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":965,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":1203,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":1047,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":682,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.team._id",{"_index":1043,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":690,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":677,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":1040,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":1041,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":679,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":709,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.teamexists",{"_index":1052,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver().subscribe(team",{"_index":1032,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":1046,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.practice",{"_index":875,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":693,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.team",{"_index":681,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.token",{"_index":872,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{}}}],["this.timer",{"_index":720,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":704,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":721,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":697,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":719,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":708,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":713,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":1029,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":363,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["this['_",{"_index":450,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["thoroughly",{"_index":1429,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1501,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1366,"title":{},"body":{"index.html":{}}}],["tiber",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":1091,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":281,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":1163,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":1164,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":280,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1466,"title":{},"body":{"todo.html":{}}}],["times",{"_index":189,"title":{},"body":{"components/AdminComponent.html":{}}}],["timeservice",{"_index":1008,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":1092,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":120,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["token(giventoken",{"_index":361,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["token]{@link",{"_index":358,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["tokenexpirederror",{"_index":545,"title":{},"body":{"classes/Authorization.html":{}}}],["tokens",{"_index":322,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["tonsorial",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["took",{"_index":1363,"title":{},"body":{"index.html":{}}}],["total",{"_index":609,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1395,"title":{},"body":{"todo.html":{}}}],["transfer",{"_index":1446,"title":{},"body":{"todo.html":{}}}],["transforms",{"_index":800,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["transition",{"_index":942,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["transpile",{"_index":1500,"title":{},"body":{"todo.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tries",{"_index":924,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":943,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":946,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":376,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":457,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["ts",{"_index":850,"title":{},"body":{"classes/QuestionPreparer.html":{},"index.html":{}}}],["tslib",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["tuple",{"_index":801,"title":{},"body":{"classes/QuestionPreparer.html":{}}}],["turn",{"_index":1290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["turns",{"_index":1562,"title":{},"body":{"todo.html":{}}}],["tweaks",{"_index":1392,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":611,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":1081,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["type",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/Question.html":{},"classes/QuestionPreparer.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tz(start",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u201cthe",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":718,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":1063,"title":{},"body":{"components/SignupComponent.html":{}}}],["undoes",{"_index":703,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":1079,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1336,"title":{},"body":{"index.html":{},"todo.html":{}}}],["united",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unix",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":1570,"title":{},"body":{"todo.html":{}}}],["until",{"_index":1076,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":619,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":1123,"title":{},"body":{"injectables/TeamService.html":{}}}],["upload",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":396,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":206,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":298,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":331,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":333,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":353,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uri.questions.save",{"_index":379,"title":{},"body":{"injectables/AdminService.html":{}}}],["uris",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"miscellaneous/variables.html":{}}}],["usage#exponential",{"_index":1472,"title":{},"body":{"todo.html":{}}}],["use",{"_index":180,"title":{},"body":{"components/AdminComponent.html":{},"classes/QuestionPreparer.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1425,"title":{},"body":{"todo.html":{}}}],["user",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":655,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["user(req",{"_index":543,"title":{},"body":{"classes/Authorization.html":{}}}],["username",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userroutes",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":529,"title":{},"body":{"classes/Authorization.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":1370,"title":{},"body":{"index.html":{}}}],["using",{"_index":197,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usually",{"_index":1519,"title":{},"body":{"todo.html":{}}}],["valid",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{}}}],["validators",{"_index":1028,"title":{},"body":{"components/SignupComponent.html":{}}}],["validators.required",{"_index":1020,"title":{},"body":{"components/SignupComponent.html":{}}}],["value",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":454,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{}}}],["vapor",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":264,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":446,"title":{},"body":{"interfaces/Answer.html":{},"components/GameComponent.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1577,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":616,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["vatican",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":546,"title":{},"body":{"classes/Authorization.html":{}}}],["verifyerrors",{"_index":548,"title":{},"body":{"classes/Authorization.html":{}}}],["version",{"_index":430,"title":{},"body":{"interfaces/Answer.html":{},"interfaces/PracticeQuestion.html":{},"classes/QuestionStore.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["via",{"_index":208,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["victorian",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":1569,"title":{},"body":{"todo.html":{}}}],["viewchild",{"_index":671,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild(timercomponent",{"_index":667,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{}}}],["virginia\\u2026",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtual",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtualquiz",{"_index":471,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"classes/Authorization.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/QuestionPreparer.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1414,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":195,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["wasn't",{"_index":1484,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1376,"title":{},"body":{"index.html":{}}}],["water",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1210,"title":{},"body":{"components/TimerComponent.html":{}}}],["ways",{"_index":1432,"title":{},"body":{"todo.html":{}}}],["web",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web=0",{"_index":202,"title":{},"body":{"components/AdminComponent.html":{}}}],["web=1",{"_index":201,"title":{},"body":{"components/AdminComponent.html":{}}}],["webkit",{"_index":251,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1504,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":1369,"title":{},"body":{"index.html":{}}}],["west",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whatnot",{"_index":1516,"title":{},"body":{"todo.html":{}}}],["wheat",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":179,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interfaces/Answer.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"interfaces/PracticeQuestion.html":{},"injectables/QuestionService.html":{},"classes/QuestionStore.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{}}}],["whipping",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whittier",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":242,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":1209,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":1206,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.url.createobjecturl(blob",{"_index":153,"title":{},"body":{"components/AdminComponent.html":{}}}],["window.url.revokeobjecturl(url",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{}}}],["winner",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wipes",{"_index":748,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":1069,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":561,"title":{},"body":{"classes/Authorization.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["wonky",{"_index":1514,"title":{},"body":{"todo.html":{}}}],["wont",{"_index":1497,"title":{},"body":{"todo.html":{}}}],["work",{"_index":1303,"title":{},"body":{"index.html":{},"todo.html":{}}}],["worked",{"_index":560,"title":{},"body":{"classes/Authorization.html":{}}}],["works",{"_index":1452,"title":{},"body":{"todo.html":{}}}],["workshop",{"_index":1575,"title":{},"body":{"todo.html":{}}}],["world",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["worse",{"_index":1195,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1434,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":637,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":1098,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["yukon",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yyyy",{"_index":1799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone.js",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consoleOutput\n                            \n                            \n                                file\n                            \n                            \n                                loginForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                getTeams\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/admin/admin.component.ts:25\n                            \n                        \n\n                \n                    \n                            Admin component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload(file: HTMLInputElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:73\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            HTMLInputElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams(link: HTMLAnchorElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:49\n                \n            \n\n\n            \n                \n                    Gets the teams from the server, sorts them by points, and outputs in a nice csv format \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                            HTMLAnchorElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:31\n                \n            \n\n\n            \n                \n                    Checks if token is valid on page init \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:38\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:16\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:14\n                            \n                        \n\n                \n                    \n                        The link to the team CSV file \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    password: new FormControl('')\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:18\n                            \n                        \n\n                \n                    \n                        The login form containing the password \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:23\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n  /** The link to the team CSV file */\n  file;\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class with an add() method\n  /** The login form containing the password */\n  loginForm = new FormGroup({\n    password: new FormControl('')\n  });\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** Admin component constructor */\n  constructor(private adminService: AdminService, private sanitizer: DomSanitizer) { }\n\n  /** Checks if token is valid on page init */\n  ngOnInit() {\n    if (this.adminService.loggedIn()) {\n      this.adminService.checkToken().subscribe();\n    }\n  }\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.loginForm.value.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.token = token;\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Gets the teams from the server, sorts them by points, and outputs in a nice csv format */\n  getTeams(link: HTMLAnchorElement) {\n    this.adminService.getTeams().subscribe(teams => {\n      if (!teams) {\n        return;\n      }\n      const data = teams\n        .filter(team => team.points) // remove teams with no points\n        .sort((a, b) => a.points - b.points) // sort teams according to points in ascending order\n        .map(team => `${team.schoolName},${team.teamNumber},${team.points}`) // map to strings\n        .concat(['School,Team Number,Points']) // add header\n        .reverse() // change to descending order\n        .join('\\n');\n      const blob = new Blob([data], {type: 'text/csv'});\n      const url = window.URL.createObjectURL(blob);\n      this.file = this.sanitizer.bypassSecurityTrustUrl(url);\n      // in case it doesn't get set in time (which it often doesn't)\n      link.href = url;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    });\n\n  }\n\n  /** Upload the questions to the server */\n  fileUpload(file: HTMLInputElement): void {\n    this.adminService.uploadQuestions(file.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Information\n      \n    \n    \n      \n        \n          Starting the server\n        \n      \n      \n        Once you have installed the heroku CLI\n        here, then you are ready\n        to start the server.\n      \n        The next thing to check is whether or not the heroku server is set to use a hobby dyno or\n        a free dyno. This can be checked at the main heroku page for the project\n        here. It should be set to a hobby dyno for the period\n        of the competition, and a free dyno at all other times. This is because a free dyno will automatically sleep\n        after 30 minutes, which we don't want.\n      \n      \n        Finally, log in to heroku using 'heroku login' on the command line and then type 'heroku ps:scale web=1' to\n        start the server, or 'heroku ps:scale web=0' to stop it.\n      \n    \n    \n      \n        \n          Potential issues with uploading questions\n        \n      \n      \n        The most important thing about the format of the csv file you upload to be the new questions via the admin\n        interface, is to make sure the format of the columns is correct. The columns should be in the following order:\n        Date and time, Category, Question, answer A, B, C, D, E, Correct answer (as a letter A-E). There may be more\n        columns, but they will not be used. Also it's important that the csv file contain a header row, that is, a row\n        before the rows containing data.\n      \n      \n        Another potential issue could be that the lines containing a quote character(\") have not been properly escaped\n        by the csv exporter (should look like \"\")\n      \n    \n  \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n     Get teams as CSV \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Information                                      Starting the server                            Once you have installed the heroku CLI        here, then you are ready        to start the server.              The next thing to check is whether or not the heroku server is set to use a hobby dyno or        a free dyno. This can be checked at the main heroku page for the project        here. It should be set to a hobby dyno for the period        of the competition, and a free dyno at all other times. This is because a free dyno will automatically sleep        after 30 minutes, which we don\\'t want.                    Finally, log in to heroku using \\'heroku login\\' on the command line and then type \\'heroku ps:scale web=1\\' to        start the server, or \\'heroku ps:scale web=0\\' to stop it.                                      Potential issues with uploading questions                            The most important thing about the format of the csv file you upload to be the new questions via the admin        interface, is to make sure the format of the columns is correct. The columns should be in the following order:        Date and time, Category, Question, answer A, B, C, D, E, Correct answer (as a letter A-E). There may be more        columns, but they will not be used. Also it\\'s important that the csv file contain a header row, that is, a row        before the rows containing data.                    Another potential issue could be that the lines containing a quote character(\") have not been properly escaped        by the csv exporter (should look like \"\")                        Upload the csv file containing the questions                        Choose File                                       Get teams as CSV               {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkToken\n                            \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getTeams\n                            \n                            \n                                    Private\n                                handleErrorAdmin\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/admin.service.ts:19\n                            \n                        \n\n                \n                    \n                            Admin service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \ncheckToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:73\n                \n            \n\n\n            \n                \n                    Checks that the current admin token is valid \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:81\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeams\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeams()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:55\n                \n            \n\n\n            \n                \n                    Gets all of the teams from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorAdmin(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:99\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:48\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:63\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:25\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:28\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/admin.service.ts:37\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient, HttpErrorResponse,\n  HttpEvent,\n  HttpEventType, HttpHeaders,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SHA3 } from 'crypto-js';\n\nimport { handleError, httpOptionsText, URI } from '../constants';\nimport { Team } from '../models/team';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** Admin service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The token for the admin user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('adminToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.token !== '';\n  }\n\n  /** Logs the user in using the provided password */\n  login(password: string): Observable {\n    return this.http.post(URI.ADMIN.LOGIN, SHA3(password).toString(), {... httpOptionsText, responseType: 'text' as 'json'}).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Gets all of the teams from the server */\n  getTeams(): Observable {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.TEAM.GET_ALL, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const httpOptions = { reportProgress: true, headers: new HttpHeaders({ authorization: this.token })  };\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, httpOptions);\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Checks that the current admin token is valid */\n  checkToken() {\n    const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n    return this.http.get(URI.ADMIN.CHECK_TOKEN, httpOptions).pipe(\n      catchError(this.handleErrorAdmin)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorAdmin(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('adminToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Answer.html":{"url":"interfaces/Answer.html","title":"interface - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe an Answer object \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.error(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    AppRoutingModule,\n    ReactiveFormsModule\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Authorization.html":{"url":"classes/Authorization.html","title":"class - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/authorization.ts\n        \n\n            \n                Description\n            \n            \n                Contains static methods relating to authenticating users \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                admin\n                            \n                            \n                                    Private\n                                    Static\n                                checkToken\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            admin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:34\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate admins before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the token given is valid. Used by other middleware in order to get decoded information from the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            user\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    user(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/server/authorization.ts:45\n                \n            \n\n\n            \n                \n                    A middleware function used to authenticate users before they are allowed to access endpoints in this file \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TokenExpiredError, verify as jwtVerify, VerifyErrors } from 'jsonwebtoken';\nimport { NextFunction, Request, Response } from 'express';\nimport { secret } from './constants';\n\n/** Contains static methods relating to authenticating users */\nexport class Authorization {\n  /** Checks that the token given is valid. Used by other middleware in order to get decoded information from the token */\n  private static checkToken(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization as string;\n    if (token) {\n      jwtVerify(token, secret, (err: VerifyErrors, decoded: any) => { // adding type would break decoded.type\n        if (err) {\n          if (err instanceof TokenExpiredError) {\n            return res.status(403).json('Expired token');\n          } else {\n            return res.status(403).json('Invalid token');\n          }\n        } else {\n          // todo not sure why this worked without the safety check before\n          if (decoded.team) {\n            req.headers.authorization = [decoded.type, decoded.team.schoolName, decoded.team.teamNumber];\n          } else {\n            req.headers.authorization = [decoded.type, null, null];\n          }\n          next();\n        }\n      });\n    } else {\n      res.status(403).json('403 Forbidden');\n    }\n  }\n\n  /** A middleware function used to authenticate admins before they are allowed to access endpoints in this file */\n  public static admin(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n\n  /** A middleware function used to authenticate users before they are allowed to access endpoints in this file */\n  public static user(req: Request, res: Response, next: NextFunction) {\n    Authorization.checkToken(req, res, () => {\n      if (req.headers.authorization[0] === 'user' || req.headers.authorization[0] === 'admin') {\n        next();\n      } else {\n        res.status(403).json('403 Forbidden');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, questionService: QuestionService, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                            Game component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:96\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:114\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:141\n                \n            \n\n\n            \n                \n                    Called when the current break ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:151\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:174\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:165\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** Game component constructor */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.team = this.team;\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.team;\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current break ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() {\n    if (this.timer) {\n      return this.timer.milliseconds / 1000;\n    } else {\n      return 0;\n    }\n  }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                            Game over component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** Game over component constructor */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.team;\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.team = undefined;\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PracticeQuestion.html":{"url":"interfaces/PracticeQuestion.html","title":"interface - PracticeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PracticeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                An interface to describe a PracticeQuestion object \n\n            \n\n            \n                Extends\n            \n            \n                        Question\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        correctAnswer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctAnswer\n                                    \n                                \n                                \n                                    \n                                        correctAnswer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer for the particular question \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.error(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/shared/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/shared/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionPreparer.html":{"url":"classes/QuestionPreparer.html","title":"class - QuestionPreparer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionPreparer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-preparer.ts\n        \n\n            \n                Description\n            \n            \n                A class that contains methods to prepare questions for use by the app \n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                prepare\n                            \n                            \n                                    Private\n                                    Static\n                                processRow\n                            \n                            \n                                    Private\n                                    Static\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            prepare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    prepare(csv: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:13\n                \n            \n\n\n            \n                \n                    The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    csv\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            processRow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processRow(row: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:43\n                \n            \n\n\n            \n                \n                    A helper method that processes the given row into a question, answer tuple. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(array: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-preparer.ts:35\n                \n            \n\n\n            \n                \n                    A helper method that randomly shuffles the given array \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse as papaparse } from 'papaparse';\nimport { Question } from '../shared/question';\n\n\n/** A class that contains methods to prepare questions for use by the app */\nexport class QuestionPreparer {\n  /** The main method that transforms the given csv into a tuple of questions and answers in the form of javascript objects */\n  static prepare(csv: string): [Question[], any[]] {\n    // todo check errors from papa\n    const parsed = papaparse(csv, {skipEmptyLines: true});\n    const errors = parsed.errors;\n    if (errors.length) {\n      console.error(errors);\n    }\n    const rows = parsed.data\n      .slice(1); // remove header\n    const indices = Array.from(Array(rows.length).keys()); // creates list of rows.length numbers 0 to rows.length\n    this.shuffle(indices);\n    const questions = Array();\n    const answers = Array();\n    indices.forEach(index => {\n      const [question, answer] = this.processRow(rows[index]);\n      questions.push(question);\n      answers.push(answer);\n    });\n    return [questions, answers];\n  }\n\n  /** A helper method that randomly shuffles the given array */\n  private static shuffle(array: any[]) {\n    for ( let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  /** A helper method that processes the given row into a question, answer tuple. */\n  private static processRow(row: string[]): [Question, any] {\n    const correctAnswer = row[3 + row[8].charCodeAt(0) - 65]; // assigns the string corresponding to the correct answer\n    const indices = [3, 4, 5, 6, 7];\n    this.shuffle(indices);\n    // create questions as TS object\n    return [ new Question(row[1], row[2], indices.map(index => row[index])),\n      { correctAnswer }];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                httpOptionsWithAuth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, teamService: TeamService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                            Question service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answerIndex: number, questionIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:37\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    questionIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:24\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsWithAuth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/question.service.ts:16\n                            \n                        \n\n                \n                    \n                        Holds headers for JSON objects, along with an authorization token \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, URI } from '../constants';\nimport { Question } from '../../shared/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n  /** Holds headers for JSON objects, along with an authorization token */\n  httpOptionsWithAuth: {};\n  /** Question service constructor */\n  constructor(private http: HttpClient, private teamService: TeamService) {\n    const headers = { 'Content-Type': 'application/json',  authorization: this.teamService.token };\n    this.httpOptionsWithAuth = { headers: new HttpHeaders(headers) };\n  }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.practice) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /** Checks whether the selected answer is the correct one */\n  checkAnswer(answerIndex: number, questionIndex: number): Observable {\n    const body = { answerIndex, questionIndex };\n    if (this.teamService.practice) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, body, this.httpOptionsWithAuth).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionStore.html":{"url":"classes/QuestionStore.html","title":"class - QuestionStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/server/question-store.ts\n        \n\n            \n                Description\n            \n            \n                A class that is in charge of storing and retrieving the questions from the database \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _answers\n                            \n                            \n                                    Private\n                                _practiceQuestions\n                            \n                            \n                                    Private\n                                _questions\n                            \n                            \n                                    Public\n                                force\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFromDatabase\n                            \n                            \n                                    Private\n                                getter\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    practiceQuestions\n                                \n                                \n                                    questions\n                                \n                                \n                                    answers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:21\n                            \n                        \n\n                \n                    \n                        The stored answers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:19\n                            \n                        \n\n                \n                    \n                        The stored practice questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:23\n                            \n                        \n\n                \n                    \n                        The stored questions \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            force\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/server/question-store.ts:25\n                            \n                        \n\n                \n                    \n                        Whether or not to force retrieval from database instead of cached version \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getFromDatabase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFromDatabase(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:66\n                \n            \n\n\n            \n                \n                    A helper method that gets retrieves values from the database \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getter(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/server/question-store.ts:58\n                \n            \n\n\n            \n                \n                    A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        practiceQuestions\n                    \n                \n\n                \n                    \n                        getpracticeQuestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:28\n                                \n                            \n                    \n                        \n                                Get the practice questions \n\n\n                        \n                    \n\n                \n                    \n                        setpracticeQuestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:33\n                                \n                            \n                    \n                        \n                                Set the practice questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        questions\n                    \n                \n\n                \n                    \n                        getquestions()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:38\n                                \n                            \n                    \n                        \n                                Get the questions \n\n\n                        \n                    \n\n                \n                    \n                        setquestions(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:43\n                                \n                            \n                    \n                        \n                                Set the questions \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        answers\n                    \n                \n\n                \n                    \n                        getanswers()\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:48\n                                \n                            \n                    \n                        \n                                Get the answers \n\n\n                        \n                    \n\n                \n                    \n                        setanswers(given)\n                    \n                \n                            \n                                \n                                    Defined in src/server/question-store.ts:53\n                                \n                            \n                    \n                        \n                                Set the answers \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { database } from './server';\nimport { Question } from '../shared/question';\n\n/** An interface to describe an Answer object */\ninterface Answer {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** An interface to describe a PracticeQuestion object */\ninterface PracticeQuestion extends Question {\n  /** The correct answer for the particular question */\n  correctAnswer: string;\n}\n\n/** A class that is in charge of storing and retrieving the questions from the database */\nexport class QuestionStore {\n  /** The stored practice questions */\n  private _practiceQuestions: Promise;\n  /** The stored answers */\n  private _answers: Promise;\n  /** The stored questions */\n  private _questions: Promise;\n  /** Whether or not to force retrieval from database instead of cached version */\n  public force = false;\n\n  /** Get the practice questions */\n  public get practiceQuestions() {\n    return this.getter('practiceQuestions') as Promise;\n  }\n\n  /** Set the practice questions */\n  public set practiceQuestions(given: Promise) {\n    this._practiceQuestions = given;\n  }\n\n  /** Get the questions */\n  public get questions() {\n    return this.getter('questions') as Promise;\n  }\n\n  /** Set the questions */\n  public set questions(given: Promise) {\n    this._questions = given;\n  }\n\n  /** Get the answers */\n  public get answers() {\n    return this.getter('answers') as Promise;\n  }\n\n  /** Set the answers */\n  public set answers(given: Promise) {\n    this._answers = given;\n  }\n\n  /** A helper method that returns the value in the given instance variable store, and sets it if it doesn't exist */\n  private getter(name: string): Promise {\n    if (!this['_' + name] || this.force) {\n      this['_' + name] = this.getFromDatabase(name);\n    }\n    return this['_' + name];\n  }\n\n  /** A helper method that gets retrieves values from the database */\n  private async getFromDatabase(name: string): Promise {\n    try {\n      const collection = database.collection(name);\n      const result = await collection.findOne({});\n      return result[name];\n    } catch (err) {\n      console.error(`An error occurred while getting ${name}: ${err.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(questionService: QuestionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                            Questions component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        questionService\n                                                  \n                                                        \n                                                                        QuestionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentQuestion\n                    \n                \n                \n                    \n                        Type :         Question\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        The current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:45\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:66\n                \n            \n\n\n            \n                \n                    Called when there is a change in finished or currentQuestion \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:78\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:39\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../../shared/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** The current question */\n  @Input() currentQuestion: Question;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** Questions component constructor */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(i, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in [finished]{@link #finished} or [currentQuestion]{@link #currentQuestion} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    } else if (changes.currentQuestion) {\n      this.state = new Array(this.currentQuestion.answers.length).fill('inactive');\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answerIndex, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(teamService: TeamService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register.guard.ts:10\n                            \n                        \n\n                \n                    \n                            Register guard constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** Register guard constructor */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.team === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                signupForm\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, teamService: TeamService, timeService: TimeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                            Signup component constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        teamService\n                                                  \n                                                        \n                                                                        TeamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeService\n                                                  \n                                                        \n                                                                        TimeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:37\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:53\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:58\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:68\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            signupForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  })\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                        The signup form that contains the school name and team number \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:28\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:24\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:26\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** The signup form that contains the school name and team number */\n  signupForm = new FormGroup({\n    schoolName: new FormControl('', Validators.required),\n    teamNumber: new FormControl('', Validators.required)\n  });\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** Signup component constructor */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n    if (this.teamService.token !== '') {\n      this.teamService.getTeamFromServer().subscribe(team => {\n        if (team) {\n          const schoolNameControl = this.signupForm.get('schoolName');\n          const teamNumberControl = this.signupForm.get('teamNumber');\n          schoolNameControl.setValue(team.schoolName);\n          teamNumberControl.setValue(team.teamNumber);\n          this.team = team;\n        }\n      });\n    }\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.practice = true;\n    this.teamService.team = this.team;\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    const schoolNameControl = this.signupForm.get('schoolName');\n    const teamNumberControl = this.signupForm.get('teamNumber');\n    this.team.schoolName = schoolNameControl.value;\n    this.team.teamNumber = teamNumberControl.value;\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (!team) {\n          this.submitted = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.team = newTeam;\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n          this.teamExists = true;\n        } else {\n          this.submitted = true;\n          this.teamExists = true;\n          schoolNameControl.disable();\n          teamNumberControl.disable();\n          this.team = team;\n          this.teamService.team = this.team;\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        Submit\n      \n      \n        -->\n        That team has already registered. Resume game?\n        -->\n        -->\n        That team has already registered and finished the game.\n        -->\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                  Submit                    -->        That team has already registered. Resume game?        -->        -->        That team has already registered and finished the game.        -->                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:21\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:22\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _token\n                            \n                            \n                                    Public\n                                practice\n                            \n                            \n                                    Public\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTeamFromServer\n                            \n                            \n                                    Private\n                                handleErrorUser\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/team.service.ts:13\n                            \n                        \n\n                \n                    \n                            Team service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team?: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:71\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleErrorUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleErrorUser(error: HttpErrorResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:84\n                \n            \n\n\n            \n                \n                    Handles expired tokens \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                HttpErrorResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:45\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:54\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:60\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:23\n                            \n                        \n\n                \n                    \n                        The token for the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:26\n                                \n                            \n                    \n                        \n                                Gets the value of the token \n\n\n                        \n                    \n\n                \n                    \n                        settoken(givenToken: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/team.service.ts:35\n                                \n                            \n                    \n                        \n                                Sets the value of the token \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            givenToken\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** Team service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  public team: Team;\n  /** Whether or not this is a practice game */\n  public practice: boolean;\n  /** The token for the user */\n  private _token = '';\n\n  /** Gets the value of the [token]{@link #_token} */\n  get token() {\n    const token = localStorage.getItem('userToken');\n    if (token) {\n      this._token = token;\n    }\n    return this._token;\n  }\n\n  /** Sets the value of the [token]{@link #_token} */\n  set token(givenToken: string) {\n    localStorage.setItem('userToken', givenToken);\n    this._token = givenToken;\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      tap(result => this.token = result[1]),\n      map(result => result[0]),\n      catchError(this.handleErrorUser)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(this.handleErrorUser)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team?: Team): Observable {\n    if (team) {\n      return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n        catchError(this.handleErrorUser)\n      );\n    } else {\n      const httpOptions = { headers: new HttpHeaders({ authorization: this.token }) };\n      return this.http.get(URI.TEAM.GET, httpOptions).pipe(\n        catchError(this.handleErrorUser)\n      );\n    }\n  }\n  /** Handles expired tokens */\n  private handleErrorUser(error: HttpErrorResponse) {\n    if (error.error === 'Expired token') {\n      localStorage.removeItem('userToken');\n      this._token = '';\n      location.reload();\n    }\n    return handleError(error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/time.service.ts:12\n                            \n                        \n\n                \n                    \n                            Time service constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** Time service constructor */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsText\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/admin-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/api.ts\n            \n            variable\n            startDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/authorization.ts\n            \n            class\n            Authorization\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            adminPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            clientPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            dbUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            secret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/constants.ts\n            \n            variable\n            start\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/practiceQuestions.ts\n            \n            variable\n            practiceQuestions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/question-preparer.ts\n            \n            class\n            QuestionPreparer\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            class\n            QuestionStore\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            Answer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/question-store.ts\n            \n            interface\n            PracticeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            function\n            setDbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            app\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            database\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            dbURL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/server.ts\n            \n            variable\n            questionStore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server/user-api.ts\n            \n            variable\n            router\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/shared/uri.ts\n            \n            variable\n            URI\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            crypto-js : ^3.1.9-1\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            mongodb-memory-server : ^5.1.5\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                        \n                            setDbURL   (src/.../server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors after a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/server/server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            setDbURL\n                        \n                        \n                    \n                \n            \n            \n                \nsetDbURL()\n                \n            \n\n\n\n\n            \n                \n                    Sets dbURL based on whether we are using the production database or a local development version \n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nAll that is needed to run or work on this project is an installed version of node and npm. Everything else can be \nobtained by running npm install in the directory of this project.\nDevelopment server\nRun npm start for a frontend dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nBackend information\nThe backend of this project is built primarily using nodejs, along with express for REST,\nand mongodb for the database.\nFrontend information\nThe frontend of this project is built primarily using the Angular framework.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile them when they are changed and watch the js file and re-run it when it is changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However, that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  todo add unit tests.\n  todo add integration tests.\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO There are a lot of new ways to do things that might be worth looking in to\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails? - could start up in memory database, use that and periodically check if database is up,\n  and if it's up, transfer the teams and stats data.\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config?\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo maybe make question parser a little more answer-number-agnostic\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\ntodo It is still set to target es6 (since it wont work otherwise), it may be a good idea to transpile it, though it also\n  might not be necessary since it is the backend\ntodo can you move mongodb-memory-server to dev-dependencies? If not, how can you make it so you can?\nInfo about backend-apps with webpack:\nhttps://jlongster.com/Backend-Apps-with-Webpack--Part-I\nPriority for finishing:\ntodo app (animations in particular) is sluggish on safari compared to chrome\n  animations on edge are wonky - flashy and whatnot\n  Make sure to state that chrome is most supported browser - if any issues move to chrome. However, other browsers will usually work.\n    -- might be worth retrying, safari seems fine now.\ntodo finish stats module\ntodo not every team has a non null time ended - why? -- see if you can replicate\nTODO add more info to admin interface: perhaps info about how to access mongodb\ntodo look into only sending one question at a time, and only allowing each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n\nCan you use route guards to help secure api?\ntodo use some less gross colors for animations - maybe a gradient or something, or something that gives it depth. something\nthat doesn't hurt my eyes would be a good start.\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\nmay expire)\ntodo what happens when user token expires? Why does it need to expire? if it is mainly just used to fill in login infoit is also used to authorize though, and a non expiring token is dangeroustodo could probably use free dynos now since it just sleeps instead of shutting down. It takes it a little longer to start up\nbut other than that there seems to be no major difference. May want to check the other benefits of hobby dynos first.\ntodo turns out console.log lies sometimes when printing objects - it will provide a live view unless you use\n  console.log(JSON.parse(JSON.stringify(obj)));\n  and it turns out this was behind the mystery of the download failed no file issue in the admin interface - it is true\n  that link has not properly been set by the time that link.click() is called. workshop solutions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adminPassword   (src/.../constants.ts)\n                        \n                        \n                            app   (src/.../server.ts)\n                        \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            clientPath   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            database   (src/.../server.ts)\n                        \n                        \n                            dbPassword   (src/.../constants.ts)\n                        \n                        \n                            dbURL   (src/.../server.ts)\n                        \n                        \n                            dbUser   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            httpOptionsText   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            practiceQuestions   (src/.../practiceQuestions.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                        \n                            questionStore   (src/.../server.ts)\n                        \n                        \n                            router   (src/.../api.ts)\n                        \n                        \n                            router   (src/.../admin-api.ts)\n                        \n                        \n                            router   (src/.../user-api.ts)\n                        \n                        \n                            secret   (src/.../constants.ts)\n                        \n                        \n                            start   (src/.../constants.ts)\n                        \n                        \n                            startDate   (src/.../api.ts)\n                        \n                        \n                            URI   (src/.../uri.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adminPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SHA3(process.env.ADMIN_PASSWORD || 'password').toString()\n                        \n                    \n\n                \n                    \n                        The password used to access the admin interface \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : join(__dirname, '/../virtual-quiz')\n                        \n                    \n\n                \n                    \n                        The absolute path to the client \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_PASSWORD\n                        \n                    \n\n                \n                    \n                        Database password \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.MONGODB_USER\n                        \n                    \n\n                \n                    \n                        Database username \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.SECRET || 'test secret'\n                        \n                    \n\n                \n                    \n                        The secret used to sign all the javascript web tokens \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.START_DATE || '12/31/1969 7pm' || '12/12/2020 8pm'\n                        \n                    \n\n                \n                    \n                        The start of the competition. Pulls from environment variable or compares against the start of unix time (in CST and\nmostly for fun)\n\n                    \n                \n\n            \n        \n\n    src/server/server.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Application\n\n                        \n                    \n                    \n                        \n                            Default value : express()\n  .use( bodyParserJSON( { limit: '10mb' } ),\n        bodyParserText( { type: ['text/csv', 'text/plain'], limit: '10mb'}) )\n  .use( express.static(clientPath) ) // Allows the client access to any files located in /../dist without having to explicitly declare so.\n  .use( apiRoutes )\n  // all routes after this comment are protected by token\n  .use( userRoutes )\n  .use( adminRoutes )\n  // Redirects all other paths that dont begin with /api to the base index html file. Angular handles the routing from there.\n  // Must be the last thing - express handles this sequentially.\n  .all(/^(?!.*\\/api.*).*$/, (req, res) => {\n    res.sendFile(clientPath + '/index.html');\n  })\n                        \n                    \n\n                \n                    \n                        The Express server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            database\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Db\n\n                        \n                    \n\n                \n                    \n                        A reference to the Mongo database \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n\n                \n                    \n                        Database URL \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionStore\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new QuestionStore()\n                        \n                    \n\n                \n                    \n                        A reference to the question store \n\n                    \n                \n\n            \n        \n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009000'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsText\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'text/plain' })\n}\n                        \n                    \n\n                \n                    \n                        Default text headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#D00000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n    src/server/practiceQuestions.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            practiceQuestions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    question: 'By area, which country is the considered the second largest in the world, to Russia?',\n    category: 'Geography',\n    answers: [\n      'Azerbaijan',\n      'Canada',\n      'United States',\n      'Russia',\n      'China'\n    ],\n    correctAnswer: 'Canada'\n  },\n  {\n    question: 'The characteristic color of a shiny coffee thermos is designed to prevent heat loss by which of the following processes?',\n    category: 'Heat Exchange',\n    answers: [\n      'Convection',\n      'Radiation',\n      'Slow Diffusion',\n      'Conduction',\n      'Circulation'\n    ],\n    correctAnswer: 'Radiation'\n  },\n  {\n    question: 'Which native Denakk\\u2019e name for the Alaskan peak Mount McKinley means \\u201cThe High One?\\u201d',\n    category: 'Location, Location',\n    answers: [\n      'Yukon',\n      'Kenai',\n      'Denali',\n      'Kuyokuk',\n      'Whittier'\n    ],\n    correctAnswer: 'Denali'\n  },\n  {\n    question: 'While humans have recently accelerated the greenhouse effect, which mostly non-human created gas ' +\n      'contributes most to this process?',\n    category: 'Got Some Gas',\n    answers: [\n      'Water vapor',\n      'Ozone',\n      'Carbon Dioxide',\n      'Nitrous Oxide',\n      'Chlorofluorocarbons'\n    ],\n    correctAnswer: 'Water vapor'\n  },\n  {\n    question: 'The largest object in our asteroid belt, named after the Roman goddess of agriculture, is the namesake ' +\n      'of which chemical element?',\n    category: 'Astronomy, Chemistry, and Mythology',\n    answers: [\n      'Cerium',\n      'Iridium',\n      'Plutonium',\n      'Samarium',\n      'Palladium'\n    ],\n    correctAnswer: 'Cerium'\n  },\n  {\n    question: 'This modern crop is a domesticated teosinte developed by early Mesoamericans which can be found in foods ' +\n      'such as nshima, chicha, and angu\\u2026',\n    category: 'Monocots',\n    answers: [\n      'Rice',\n      'Sugarcane',\n      'Maize',\n      'Wheat',\n      'Millet'\n    ],\n    correctAnswer: 'Maize'\n  },\n  {\n    question: 'Which city-state, located on the west bank of the Tiber River, is renowned for its basilica and obelisk?',\n    category: 'Autonomy',\n    answers: [\n      'Monaco',\n      'Qatar',\n      'Liechtenstein',\n      'Vatican City',\n      'Kuwait'\n    ],\n    correctAnswer: 'Vatican City'\n  },\n  {\n    question: 'Which opera by Gioachino Rossini features Figaro, a tonsorial artist who resides in one of Spain\\u2019s ' +\n      'largest cities?',\n    category: 'Figaro! Figaro! Figaro!',\n    answers: [\n      'Carmen',\n      'The Marriage of Figaro',\n      'The Magic Flute',\n      'Don Giovanni',\n      'The Barber of Seville'\n    ],\n    correctAnswer: 'The Barber of Seville'\n  },\n  {\n    question: 'The architectural period developed during and named after the reign of an iconic royal figure of the late' +\n      ' 19th century is\\u2026',\n    category: 'Architecture',\n    answers: [\n      'Georgian',\n      'Art deco',\n      'Victorian',\n      'Edwardian',\n      'Federal'\n    ],\n    correctAnswer: 'Victorian'\n  },\n  {\n    question: 'This Newbery Medal winner is a bildungsroman about a boy and an abused dog who form a bond in West Virginia\\u2026',\n    category: 'A Bildungsroman',\n    answers: [\n      'Bud, Not Buddy',\n      'The Giver',\n      'The Whipping Boy',\n      'Shiloh',\n      'Holes'\n    ],\n    correctAnswer: 'Shiloh'\n  }\n]\n                        \n                    \n\n                \n                    \n                        The questions that will form the basis of practiceQuestions, questions, and answers during development. \n\n                    \n                \n\n            \n        \n\n    src/server/api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The api router \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Moment\n\n                        \n                    \n                    \n                        \n                            Default value : tz(start, 'MM-DD-YYYY hhA', 'America/Chicago')\n                        \n                    \n\n                \n                    \n                        The date and time of the start of the competition. Before this time, users can only play with practice questions. \n\n                    \n                \n\n            \n        \n\n    src/server/admin-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The admin-api router \n\n                    \n                \n\n            \n        \n\n    src/server/user-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                    \n                        \n                            Default value : Router()\n                        \n                    \n\n                \n                    \n                        The user-api router \n\n                    \n                \n\n            \n        \n\n    src/shared/uri.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            URI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PRACTICE_QUESTIONS: {\n    GET: '/api/practiceQuestions/get',\n    CHECK: '/api/practice/check',\n  },\n  QUESTIONS: {\n    GET: '/api/questions/get',\n    SAVE: '/api/questions/save',\n    DELETE: '/api/questions/delete'\n  },\n  ANSWER: {\n    CHECK: '/api/answer/check'\n  },\n  TEAM: {\n    GET: '/api/team/get',\n    GET_ALL: '/api/team/get_all',\n    SAVE: '/api/team/save'\n  },\n  DATE: {\n    NOW: '/api/date/now',\n    START: '/api/date/start',\n    CAN_START: '/api/date/can_start'\n  },\n  ADMIN: {\n    LOGIN: '/api/admin/login',\n    CHECK_TOKEN: '/api/admin/check_token'\n  },\n  STATS: {\n    QUESTIONS: '/api/stats/questions'\n  }\n}\n                        \n                    \n\n                \n                    \n                        The URIs for all the various http requests. Used by both the server and the client \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
