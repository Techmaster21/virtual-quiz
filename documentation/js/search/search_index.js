var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AdminComponent.html",[0,0.429,1,0.835]],["body/components/AdminComponent.html",[0,0.586,1,1.252,2,1.43,3,0.342,4,0.298,5,1.863,6,1.086,7,1.086,8,1.086,9,0.436,10,1.992,11,0.436,12,1.952,13,3.511,14,3.393,15,1.752,16,1.086,17,2.445,18,1.821,19,1.58,20,4.138,21,1.58,22,3.511,23,0.388,24,1.177,25,4.138,26,4.828,27,3.58,28,0.968,29,3.511,30,3.751,31,2.495,32,3.511,33,1.133,34,2.414,35,3.751,36,1.678,37,1.58,38,0.734,39,0.039,40,0.748,41,0.734,42,1.715,43,1.133,44,1.686,45,2.414,46,2.193,47,2.118,48,3.511,49,3.511,50,0.836,51,4.138,52,1.992,53,3.511,54,2.898,55,1.58,56,2.414,57,2.495,58,2.898,59,4.828,60,2.495,61,1.14,62,1.086,63,1.086,64,2.414,65,2.839,66,2.898,67,2.414,68,3.511,69,2.414,70,2.414,71,2.898,72,2.193,73,2.045,74,2.898,75,3.511,76,1.297,77,2.495,78,0.748,79,1.508,80,1.992,81,0.388,82,2.301,83,1.992,84,2.414,85,2.414,86,0.342,87,0.317,88,1.508,89,1.508,90,0.665,91,0.734,92,0.734,93,2.414,94,2.414,95,1.752,96,3.416,97,2.414,98,1.752,99,1.508,100,1.715,101,1.992,102,2.414,103,2.898,104,1.752,105,1.508,106,1.342,107,2.414,108,2.414,109,2.495,110,1.992,111,1.992,112,1.086,113,2.414,114,2.414,115,2.898,116,3.511,117,3.511,118,2.898,119,3.511,120,2.898,121,3.511,122,2.898,123,2.414,124,2.414,125,2.898,126,2.414,127,1.508,128,2.414,129,2.414,130,2.193,131,2.414,132,1.715,133,2.414,134,3.511,135,5.038,136,4.138,137,2.414,138,2.414,139,2.414,140,2.414,141,2.414,142,1.992,143,0.891,144,1.58,145,1.086,146,2.045,147,1.086,148,1.086,149,0.734,150,1.086,151,0.665,152,1.086,153,0.665,154,0.602,155,1.086,156,0.734,157,1.086,158,0.665,159,1.086,160,0.734,161,0.983,162,1.086,163,1.086,164,0.015,165,0.022,166,0.015]],["title/injectables/AdminService.html",[82,1.686,167,0.922]],["body/injectables/AdminService.html",[3,0.354,4,0.309,9,0.522,11,0.451,12,2.001,14,2.884,15,1.796,23,0.401,24,1.206,27,3.281,28,0.992,33,1.209,35,3.483,36,1.808,37,1.62,38,1.404,39,0.039,40,0.834,41,1.404,42,2.998,43,1.271,44,1.017,47,1.881,50,0.853,55,1.62,61,1.272,62,1.62,63,2.203,66,2.062,76,2.023,77,2.557,78,0.884,81,0.401,82,2.001,86,0.354,87,0.225,90,0.688,91,0.759,92,1.691,95,2.734,98,1.246,105,1.56,112,1.62,122,2.971,132,1.775,164,0.015,165,0.022,166,0.015,167,1.094,168,1.389,169,2.062,170,2.248,171,3.599,172,3.599,173,4.894,174,3.599,175,3.812,176,4.618,177,3.599,178,3.599,179,3.599,180,3.812,181,2.498,182,3.599,183,3.599,184,2.557,185,2.557,186,3.599,187,3.599,188,2.498,189,2.557,190,2.498,191,1.881,192,3.599,193,1.389,194,3.599,195,2.498,196,3.599,197,2.248,198,3.599,199,1.719,200,3.599,201,2.498,202,2.248,203,3.599,204,3.599,205,2.498,206,3.599,207,2.498,208,3.599,209,2.971,210,2.498,211,2.248,212,2.498,213,2.062,214,1.246,215,1.124,216,1.56,217,2.498,218,1.56,219,1.246,220,1.389,221,1.389,222,1.246,223,1.389,224,1.246,225,1.124,226,3.599,227,3.599,228,3.599,229,1.466,230,1.775,231,1.775,232,2.498,233,2.498,234,2.062,235,2.062,236,2.498,237,1.775,238,2.248,239,2.062,240,0.923,241,2.498,242,2.498,243,2.498,244,2.498,245,2.498,246,2.498,247,2.498,248,2.498,249,2.998,250,2.498,251,2.498,252,4.618,253,2.498,254,2.498,255,2.498,256,2.062,257,3.599,258,2.498,259,2.498,260,2.498,261,3.599,262,2.498,263,2.498,264,2.498]],["title/components/AppComponent.html",[0,0.429,149,0.922]],["body/components/AppComponent.html",[0,0.805,1,1.067,2,1.97,3,0.548,4,0.479,5,1.743,6,1.743,7,1.743,8,1.743,9,0.35,11,0.7,16,1.743,17,2.699,18,2.035,19,2.177,21,2.177,39,0.038,40,0.874,73,2.177,78,0.7,81,0.622,86,0.548,87,0.35,143,1.43,144,2.177,145,1.743,146,2.486,147,1.743,148,1.743,149,1.679,150,1.743,151,1.067,152,1.743,153,1.067,154,0.965,155,1.743,156,1.177,157,1.743,158,1.067,159,1.743,160,1.177,161,1.577,162,1.743,163,1.743,164,0.024,165,0.03,166,0.024,224,2.756,265,3.197,266,5.274,267,4.836,268,3.992]],["title/modules/AppModule.html",[269,1.513,270,1.894]],["body/modules/AppModule.html",[1,1.507,3,0.442,4,0.386,9,0.282,18,1.046,39,0.039,78,1.087,81,0.501,86,0.442,87,0.282,143,1.153,149,1.799,151,1.507,153,1.507,156,1.663,158,1.507,160,1.663,164,0.019,165,0.026,166,0.019,214,1.558,229,1.272,269,1.558,270,3.858,271,1.272,272,1.95,273,3.925,274,3.925,275,3.925,276,1.95,277,2.578,278,2.578,279,2.578,280,2.578,281,2.578,282,3.042,283,3.042,284,3.042,285,3.472,286,1.736,287,1.736,288,3.123,289,2.988,290,4.206,291,3.472,292,1.95,293,2.988,294,4.206,295,4.206,296,4.206,297,3.123,298,3.123,299,2.578,300,3.123,301,2.578,302,2.578,303,1.95,304,2.578,305,4.206,306,2.578,307,3.123,308,2.578,309,3.123,310,2.578,311,3.123,312,3.123,313,3.123,314,3.123]],["title/modules/AppRoutingModule.html",[269,1.513,282,1.686]],["body/modules/AppRoutingModule.html",[0,0.779,1,1.323,3,0.542,4,0.473,9,0.345,14,2.39,39,0.039,78,1.06,81,0.615,86,0.542,87,0.345,112,1.722,151,1.323,153,1.323,154,0.954,158,1.323,164,0.024,165,0.03,166,0.024,271,1.559,276,2.39,282,2.669,289,2.719,293,3.411,299,3.159,301,3.159,302,3.159,303,2.39,304,3.159,310,3.159,315,3.827,316,3.827,317,4.8,318,2.917,319,2.128,320,3.276,321,3.827,322,5.781,323,3.963,324,4.33,325,3.159,326,4.8,327,4.8,328,4.8,329,3.827]],["title/interceptors/AuthInterceptor.html",[284,1.686,330,2.503]],["body/interceptors/AuthInterceptor.html",[3,0.517,4,0.452,9,0.33,11,0.66,23,0.587,28,1.285,33,0.821,38,1.111,39,0.039,40,0.66,41,1.111,43,0.911,50,0.738,76,1.349,78,1.01,81,0.587,82,2.855,83,3.016,86,0.517,87,0.33,88,2.912,90,1.007,91,1.111,92,1.111,95,2.698,164,0.022,165,0.029,166,0.022,167,1.417,180,3.016,199,2.091,213,4.464,214,1.823,215,1.644,225,2.098,239,4.238,284,2.592,331,3.653,332,3.016,333,4.662,334,2.326,335,3.842,336,4.662,337,4.662,338,3.648,339,5.408,340,3.653,341,4.662,342,3.848,343,2.912,344,4.662,345,1.896,346,2.031,347,1.823,348,2.282,349,4.662,350,4.662,351,3.653,352,3.653,353,3.653,354,3.653]],["title/components/GameComponent.html",[0,0.429,151,0.835]],["body/components/GameComponent.html",[0,0.421,1,0.395,2,0.955,3,0.203,4,0.177,5,0.645,6,0.645,7,0.645,8,0.645,9,0.129,11,0.424,12,1.912,16,0.645,17,2.088,18,1.555,19,1.056,21,1.056,23,0.654,24,0.786,28,0.646,33,1.257,36,1.842,38,0.436,39,0.039,40,0.538,41,0.436,43,1.19,44,1.89,46,2.543,47,1.826,50,0.906,52,1.183,54,1.936,55,2.088,61,0.82,62,1.832,63,1.832,72,1.465,73,1.056,76,1.656,78,0.81,79,1.859,80,1.183,81,0.23,86,0.203,87,0.129,89,1.859,90,0.395,91,0.436,92,0.436,99,1.465,103,1.936,104,1.17,143,0.53,144,1.056,145,0.645,146,1.547,147,0.645,148,0.645,149,0.436,150,0.645,151,0.947,152,0.645,153,0.395,154,1.265,155,0.645,156,0.436,157,0.645,158,0.395,159,0.645,160,1.153,161,2.032,162,0.645,163,0.645,164,0.023,165,0.014,166,0.009,185,1.666,191,1.826,202,1.859,222,1.485,229,1.89,286,0.797,308,1.183,319,0.797,325,3.36,338,2.443,343,1.465,345,1.099,346,0.797,347,1.17,348,0.896,355,1.183,356,2.345,357,1.912,358,2.345,359,3.438,360,2.976,361,2.345,362,2.976,363,4.483,364,2.114,365,2.114,366,2.389,367,2.456,368,2.976,369,1.826,370,2.838,371,3.438,372,3.438,373,2.443,374,2.345,375,3.438,376,3.792,377,3.438,378,3.185,379,1.434,380,1.304,381,1.666,382,2.345,383,1.465,384,1.434,385,1.666,386,1.434,387,3.438,388,1.823,389,1.936,390,2.345,391,2.345,392,1.936,393,2.345,394,1.936,395,2.345,396,3.438,397,2.148,398,2.345,399,1.434,400,1.936,401,1.434,402,2.345,403,2.345,404,2.345,405,1.666,406,1.304,407,1.859,408,2.345,409,1.434,410,1.716,411,2.838,412,1.485,413,1.434,414,2.866,415,2.345,416,2.345,417,2.148,418,2.443,419,1.465,420,1.434,421,2.345,422,1.465,423,1.936,424,2.345,425,1.544,426,1.304,427,2.345,428,1.465,429,1.936,430,1.936,431,1.936,432,2.345,433,2.443,434,1.434,435,1.936,436,2.345,437,1.434,438,1.658,439,1.434,440,1.465,441,3.36,442,2.345,443,1.936,444,2.345,445,1.434,446,1.465,447,1.434,448,1.434,449,3.94,450,1.434,451,1.434,452,1.936,453,2.443,454,2.345,455,1.434,456,2.345,457,1.936,458,1.434,459,1.936,460,1.434,461,1.666,462,1.936,463,1.434,464,1.056,465,1.465,466,1.465,467,2.345,468,1.434,469,2.345,470,2.114,471,2.443,472,1.666,473,1.666,474,1.019,475,1.655,476,1.183,477,0.896,478,3.438,479,2.976,480,1.183,481,1.936,482,1.183,483,1.434,484,1.434,485,1.434,486,1.936,487,2.976,488,1.019,489,2.345,490,2.976,491,3.13,492,1.465,493,1.019,494,2.345,495,2.114,496,2.976,497,3.438,498,1.183,499,1.434,500,1.434,501,0.896,502,1.183,503,1.434,504,1.434,505,2.345,506,2.976,507,1.434,508,1.666,509,1.434,510,2.345,511,1.434,512,1.019,513,1.434,514,0.896,515,1.936,516,1.434,517,0.896,518,2.838,519,2.976,520,4.07,521,2.976,522,1.434,523,0.896,524,1.434]],["title/components/GameOverComponent.html",[0,0.429,153,0.835]],["body/components/GameOverComponent.html",[0,0.61,1,0.714,2,1.505,3,0.367,4,0.32,5,1.166,6,1.166,7,1.166,8,1.166,9,0.234,11,0.468,12,2.055,16,1.166,17,2.488,18,1.852,19,1.663,21,1.663,23,0.416,24,1.239,28,1.018,33,1.056,37,1.663,39,0.039,40,0.849,43,0.921,44,1.056,47,1.754,50,0.747,55,1.166,61,0.714,73,1.663,78,0.778,79,2.69,81,0.416,86,0.367,87,0.234,90,0.714,91,0.788,92,0.788,112,2.114,143,0.957,144,1.663,145,1.166,146,2.114,147,1.166,148,1.166,149,0.788,150,1.166,151,0.714,152,1.166,153,1.294,154,1.397,155,1.166,156,0.788,157,1.166,158,0.714,159,1.166,160,0.788,161,1.056,162,1.166,163,1.166,164,0.016,165,0.023,166,0.032,184,2.626,191,1.505,193,2.055,229,1.056,287,1.441,292,2.308,303,3.101,345,1.734,346,1.441,347,1.844,348,1.619,357,2.055,366,2.055,369,2.354,373,3.336,383,2.308,425,1.913,438,1.505,464,1.663,465,2.308,466,2.308,477,1.619,480,2.139,493,1.841,501,2.933,512,2.626,514,1.619,515,2.139,525,4.098,526,2.139,527,3.696,528,3.696,529,4.307,530,3.696,531,5.312,532,5.162,533,2.592,534,3.696,535,2.626,536,3.696,537,3.696,538,2.592,539,3.696,540,2.592,541,3.696,542,2.055,543,2.592,544,5.527,545,4.307,546,4.307,547,4.307,548,3.696,549,3.696,550,2.592,551,2.592,552,2.139,553,2.139,554,2.592,555,2.592,556,2.592,557,2.626,558,3.696,559,3.696,560,3.696,561,3.696,562,3.696,563,3.696]],["title/modules/MaterialModule.html",[269,1.513,283,1.686]],["body/modules/MaterialModule.html",[3,0.563,4,0.491,9,0.359,11,0.718,39,0.039,60,3.493,78,1.089,81,0.639,86,0.563,87,0.359,112,1.79,164,0.024,165,0.03,166,0.024,269,2.453,271,2.334,276,2.484,283,2.734,289,2.825,293,3.493,564,2.825,565,4.405,566,4.058,567,3.976,568,4.058,569,3.976,570,4.058,571,3.976,572,4.058,573,3.976,574,4.058,575,3.976,576,4.058,577,3.976,578,4.058,579,3.976,580,3.282,581,4.058,582,3.976,583,2.825]],["title/classes/Question.html",[87,0.274,388,1.016]],["body/classes/Question.html",[3,0.526,4,0.459,9,0.335,11,0.852,23,0.597,24,1.579,33,1.224,38,1.13,39,0.038,40,0.672,41,1.13,50,1.1,61,1.672,86,0.526,87,0.335,164,0.023,165,0.029,166,0.023,388,2.078,517,3.233,584,2.64,585,3.068,586,3.068,587,3.068,588,4.915,589,3.719,590,4.915,591,3.89,592,3.716,593,3.716,594,4.713,595,5.175,596,5.175,597,5.175,598,4.272,599,3.716,600,3.716,601,3.716]],["title/injectables/QuestionService.html",[167,0.922,475,1.686]],["body/injectables/QuestionService.html",[3,0.465,4,0.406,9,0.297,11,0.786,15,2.172,23,0.934,28,1.199,33,0.979,36,1.607,37,1.959,38,0.999,39,0.039,40,0.594,41,0.999,43,1.085,50,0.664,61,1.345,76,1.214,78,1.023,81,0.528,86,0.465,87,0.44,90,0.906,91,0.999,92,1.579,164,0.02,165,0.027,166,0.02,167,1.323,168,1.828,170,2.719,191,1.773,199,2.201,211,2.719,214,1.64,215,1.479,216,2.053,218,2.053,219,1.64,220,1.828,221,1.828,222,1.64,223,1.828,224,1.64,225,1.479,237,3.092,238,3.244,345,1.802,370,4.287,385,3.092,388,1.811,410,2.869,412,2.172,414,2.42,426,2.42,438,1.987,474,2.335,475,2.42,517,2.719,602,2.713,603,3.092,604,4.352,605,4.352,606,3.287,607,3.092,608,5.194,609,3.287,610,3.287,611,4.352,612,3.287,613,3.287,614,3.287,615,3.287]],["title/components/QuestionsComponent.html",[0,0.429,156,0.922]],["body/components/QuestionsComponent.html",[0,0.63,1,0.548,2,1.237,3,0.281,4,0.246,5,0.894,6,0.894,7,0.894,8,0.894,9,0.179,11,0.359,16,0.894,17,2.321,18,1.728,19,1.367,21,1.367,23,0.753,24,1.018,28,0.837,31,2.158,33,1.203,36,1.524,38,1.121,39,0.039,40,0.804,41,1.121,42,2.933,43,1.029,44,1.681,46,2.578,50,0.947,61,1.225,65,1.897,72,3.047,73,1.367,78,0.847,81,0.319,86,0.281,87,0.179,90,0.548,91,0.604,92,0.604,98,1.516,99,2.778,100,3.574,104,1.516,109,3.159,112,0.894,125,1.64,130,1.241,143,0.734,144,1.367,145,0.894,146,1.858,147,0.894,148,0.894,149,0.604,150,0.894,151,0.548,152,0.894,153,0.548,154,0.495,155,0.894,156,1.255,157,0.894,158,0.548,159,0.894,160,0.604,161,0.81,162,0.894,163,0.894,164,0.025,165,0.019,166,0.012,191,1.681,193,1.689,202,1.897,215,0.894,222,0.992,229,0.81,240,1.122,334,0.992,347,1.516,357,1.689,364,3.159,365,3.159,366,1.689,367,3.671,380,1.105,388,1.907,397,1.897,410,2.77,411,3.407,412,2.219,414,2.712,419,1.241,438,1.811,452,2.507,457,2.507,459,2.507,474,1.412,475,2.05,476,1.64,486,1.64,491,2.507,518,1.64,589,2.778,590,2.507,616,1.64,617,3.686,618,3.686,619,3.686,620,3.037,621,4.128,622,3.037,623,2.507,624,3.037,625,2.507,626,3.686,627,1.987,628,1.987,629,1.987,630,3.037,631,3.686,632,3.686,633,3.87,634,3.043,635,1.987,636,3.037,637,1.987,638,3.037,639,3.037,640,1.689,641,3.037,642,3.037,643,3.037,644,4.128,645,1.987,646,2.507,647,3.686,648,3.037,649,3.686,650,1.987,651,2.507,652,3.037,653,3.037,654,3.037,655,3.037,656,1.987,657,3.037,658,1.987,659,1.897,660,1.987,661,1.897,662,2.158,663,2.158,664,3.043,665,3.686,666,1.987,667,1.64,668,1.987,669,1.987,670,1.987,671,3.037,672,1.987,673,3.037,674,3.037,675,1.64,676,1.987,677,1.987,678,1.987,679,1.412,680,1.987,681,1.987,682,1.987,683,1.987,684,1.987,685,1.987,686,1.64,687,1.987,688,1.987,689,1.987,690,1.987,691,1.987,692,1.987,693,1.987,694,1.987,695,3.037,696,1.987,697,1.987,698,1.987,699,1.987,700,1.987,701,1.987,702,1.987,703,3.037,704,1.987,705,3.037,706,3.037,707,1.987,708,1.987,709,1.64,710,1.987]],["title/guards/RegisterGuard.html",[320,1.894,711,2.154]],["body/guards/RegisterGuard.html",[3,0.545,4,0.476,9,0.347,11,0.696,23,0.618,28,1.328,33,0.866,39,0.039,43,0.96,47,2.245,55,1.733,76,1.422,78,0.95,81,0.618,86,0.545,87,0.347,90,1.061,91,1.17,92,1.465,154,1.374,164,0.024,165,0.03,166,0.024,167,1.465,191,1.963,193,2.679,223,2.141,224,1.921,229,1.568,319,2.141,320,3.01,323,4.779,345,1.942,346,2.141,347,1.921,348,2.404,383,3.01,407,3.01,428,3.01,461,3.423,470,3.737,498,3.977,523,2.404,712,3.178,713,3.178,714,4.818,715,4.818,716,4.818,717,3.849,718,4.818,719,3.977,720,3.849]],["title/components/SignupComponent.html",[0,0.429,158,0.835]],["body/components/SignupComponent.html",[0,0.494,1,0.502,2,1.157,3,0.258,4,0.225,5,0.82,6,0.82,7,0.82,8,0.82,9,0.165,11,0.329,12,1.58,16,0.82,17,2.262,18,1.684,19,1.279,21,1.279,23,0.293,24,0.952,28,0.783,30,3.254,33,1.1,36,1.456,39,0.039,40,0.818,43,0.983,44,1.606,46,2.828,47,1.606,50,0.368,55,2.128,62,1.775,63,1.775,73,1.279,76,1.049,78,0.772,79,2.181,81,0.293,86,0.258,87,0.165,90,0.502,91,0.554,106,2.719,120,2.345,127,1.775,142,3.254,143,0.673,144,1.279,145,0.82,146,1.775,147,0.82,148,0.82,149,0.554,150,0.82,151,0.502,152,0.82,153,0.502,154,1.305,155,0.82,156,0.554,157,0.82,158,1.086,159,0.82,160,0.554,161,0.742,162,0.82,163,0.82,164,0.011,165,0.017,166,0.011,184,2.019,191,1.992,229,1.157,240,1.049,256,2.345,319,1.014,324,4.241,338,2.019,343,1.775,345,1.289,346,1.014,347,1.418,357,1.58,366,2.518,369,2.372,373,2.801,378,3.65,383,1.775,388,0.952,394,2.345,397,1.775,406,2.192,407,1.775,410,1.418,412,1.418,417,1.775,418,2.801,419,2.463,423,2.345,425,1.992,426,1.58,433,3.475,438,1.606,453,2.019,461,2.801,462,3.254,464,1.279,465,1.775,466,1.775,470,2.481,477,1.138,482,2.345,492,2.463,493,1.295,495,2.019,501,2.463,502,2.345,514,1.775,523,1.775,553,2.345,557,3.037,607,2.019,623,3.254,640,2.192,659,2.463,661,1.775,675,3.737,721,1.505,722,3.943,723,2.345,724,2.841,725,4.241,726,3.491,727,2.841,728,3.491,729,4.274,730,3.491,731,3.943,732,1.823,733,2.345,734,2.841,735,1.823,736,3.943,737,1.823,738,1.823,739,2.841,740,3.943,741,1.823,742,2.841,743,1.823,744,2.841,745,1.823,746,1.823,747,3.254,748,2.181,749,1.823,750,1.823,751,1.823,752,1.823,753,2.841,754,1.823,755,1.823,756,1.823,757,1.823,758,1.823,759,1.823,760,1.505,761,1.823,762,3.491,763,2.841,764,1.823,765,1.823,766,4.528,767,2.841,768,2.345,769,3.943,770,1.505,771,3.943,772,2.841,773,2.841,774,2.345,775,2.345,776,2.841,777,2.345,778,2.019,779,2.019,780,3.943,781,2.801,782,2.345,783,2.345,784,3.943,785,3.217,786,2.841,787,2.841,788,2.345,789,2.345,790,3.943,791,2.841,792,1.505,793,2.019,794,2.345,795,2.345,796,3.254,797,2.841,798,4.528,799,2.841,800,2.841,801,2.019,802,2.345,803,2.841,804,2.841,805,2.841,806,2.345,807,2.841,808,1.823,809,1.823]],["title/classes/Team.html",[87,0.274,369,1.235]],["body/classes/Team.html",[3,0.383,4,0.335,9,0.244,11,0.689,23,0.435,24,1.278,33,1.255,38,0.823,39,0.038,40,0.865,41,1.77,50,1.128,61,1.591,72,1.691,86,0.383,87,0.244,95,2.786,154,1.305,164,0.017,165,0.023,166,0.023,249,3.135,335,3.135,364,3.72,365,3.135,366,3.105,369,2.504,388,1.479,425,2.133,438,2.491,440,1.691,446,2.756,464,1.716,517,3.431,557,3.72,584,1.924,588,5.026,591,3.147,661,2.756,785,3.135,802,3.642,810,2.235,811,4.322,812,5.048,813,5.236,814,5.236,815,5.236,816,2.708,817,2.708,818,3.812,819,4.412,820,4.412,821,5.236,822,4.412,823,4.412,824,3.642,825,3.135,826,2.708,827,2.708,828,2.708,829,2.708,830,2.708,831,2.708,832,2.708,833,2.708]],["title/injectables/TeamService.html",[167,0.922,345,1.12]],["body/injectables/TeamService.html",[3,0.32,4,0.279,9,0.204,11,0.408,15,1.669,23,0.363,24,1.121,28,0.922,33,1.239,37,2.446,38,1.496,39,0.039,40,0.889,41,1.496,43,1.374,44,1.362,47,1.362,50,1.057,61,1.213,63,2.215,76,2.06,78,0.889,81,0.363,86,0.32,87,0.359,88,2.089,90,0.622,91,0.687,92,1.652,95,2.541,104,2.197,106,3.065,112,1.017,154,0.834,164,0.014,165,0.021,166,0.014,167,1.017,168,1.256,170,2.089,175,3.634,189,3.496,191,1.362,193,2.832,199,2.175,202,2.75,211,2.089,214,1.127,215,1.017,216,1.411,218,1.411,219,1.127,220,1.256,221,1.256,222,1.127,223,1.256,224,1.127,225,1.017,237,2.829,238,2.487,240,1.626,334,2.456,335,2.376,343,2.089,345,1.235,357,1.86,369,2.533,385,2.376,446,2.089,464,1.505,465,2.089,466,2.089,477,1.411,488,3.128,514,2.089,542,1.86,603,2.376,760,1.865,811,2.761,834,1.865,835,4.402,836,4.402,837,3.344,838,2.761,839,2.761,840,3.344,841,3.344,842,2.259,843,2.259,844,3.344,845,3.344,846,2.259,847,2.259,848,3.344,849,3.344,850,3.344,851,3.344,852,2.259,853,3.344,854,2.259,855,3.344,856,3.344,857,2.259,858,3.344,859,2.259,860,3.344,861,2.259,862,2.259,863,2.259,864,3.344,865,3.344,866,3.982,867,2.259,868,2.259,869,2.259,870,2.259,871,2.259,872,2.259,873,2.259]],["title/injectables/TimeService.html",[167,0.922,748,1.894]],["body/injectables/TimeService.html",[3,0.551,4,0.481,9,0.351,11,0.703,15,2.419,23,0.624,28,1.336,33,0.874,36,1.791,39,0.039,43,0.969,78,1.029,81,0.624,86,0.551,87,0.351,90,1.071,91,1.182,92,1.182,106,2.696,154,1.209,164,0.024,165,0.03,166,0.024,167,1.474,168,2.162,170,3.028,197,3.028,199,2.152,211,3.028,214,1.94,215,1.75,216,2.429,218,2.429,219,1.94,221,2.162,222,1.94,223,2.162,224,1.94,225,1.75,230,3.445,238,2.429,287,2.696,406,2.696,425,1.975,603,3.445,748,3.028,796,4.002,874,3.209,875,5.532,876,3.888,877,4.848,878,4.848,879,3.888]],["title/components/TimerComponent.html",[0,0.429,160,0.922]],["body/components/TimerComponent.html",[0,0.555,1,0.606,2,1.336,3,0.311,4,0.272,5,0.99,6,0.99,7,0.99,8,0.99,9,0.199,11,0.397,16,0.99,17,2.387,18,1.777,19,1.476,21,1.476,23,0.353,24,1.099,28,0.904,31,2.33,33,1.261,38,0.669,39,0.039,40,0.708,41,0.669,43,1.346,44,2.199,50,0.985,61,0.904,62,0.99,63,0.99,65,2.048,73,1.476,76,1.959,78,0.397,81,0.353,86,0.311,87,0.199,92,0.997,98,1.098,104,1.636,130,1.374,143,0.812,144,1.476,145,0.99,146,1.956,147,0.99,148,0.99,149,0.669,150,0.99,151,0.606,152,0.99,153,0.606,154,0.548,155,0.99,156,0.669,157,0.99,158,0.606,159,0.99,160,1.321,161,2.381,162,0.99,163,0.99,164,0.014,165,0.02,166,0.014,230,1.563,231,1.563,240,0.812,286,2.416,378,3.893,380,1.223,389,3.587,400,3.587,406,2.416,414,2.416,422,2.903,425,2.057,429,2.707,438,2.16,441,1.816,443,3.587,449,2.707,481,3.236,508,1.563,523,2.449,535,3.587,552,1.816,586,2.707,607,2.33,625,2.707,634,3.236,640,1.223,661,2.714,679,1.563,779,2.33,789,2.707,880,1.816,881,3.279,882,3.279,883,3.279,884,3.92,885,3.279,886,5.049,887,3.92,888,4.345,889,4.345,890,3.087,891,4.648,892,4.345,893,2.2,894,3.279,895,2.2,896,4.523,897,2.2,898,3.279,899,4.874,900,2.2,901,4.345,902,2.2,903,4.345,904,3.279,905,4.345,906,2.2,907,2.2,908,2.2,909,2.2,910,2.2,911,2.2,912,3.279,913,2.2,914,2.2,915,2.2,916,2.2,917,2.2,918,2.2,919,2.2,920,1.563,921,4.345,922,3.92,923,4.345,924,2.2,925,2.2,926,2.2,927,2.2,928,3.92,929,2.2,930,2.2,931,2.2,932,2.2,933,2.2]],["title/coverage.html",[934,3.403]],["body/coverage.html",[0,0.807,1,0.929,9,0.304,10,2.784,39,0.038,50,0.682,82,1.876,87,0.4,104,2.918,130,3.891,149,1.026,151,0.929,153,0.929,156,1.026,158,0.929,160,1.026,164,0.021,165,0.027,166,0.021,167,1.595,169,2.784,199,1.803,219,1.683,220,1.876,240,1.246,265,2.784,271,1.374,284,1.876,303,2.107,320,2.107,330,2.784,332,2.784,345,1.246,355,2.784,369,1.374,388,1.13,471,2.397,472,2.397,473,2.397,475,1.876,525,2.784,526,2.784,564,2.397,585,2.784,602,2.784,616,2.784,662,2.397,663,2.397,711,2.397,713,2.784,721,2.784,748,2.107,810,2.784,834,2.784,874,2.784,880,2.784,896,4.079,934,2.784,935,2.784,936,3.373,937,3.373,938,6.018,939,3.373,940,3.373,941,4.049,942,4.942,943,4.427,944,3.373,945,3.373,946,3.373,947,4.427,948,3.373,949,3.373,950,2.784,951,3.654,952,2.784,953,3.654,954,3.654,955,2.784,956,2.784,957,3.373,958,3.373]],["title/dependencies.html",[272,2.275,959,2.096]],["body/dependencies.html",[39,0.039,81,0.656,164,0.025,165,0.031,166,0.025,215,1.839,272,2.552,291,4.126,292,3.122,306,3.372,319,2.272,633,4.126,667,3.372,960,6.006,961,4.085,962,4.999,963,4.085,964,4.085,965,4.085,966,4.085,967,4.085,968,3.372,969,4.085,970,4.085,971,3.552,972,4.085,973,4.085,974,4.085,975,4.085,976,4.085,977,4.999,978,4.085,979,4.085,980,4.085,981,4.085,982,4.085,983,4.085,984,4.085,985,4.085,986,4.085,987,4.085,988,4.085,989,4.085,990,4.085,991,4.085,992,4.085]],["title/miscellaneous/functions.html",[993,1.586,994,3.007]],["body/miscellaneous/functions.html",[23,0.677,38,1.666,39,0.036,40,0.99,41,1.666,50,0.852,62,1.899,89,2.635,164,0.026,165,0.031,166,0.026,199,2.373,219,2.544,225,1.899,334,2.105,542,2.346,640,2.346,651,3.482,941,2.997,953,3.482,954,4.522,955,4.208,956,4.208,971,3.622,993,2.635,994,3.482,995,5.098,996,3.482,997,4.219,998,4.208,999,4.208,1000,4.219,1001,5.098,1002,5.098,1003,4.219,1004,4.522,1005,3.482,1006,4.219,1007,4.219,1008,3.482]],["title/index.html",[23,0.408,422,1.586,1009,2.096]],["body/index.html",[0,0.678,4,0.392,9,0.383,18,1.423,36,1.569,37,2.473,39,0.026,40,0.573,57,3.018,100,2.251,101,2.616,105,1.979,110,2.616,164,0.02,165,0.026,166,0.026,197,1.979,235,3.955,240,1.17,268,2.616,286,1.762,287,1.762,380,1.762,381,2.251,405,2.251,406,2.362,412,1.581,417,3.197,426,1.762,440,2.992,542,2.362,589,1.979,646,2.616,792,2.616,793,2.251,794,2.616,801,2.251,825,3.637,890,2.251,920,2.251,971,2.251,1010,4.791,1011,3.169,1012,3.955,1013,4.791,1014,2.616,1015,3.169,1016,3.169,1017,5.965,1018,3.169,1019,2.616,1020,5.612,1021,3.169,1022,3.506,1023,2.616,1024,3.169,1025,3.169,1026,3.169,1027,2.616,1028,3.169,1029,5.337,1030,2.616,1031,2.616,1032,3.169,1033,4.632,1034,3.955,1035,4.535,1036,3.169,1037,5.494,1038,3.169,1039,3.169,1040,3.169,1041,2.616,1042,3.169,1043,3.169,1044,2.616,1045,4.247,1046,3.506,1047,4.225,1048,2.616,1049,4.247,1050,3.506,1051,3.169,1052,3.169,1053,3.169,1054,3.169,1055,3.955,1056,3.169,1057,2.616,1058,2.616,1059,4.247,1060,3.506,1061,3.169,1062,2.251,1063,3.169,1064,2.616,1065,2.616,1066,3.169,1067,4.247,1068,3.169,1069,4.247,1070,2.616,1071,3.169,1072,3.169,1073,3.169,1074,3.169,1075,3.169,1076,3.169,1077,3.169,1078,4.247,1079,4.247,1080,3.169,1081,3.169,1082,3.169,1083,3.169,1084,3.169,1085,4.247,1086,2.616,1087,3.169,1088,3.506,1089,3.169,1090,3.169,1091,3.169,1092,3.169,1093,3.169,1094,3.169,1095,2.616,1096,3.506,1097,3.169]],["title/modules.html",[271,1.679]],["body/modules.html",[39,0.034,127,3.399,164,0.029,165,0.034,166,0.029,270,2.943,271,1.919,282,2.62,283,2.62,292,2.943,1098,4.712,1099,4.712,1100,5.738,1101,5.442]],["title/overview.html",[1102,3.403]],["body/overview.html",[1,1.461,2,1.597,39,0.038,143,1.448,149,1.793,151,1.461,153,1.461,156,1.612,158,1.461,160,1.612,164,0.024,165,0.03,166,0.024,168,2.18,269,1.956,270,3.913,271,1.597,272,2.448,273,3.235,274,3.235,275,3.235,276,2.448,277,3.235,278,3.235,279,3.235,280,3.235,281,3.235,282,2.949,283,2.949,284,2.949,285,4.022,286,2.18,287,2.18,318,2.18,492,2.448,495,2.785,584,2.785,711,2.785,778,2.785,781,2.785,1102,3.235,1103,3.235,1104,3.92]],["title/routes.html",[318,2.292]],["body/routes.html",[39,0.034,164,0.03,165,0.034,166,0.03,318,2.706]],["title/todo.html",[98,1.267,422,1.586,1009,2.096]],["body/todo.html",[0,0.632,9,0.276,14,2.588,15,0.999,18,0.671,27,1.422,36,1.908,37,1.865,39,0.032,40,0.362,43,0.499,47,1.817,57,1.422,58,1.652,60,2.17,61,0.552,65,1.25,71,1.652,74,1.652,77,1.422,88,2.787,89,1.25,90,0.552,95,2.067,96,1.652,98,3.065,105,1.25,106,1.113,109,1.422,111,3.057,115,1.652,118,1.652,127,1.25,132,1.422,154,1.033,161,1.508,164,0.012,165,0.019,166,0.012,185,1.422,189,1.422,197,2.313,199,1.244,221,1.698,225,0.901,231,1.422,234,1.652,240,1.648,249,1.422,318,1.113,334,2.346,342,2.521,369,1.817,380,1.113,381,1.422,388,1.69,392,1.652,397,1.25,405,1.422,407,1.908,410,1.848,414,1.113,417,1.25,419,1.908,425,1.244,426,1.698,428,1.908,435,3.057,438,1.244,440,1.25,446,1.25,453,1.422,464,0.901,488,2.17,492,1.25,508,1.422,542,1.113,580,1.652,583,2.17,587,2.521,589,2.313,598,1.652,640,1.113,659,1.908,664,1.652,679,2.631,686,1.652,712,1.652,719,1.652,723,1.652,725,2.521,733,2.521,747,1.652,768,1.652,770,1.652,774,2.521,775,1.652,777,1.652,778,1.422,782,1.652,783,1.652,785,2.17,788,2.521,793,2.17,795,1.652,801,1.422,806,1.652,824,1.652,825,2.17,890,1.422,920,1.422,935,2.521,959,1.652,968,1.652,998,1.652,999,1.652,1004,3.057,1005,1.652,1008,1.652,1012,3.42,1014,2.521,1022,1.652,1023,3.057,1027,2.521,1030,1.652,1031,2.521,1033,2.521,1034,2.521,1035,2.521,1041,1.652,1046,2.521,1047,3.057,1048,1.652,1050,1.652,1055,2.521,1057,1.652,1058,1.652,1060,2.521,1062,2.631,1064,1.652,1065,1.652,1070,1.652,1086,1.652,1088,1.652,1095,1.652,1096,1.652,1103,1.652,1105,2.002,1106,2.002,1107,2.002,1108,2.002,1109,2.002,1110,2.002,1111,2.002,1112,2.002,1113,2.002,1114,2.002,1115,3.054,1116,3.054,1117,2.002,1118,2.002,1119,1.652,1120,2.002,1121,2.002,1122,2.002,1123,2.002,1124,3.054,1125,2.002,1126,2.002,1127,2.002,1128,2.002,1129,2.002,1130,2.002,1131,2.002,1132,2.002,1133,2.002,1134,2.002,1135,3.054,1136,2.002,1137,3.054,1138,2.002,1139,3.054,1140,3.054,1141,2.002,1142,2.002,1143,2.002,1144,2.002,1145,3.054,1146,2.002,1147,2.002,1148,3.054,1149,3.054,1150,2.002,1151,2.002,1152,4.702,1153,2.002,1154,2.002,1155,2.002,1156,2.002,1157,2.002,1158,2.002,1159,3.054,1160,3.054,1161,2.002,1162,3.054,1163,2.002,1164,2.002,1165,2.002,1166,2.002,1167,2.002,1168,2.002,1169,3.054,1170,3.703,1171,3.054,1172,3.054,1173,2.002,1174,2.002,1175,2.002,1176,3.703,1177,2.002,1178,3.703,1179,2.002,1180,2.002,1181,2.002,1182,2.002,1183,2.002,1184,4.89,1185,2.002,1186,3.054,1187,2.002,1188,2.002,1189,2.002,1190,2.002,1191,2.002,1192,2.002,1193,2.002,1194,2.002,1195,2.002,1196,3.054,1197,3.054,1198,2.002,1199,2.002,1200,4.143,1201,2.002,1202,2.002,1203,2.002,1204,2.002,1205,2.002,1206,2.002,1207,2.002,1208,2.002,1209,2.002,1210,2.002,1211,2.002,1212,2.002,1213,2.002,1214,2.002,1215,2.002,1216,3.703,1217,2.002,1218,2.002,1219,2.002,1220,2.002,1221,2.002,1222,2.002,1223,2.002,1224,2.002,1225,2.002,1226,2.002,1227,2.002,1228,2.002,1229,2.002,1230,2.002,1231,2.002,1232,2.002,1233,2.002,1234,2.002,1235,2.002,1236,3.054,1237,2.002,1238,2.002,1239,2.002,1240,2.002,1241,2.002,1242,3.054,1243,2.002,1244,2.002,1245,2.002,1246,2.002,1247,2.002,1248,2.002,1249,2.002,1250,2.002,1251,2.002,1252,2.002,1253,2.002,1254,2.002,1255,2.002,1256,2.002,1257,2.002,1258,2.002,1259,3.054,1260,2.002,1261,2.002,1262,2.002,1263,2.002,1264,2.002,1265,2.002,1266,2.002,1267,2.002,1268,2.002,1269,2.002,1270,2.002,1271,2.002,1272,2.002,1273,3.054,1274,2.002,1275,2.002,1276,2.002,1277,2.002,1278,2.002,1279,3.054,1280,2.002,1281,3.054,1282,2.002,1283,2.002,1284,2.002,1285,2.002,1286,2.002,1287,2.002,1288,2.002,1289,2.002,1290,2.002,1291,2.002,1292,3.703,1293,3.054,1294,3.703,1295,2.002,1296,2.002,1297,2.002,1298,2.002,1299,2.002,1300,2.002,1301,2.002,1302,2.002,1303,2.002,1304,2.002,1305,2.002,1306,2.002,1307,2.002,1308,3.054,1309,2.002,1310,2.002,1311,2.002,1312,2.002,1313,2.002,1314,2.002,1315,2.002,1316,2.002,1317,2.002]],["title/miscellaneous/variables.html",[993,1.586,1318,3.007]],["body/miscellaneous/variables.html",[23,0.559,39,0.039,50,1.16,55,1.567,61,1.246,62,2.671,63,2.648,99,2.823,164,0.021,165,0.028,166,0.021,209,2.874,220,2.513,229,1.418,240,1.286,271,2.044,334,1.738,388,1.167,410,2.504,412,1.738,418,2.474,425,2.044,428,2.175,430,2.874,431,2.874,433,2.474,464,2.259,471,3.211,472,3.211,473,3.211,501,2.175,512,3.566,535,3.566,564,2.474,565,2.874,566,2.874,568,2.874,570,2.874,572,2.874,574,2.874,576,2.874,578,2.874,581,2.874,583,2.474,659,2.823,662,3.211,663,3.211,709,3.731,779,2.474,781,2.474,838,2.874,839,2.874,941,2.474,950,2.874,951,4.656,952,2.874,993,2.175,996,4.656,1019,2.874,1044,4.143,1062,3.566,1119,2.874,1318,2.874,1319,3.482,1320,3.482,1321,3.482,1322,3.482,1323,3.482,1324,3.482,1325,4.52,1326,3.482,1327,3.482,1328,3.482,1329,3.482,1330,3.482]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":449,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["0.0",{"_index":924,"title":{},"body":{"components/TimerComponent.html":{}}}],["0.5.23",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["009900",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":492,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["1.18.3",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["1.3",{"_index":1317,"title":{},"body":{"todo.html":{}}}],["1.6.6",{"_index":1015,"title":{},"body":{"index.html":{}}}],["1.9.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":395,"title":{},"body":{"components/GameComponent.html":{}}}],["10/10",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":130,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["1000",{"_index":512,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"miscellaneous/variables.html":{}}}],["1000).tofixed(1",{"_index":933,"title":{},"body":{"components/TimerComponent.html":{}}}],["11/11",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["1337",{"_index":756,"title":{},"body":{"components/SignupComponent.html":{}}}],["14px",{"_index":133,"title":{},"body":{"components/AdminComponent.html":{}}}],["15",{"_index":780,"title":{},"body":{"components/SignupComponent.html":{}}}],["2",{"_index":781,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.24.0",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":768,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["22/22",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":495,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"overview.html":{}}}],["3.2.7",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":778,"title":{},"body":{"components/SignupComponent.html":{},"overview.html":{},"todo.html":{}}}],["4.17.0",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":782,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["5.0.0",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1104,"title":{},"body":{"overview.html":{}}}],["6.5.2",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":501,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":1103,"title":{},"body":{"overview.html":{},"todo.html":{}}}],["7.2",{"_index":1315,"title":{},"body":{"todo.html":{}}}],["8",{"_index":142,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["8.0.1",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["_id",{"_index":811,"title":{},"body":{"classes/Team.html":{},"injectables/TeamService.html":{}}}],["accept",{"_index":1175,"title":{},"body":{"todo.html":{}}}],["access",{"_index":77,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{}}}],["accessing",{"_index":714,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["accessors",{"_index":31,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["account",{"_index":1130,"title":{},"body":{"todo.html":{}}}],["actions",{"_index":404,"title":{},"body":{"components/GameComponent.html":{}}}],["activate",{"_index":718,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["actual",{"_index":595,"title":{},"body":{"classes/Question.html":{}}}],["actual_component",{"_index":163,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["actually",{"_index":508,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["add",{"_index":88,"title":{},"body":{"components/AdminComponent.html":{},"interceptors/AuthInterceptor.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["added",{"_index":1239,"title":{},"body":{"todo.html":{}}}],["adding",{"_index":1287,"title":{},"body":{"todo.html":{}}}],["addition",{"_index":1302,"title":{},"body":{"todo.html":{}}}],["adds",{"_index":341,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["admin",{"_index":14,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"todo.html":{}}}],["admin'},{'name",{"_index":148,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["admin.component.css",{"_index":20,"title":{},"body":{"components/AdminComponent.html":{}}}],["admin.component.html",{"_index":22,"title":{},"body":{"components/AdminComponent.html":{}}}],["admincomponent",{"_index":1,"title":{"components/AdminComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["administrators",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminservice",{"_index":82,"title":{"injectables/AdminService.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"coverage.html":{}}}],["afterviewinit",{"_index":359,"title":{},"body":{"components/GameComponent.html":{}}}],["again",{"_index":554,"title":{},"body":{"components/GameOverComponent.html":{}}}],["agnostic",{"_index":1275,"title":{},"body":{"todo.html":{}}}],["allow",{"_index":1173,"title":{},"body":{"todo.html":{}}}],["allowed",{"_index":461,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["already",{"_index":747,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["always",{"_index":1188,"title":{},"body":{"todo.html":{}}}],["amount",{"_index":1062,"title":{},"body":{"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":1012,"title":{},"body":{"index.html":{},"todo.html":{}}}],["angular/animations",{"_index":667,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/text",{"_index":84,"title":{},"body":{"components/AdminComponent.html":{}}}],["angular/common",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"interceptors/AuthInterceptor.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["angular/compiler",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":81,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":306,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":567,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/card",{"_index":569,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/checkbox",{"_index":571,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/expansion",{"_index":573,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/input",{"_index":575,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/list",{"_index":577,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/progress",{"_index":579,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/material/toolbar",{"_index":582,"title":{},"body":{"modules/MaterialModule.html":{}}}],["angular/platform",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":319,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":617,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animate('500ms",{"_index":673,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animated",{"_index":655,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["animations",{"_index":633,"title":{},"body":{"components/QuestionsComponent.html":{},"dependencies.html":{}}}],["another",{"_index":771,"title":{},"body":{"components/SignupComponent.html":{}}}],["answer",{"_index":410,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["answercheck",{"_index":1303,"title":{},"body":{"todo.html":{}}}],["answerclicked",{"_index":626,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answerindex",{"_index":649,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["answers",{"_index":589,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{},"index.html":{},"todo.html":{}}}],["anything",{"_index":794,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["api",{"_index":1186,"title":{},"body":{"todo.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["app.component",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":266,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":267,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":149,"title":{"components/AppComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appears",{"_index":1252,"title":{},"body":{"todo.html":{}}}],["application/json",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":270,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":282,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["around",{"_index":1310,"title":{},"body":{"todo.html":{}}}],["array",{"_index":657,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["array(given.answers.length).fill('inactive",{"_index":678,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["artifacts",{"_index":1038,"title":{},"body":{"index.html":{}}}],["async",{"_index":999,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["asyncdata",{"_index":955,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncdata(data",{"_index":997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asyncerror",{"_index":956,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncerror(errorobject",{"_index":1003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attempts",{"_index":48,"title":{},"body":{"components/AdminComponent.html":{}}}],["authinterceptor",{"_index":284,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"modules/AppModule.html":{},"interceptors/AuthInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["authorization",{"_index":335,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"classes/Team.html":{},"injectables/TeamService.html":{}}}],["authorized",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["authorizes",{"_index":1247,"title":{},"body":{"todo.html":{}}}],["auto",{"_index":58,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["automatic",{"_index":431,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":1027,"title":{},"body":{"index.html":{},"todo.html":{}}}],["autosize",{"_index":25,"title":{},"body":{"components/AdminComponent.html":{}}}],["autowrongguess",{"_index":472,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":127,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"modules.html":{},"todo.html":{}}}],["average",{"_index":1293,"title":{},"body":{"todo.html":{}}}],["averages",{"_index":1309,"title":{},"body":{"todo.html":{}}}],["avoid",{"_index":74,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["away",{"_index":1222,"title":{},"body":{"todo.html":{}}}],["back",{"_index":1177,"title":{},"body":{"todo.html":{}}}],["backend",{"_index":1022,"title":{},"body":{"index.html":{},"todo.html":{}}}],["background",{"_index":708,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backgroundcolor",{"_index":671,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["backlog",{"_index":1145,"title":{},"body":{"todo.html":{}}}],["backoff",{"_index":1259,"title":{},"body":{"todo.html":{}}}],["bandwidth",{"_index":1304,"title":{},"body":{"todo.html":{}}}],["bar",{"_index":580,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{}}}],["based",{"_index":774,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["beautification",{"_index":1107,"title":{},"body":{"todo.html":{}}}],["before",{"_index":428,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["began",{"_index":822,"title":{},"body":{"classes/Team.html":{}}}],["better",{"_index":105,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"index.html":{},"todo.html":{}}}],["between",{"_index":779,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{}}}],["bootstrap",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":136,"title":{},"body":{"components/AdminComponent.html":{}}}],["both",{"_index":1084,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":1190,"title":{},"body":{"todo.html":{}}}],["box",{"_index":135,"title":{},"body":{"components/AdminComponent.html":{}}}],["break",{"_index":418,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["breakend",{"_index":362,"title":{},"body":{"components/GameComponent.html":{}}}],["breaks",{"_index":392,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["breakstarted",{"_index":363,"title":{},"body":{"components/GameComponent.html":{}}}],["breaktime",{"_index":473,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["brought",{"_index":1301,"title":{},"body":{"todo.html":{}}}],["browse",{"_index":1100,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1037,"title":{},"body":{"index.html":{}}}],["built",{"_index":1160,"title":{},"body":{"todo.html":{}}}],["button",{"_index":419,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["button:hover",{"_index":707,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["byte",{"_index":1294,"title":{},"body":{"todo.html":{}}}],["bytes",{"_index":1295,"title":{},"body":{"todo.html":{}}}],["cached",{"_index":1283,"title":{},"body":{"todo.html":{}}}],["call",{"_index":443,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["callback",{"_index":886,"title":{},"body":{"components/TimerComponent.html":{}}}],["called",{"_index":46,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":919,"title":{},"body":{"components/TimerComponent.html":{}}}],["calls",{"_index":389,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["can't",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["canactivate",{"_index":323,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{}}}],["canstart",{"_index":752,"title":{},"body":{"components/SignupComponent.html":{}}}],["case",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{},"classes/Team.html":{},"todo.html":{}}}],["catcherror",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["catcherror(handleerror",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["categories",{"_index":1118,"title":{},"body":{"todo.html":{}}}],["category",{"_index":590,"title":{},"body":{"classes/Question.html":{},"components/QuestionsComponent.html":{}}}],["caveats",{"_index":1164,"title":{},"body":{"todo.html":{}}}],["cdktextareaautosize",{"_index":51,"title":{},"body":{"components/AdminComponent.html":{}}}],["center",{"_index":1266,"title":{},"body":{"todo.html":{}}}],["change",{"_index":646,"title":{},"body":{"components/QuestionsComponent.html":{},"index.html":{}}}],["changed",{"_index":1088,"title":{},"body":{"index.html":{},"todo.html":{}}}],["changes",{"_index":647,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished",{"_index":697,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["changes.finished.currentvalue",{"_index":698,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["charge",{"_index":390,"title":{},"body":{"components/GameComponent.html":{}}}],["check",{"_index":1057,"title":{},"body":{"index.html":{},"todo.html":{}}}],["checkanswer",{"_index":604,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checkanswer(answer",{"_index":605,"title":{},"body":{"injectables/QuestionService.html":{}}}],["checked",{"_index":1291,"title":{},"body":{"todo.html":{}}}],["checkinterval",{"_index":888,"title":{},"body":{"components/TimerComponent.html":{}}}],["checks",{"_index":607,"title":{},"body":{"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["chemistry",{"_index":1144,"title":{},"body":{"todo.html":{}}}],["choices",{"_index":597,"title":{},"body":{"classes/Question.html":{}}}],["choose",{"_index":120,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["class",{"_index":87,"title":{"classes/Question.html":{},"classes/Team.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["classes",{"_index":584,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{},"overview.html":{}}}],["clear",{"_index":121,"title":{},"body":{"components/AdminComponent.html":{}}}],["clearinterval",{"_index":889,"title":{},"body":{"components/TimerComponent.html":{}}}],["clears",{"_index":898,"title":{},"body":{"components/TimerComponent.html":{}}}],["cleartimeout",{"_index":444,"title":{},"body":{"components/GameComponent.html":{}}}],["cleartimeout(this.breakend",{"_index":522,"title":{},"body":{"components/GameComponent.html":{}}}],["cli",{"_index":1013,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":411,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["client",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["clock",{"_index":882,"title":{},"body":{"components/TimerComponent.html":{}}}],["close",{"_index":563,"title":{},"body":{"components/GameOverComponent.html":{}}}],["cluster_appmodule",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1031,"title":{},"body":{"index.html":{},"todo.html":{}}}],["color",{"_index":709,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":639,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["column",{"_index":124,"title":{},"body":{"components/AdminComponent.html":{}}}],["comes",{"_index":1191,"title":{},"body":{"todo.html":{}}}],["command",{"_index":1096,"title":{},"body":{"index.html":{},"todo.html":{}}}],["common",{"_index":1161,"title":{},"body":{"todo.html":{}}}],["compete",{"_index":734,"title":{},"body":{"components/SignupComponent.html":{}}}],["competing",{"_index":802,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{}}}],["competition",{"_index":796,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{}}}],["completed",{"_index":397,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["completely",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{}}}],["completes",{"_index":1000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compodoc",{"_index":1151,"title":{},"body":{"todo.html":{}}}],["component",{"_index":0,"title":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["component_template",{"_index":147,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["components/material/material.module",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["components/questions/questions.component",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["components/timer/timer.component",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{}}}],["compute",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["concern",{"_index":1305,"title":{},"body":{"todo.html":{}}}],["concerned",{"_index":13,"title":{},"body":{"components/AdminComponent.html":{}}}],["config",{"_index":1270,"title":{},"body":{"todo.html":{}}}],["conform",{"_index":1108,"title":{},"body":{"todo.html":{}}}],["confusing",{"_index":685,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["confusion",{"_index":1129,"title":{},"body":{"todo.html":{}}}],["connection",{"_index":1192,"title":{},"body":{"todo.html":{}}}],["consider",{"_index":1286,"title":{},"body":{"todo.html":{}}}],["consist",{"_index":767,"title":{},"body":{"components/SignupComponent.html":{}}}],["console",{"_index":1187,"title":{},"body":{"todo.html":{}}}],["consoleoutput",{"_index":26,"title":{},"body":{"components/AdminComponent.html":{}}}],["const",{"_index":112,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["constants",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["construct",{"_index":818,"title":{},"body":{"classes/Team.html":{}}}],["constructor",{"_index":591,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{}}}],["constructor(private",{"_index":91,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["constructor(question",{"_index":592,"title":{},"body":{"classes/Question.html":{}}}],["constructor(schoolname",{"_index":816,"title":{},"body":{"classes/Team.html":{}}}],["constructors",{"_index":1276,"title":{},"body":{"todo.html":{}}}],["constructs",{"_index":594,"title":{},"body":{"classes/Question.html":{}}}],["containing",{"_index":119,"title":{},"body":{"components/AdminComponent.html":{}}}],["contains",{"_index":357,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["content",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/variables.html":{}}}],["continue",{"_index":1134,"title":{},"body":{"todo.html":{}}}],["continuing",{"_index":500,"title":{},"body":{"components/GameComponent.html":{}}}],["converting",{"_index":1196,"title":{},"body":{"todo.html":{}}}],["converts",{"_index":534,"title":{},"body":{"components/GameOverComponent.html":{}}}],["copy",{"_index":551,"title":{},"body":{"components/GameOverComponent.html":{}}}],["core",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":412,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["correctcolor",{"_index":662,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["counted",{"_index":430,"title":{},"body":{"components/GameComponent.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":1179,"title":{},"body":{"todo.html":{}}}],["coverage",{"_index":934,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":998,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["creating",{"_index":1182,"title":{},"body":{"todo.html":{}}}],["crisis",{"_index":1265,"title":{},"body":{"todo.html":{}}}],["crud",{"_index":1202,"title":{},"body":{"todo.html":{}}}],["csv",{"_index":118,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["culture",{"_index":1143,"title":{},"body":{"todo.html":{}}}],["current",{"_index":414,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["currently",{"_index":446,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["currentquestion",{"_index":364,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["currentquestion.category",{"_index":705,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["currentquestion.question",{"_index":706,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["data",{"_index":542,"title":{},"body":{"components/GameOverComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["database",{"_index":825,"title":{},"body":{"classes/Team.html":{},"index.html":{},"todo.html":{}}}],["date.now",{"_index":481,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["db",{"_index":1193,"title":{},"body":{"todo.html":{}}}],["decides",{"_index":1094,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":52,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["default",{"_index":62,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["deleted",{"_index":1075,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":272,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":1065,"title":{},"body":{"index.html":{},"todo.html":{}}}],["deploy",{"_index":1072,"title":{},"body":{"index.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["dev",{"_index":1021,"title":{},"body":{"index.html":{}}}],["develop",{"_index":1136,"title":{},"body":{"todo.html":{}}}],["development",{"_index":1019,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["difference",{"_index":1292,"title":{},"body":{"todo.html":{}}}],["different",{"_index":1183,"title":{},"body":{"todo.html":{}}}],["directive",{"_index":145,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":162,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1036,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1041,"title":{},"body":{"index.html":{},"todo.html":{}}}],["display",{"_index":459,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["displays",{"_index":881,"title":{},"body":{"components/TimerComponent.html":{}}}],["dist",{"_index":1040,"title":{},"body":{"index.html":{}}}],["dist/server",{"_index":1090,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{}}}],["distribution",{"_index":1139,"title":{},"body":{"todo.html":{}}}],["div",{"_index":123,"title":{},"body":{"components/AdminComponent.html":{}}}],["document",{"_index":1277,"title":{},"body":{"todo.html":{}}}],["documentation",{"_index":935,"title":{},"body":{"coverage.html":{},"todo.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["don't",{"_index":792,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{}}}],["don\\'t",{"_index":809,"title":{},"body":{"components/SignupComponent.html":{}}}],["done",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{},"components/SignupComponent.html":{}}}],["dont",{"_index":1140,"title":{},"body":{"todo.html":{}}}],["dos",{"_index":1226,"title":{},"body":{"todo.html":{}}}],["download",{"_index":1268,"title":{},"body":{"todo.html":{}}}],["download/view",{"_index":1158,"title":{},"body":{"todo.html":{}}}],["drive",{"_index":1147,"title":{},"body":{"todo.html":{}}}],["dubious",{"_index":509,"title":{},"body":{"components/GameComponent.html":{}}}],["dynamic",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1052,"title":{},"body":{"index.html":{}}}],["e50000",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["each",{"_index":659,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["early",{"_index":786,"title":{},"body":{"components/SignupComponent.html":{}}}],["earned",{"_index":823,"title":{},"body":{"classes/Team.html":{}}}],["ease",{"_index":674,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["efficient",{"_index":682,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["element",{"_index":144,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["eliminated",{"_index":1217,"title":{},"body":{"todo.html":{}}}],["emergencies",{"_index":1117,"title":{},"body":{"todo.html":{}}}],["emits",{"_index":651,"title":{},"body":{"components/QuestionsComponent.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":894,"title":{},"body":{"components/TimerComponent.html":{}}}],["empty",{"_index":850,"title":{},"body":{"injectables/TeamService.html":{}}}],["encryption",{"_index":1251,"title":{},"body":{"todo.html":{}}}],["end",{"_index":417,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["endpoint",{"_index":1248,"title":{},"body":{"todo.html":{}}}],["endpoints",{"_index":1269,"title":{},"body":{"todo.html":{}}}],["ends",{"_index":415,"title":{},"body":{"components/GameComponent.html":{}}}],["engine",{"_index":1001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":798,"title":{},"body":{"components/SignupComponent.html":{}}}],["entered",{"_index":68,"title":{},"body":{"components/AdminComponent.html":{}}}],["environment",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ephemeral",{"_index":1068,"title":{},"body":{"index.html":{}}}],["err",{"_index":96,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["error",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["errorobject",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["errors",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["especially",{"_index":1306,"title":{},"body":{"todo.html":{}}}],["essential",{"_index":1113,"title":{},"body":{"todo.html":{}}}],["essentially",{"_index":502,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["etc",{"_index":1165,"title":{},"body":{"todo.html":{}}}],["event",{"_index":42,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{}}}],["event.loaded",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.target",{"_index":113,"title":{},"body":{"components/AdminComponent.html":{}}}],["event.total",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["event.type",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{}}}],["eventemitter",{"_index":634,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["events",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["example",{"_index":800,"title":{},"body":{"components/SignupComponent.html":{}}}],["examples",{"_index":1206,"title":{},"body":{"todo.html":{}}}],["execute",{"_index":1049,"title":{},"body":{"index.html":{}}}],["exhausted",{"_index":642,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["exists",{"_index":343,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["expire",{"_index":1233,"title":{},"body":{"todo.html":{}}}],["exploited",{"_index":1181,"title":{},"body":{"todo.html":{}}}],["exponential",{"_index":1258,"title":{},"body":{"todo.html":{}}}],["export",{"_index":86,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["express",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["facilitate",{"_index":632,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["fails",{"_index":1194,"title":{},"body":{"todo.html":{}}}],["failures",{"_index":1132,"title":{},"body":{"todo.html":{}}}],["falls",{"_index":596,"title":{},"body":{"classes/Question.html":{}}}],["false",{"_index":55,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["faq",{"_index":1231,"title":{},"body":{"todo.html":{}}}],["favor",{"_index":1219,"title":{},"body":{"todo.html":{}}}],["feature",{"_index":1267,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1155,"title":{},"body":{"todo.html":{}}}],["feel",{"_index":806,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["field",{"_index":85,"title":{},"body":{"components/AdminComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["file.name",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{}}}],["file.size",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{}}}],["files",{"_index":1029,"title":{},"body":{"index.html":{}}}],["fileupload",{"_index":29,"title":{},"body":{"components/AdminComponent.html":{}}}],["fileupload($event",{"_index":32,"title":{},"body":{"components/AdminComponent.html":{}}}],["fill",{"_index":126,"title":{},"body":{"components/AdminComponent.html":{}}}],["find",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["finish",{"_index":1195,"title":{},"body":{"todo.html":{}}}],["finishanimation",{"_index":621,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finished",{"_index":365,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["finished]{@link",{"_index":696,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["finishes",{"_index":528,"title":{},"body":{"components/GameOverComponent.html":{}}}],["firefox",{"_index":139,"title":{},"body":{"components/AdminComponent.html":{}}}],["fires",{"_index":636,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["first",{"_index":769,"title":{},"body":{"components/SignupComponent.html":{}}}],["fix",{"_index":1176,"title":{},"body":{"todo.html":{}}}],["fixed",{"_index":1245,"title":{},"body":{"todo.html":{}}}],["fixes",{"_index":1105,"title":{},"body":{"todo.html":{}}}],["flag",{"_index":1043,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1223,"title":{},"body":{"todo.html":{}}}],["folder",{"_index":1091,"title":{},"body":{"index.html":{}}}],["following",{"_index":1157,"title":{},"body":{"todo.html":{}}}],["font",{"_index":131,"title":{},"body":{"components/AdminComponent.html":{}}}],["forkjoin",{"_index":668,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["forkjoin(answers).subscribe(results",{"_index":692,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["form",{"_index":740,"title":{},"body":{"components/SignupComponent.html":{}}}],["formbuilders",{"_index":1253,"title":{},"body":{"todo.html":{}}}],["forms",{"_index":1255,"title":{},"body":{"todo.html":{}}}],["formsmodule",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["free",{"_index":807,"title":{},"body":{"components/SignupComponent.html":{}}}],["full",{"_index":328,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["function",{"_index":896,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":15,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["functions",{"_index":994,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1054,"title":{},"body":{"index.html":{}}}],["gained",{"_index":457,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["gainsboro",{"_index":710,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["game",{"_index":154,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["game'},{'name",{"_index":152,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["game.component.css",{"_index":360,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":361,"title":{},"body":{"components/GameComponent.html":{}}}],["gamecomponent",{"_index":151,"title":{"components/GameComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gameover",{"_index":325,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/GameComponent.html":{}}}],["gameovercomponent",{"_index":153,"title":{"components/GameOverComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gecko",{"_index":140,"title":{},"body":{"components/AdminComponent.html":{}}}],["generate",{"_index":1034,"title":{},"body":{"index.html":{},"todo.html":{}}}],["generated",{"_index":1011,"title":{},"body":{"index.html":{}}}],["getadmin",{"_index":69,"title":{},"body":{"components/AdminComponent.html":{}}}],["getcanstart",{"_index":875,"title":{},"body":{"injectables/TimeService.html":{}}}],["geteventmessage",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{}}}],["geteventmessage(event",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{}}}],["getpractice",{"_index":835,"title":{},"body":{"injectables/TeamService.html":{}}}],["getquestions",{"_index":370,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{}}}],["gets",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["getseconds",{"_index":914,"title":{},"body":{"components/TimerComponent.html":{}}}],["getteam",{"_index":836,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver",{"_index":837,"title":{},"body":{"injectables/TeamService.html":{}}}],["getteamfromserver(team",{"_index":845,"title":{},"body":{"injectables/TeamService.html":{}}}],["getting",{"_index":1009,"title":{"index.html":{},"todo.html":{}},"body":{}}],["gettoken",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TeamService.html":{}}}],["github:angular/web",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["given",{"_index":661,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{}}}],["giventoken",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["go",{"_index":1056,"title":{},"body":{"index.html":{}}}],["good",{"_index":920,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["google",{"_index":1146,"title":{},"body":{"todo.html":{}}}],["graph",{"_index":1101,"title":{},"body":{"modules.html":{}}}],["greater",{"_index":1298,"title":{},"body":{"todo.html":{}}}],["greatest",{"_index":1299,"title":{},"body":{"todo.html":{}}}],["guard",{"_index":711,"title":{"guards/RegisterGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":712,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["guess",{"_index":433,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["guesses",{"_index":772,"title":{},"body":{"components/SignupComponent.html":{}}}],["guide",{"_index":1110,"title":{},"body":{"todo.html":{}}}],["guidelines",{"_index":1111,"title":{},"body":{"todo.html":{}}}],["handle",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{}}}],["handleerror",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":1271,"title":{},"body":{"todo.html":{}}}],["handling",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{},"todo.html":{}}}],["headers",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["height",{"_index":129,"title":{},"body":{"components/AdminComponent.html":{}}}],["help",{"_index":1055,"title":{},"body":{"index.html":{},"todo.html":{}}}],["helper",{"_index":436,"title":{},"body":{"components/GameComponent.html":{}}}],["helpers.ts",{"_index":954,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["helpful",{"_index":1278,"title":{},"body":{"todo.html":{}}}],["here",{"_index":1126,"title":{},"body":{"todo.html":{}}}],["heroku",{"_index":1018,"title":{},"body":{"index.html":{}}}],["heroku's",{"_index":1066,"title":{},"body":{"index.html":{}}}],["holds",{"_index":586,"title":{},"body":{"classes/Question.html":{},"components/TimerComponent.html":{}}}],["hooks",{"_index":681,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["hrs",{"_index":548,"title":{},"body":{"components/GameOverComponent.html":{}}}],["html",{"_index":73,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["http",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["http://localhost:4200",{"_index":1026,"title":{},"body":{"index.html":{}}}],["http_interceptors",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["httpclientmodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{}}}],["httpeventtype",{"_index":212,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.response",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.sent",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["httpeventtype.uploadprogress",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["httphandler",{"_index":339,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpheaders",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpinterceptor",{"_index":344,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpoptionsjson",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httpoptionsjson).pipe",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{}}}],["httprequest",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{}}}],["httprequest('post",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{}}}],["https://angular.io/guide/practical",{"_index":1261,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/router#milestone",{"_index":1264,"title":{},"body":{"todo.html":{}}}],["https://angular.io/guide/user",{"_index":107,"title":{},"body":{"components/AdminComponent.html":{}}}],["https://developer.okta.com/blog/2018/10/30/basic",{"_index":1201,"title":{},"body":{"todo.html":{}}}],["https://expressjs.com/en/4x/api.html#router",{"_index":1244,"title":{},"body":{"todo.html":{}}}],["human",{"_index":536,"title":{},"body":{"components/GameOverComponent.html":{}}}],["i.e",{"_index":382,"title":{},"body":{"components/GameComponent.html":{}}}],["id",{"_index":824,"title":{},"body":{"classes/Team.html":{},"todo.html":{}}}],["identifier",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":465,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["ignore",{"_index":90,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["implements",{"_index":347,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["import",{"_index":78,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":289,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["improve",{"_index":1150,"title":{},"body":{"todo.html":{}}}],["inactive",{"_index":689,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["include",{"_index":583,"title":{},"body":{"modules/MaterialModule.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":1030,"title":{},"body":{"index.html":{},"todo.html":{}}}],["incorrect",{"_index":99,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"miscellaneous/variables.html":{}}}],["incorrectcolor",{"_index":663,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["increase",{"_index":1300,"title":{},"body":{"todo.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indices",{"_index":686,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["inform",{"_index":1228,"title":{},"body":{"todo.html":{}}}],["information",{"_index":466,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["initiate",{"_index":724,"title":{},"body":{"components/SignupComponent.html":{}}}],["initiating",{"_index":391,"title":{},"body":{"components/GameComponent.html":{}}}],["injectable",{"_index":167,"title":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["injectables",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"overview.html":{}}}],["injected",{"_index":1280,"title":{},"body":{"todo.html":{}}}],["input",{"_index":109,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"todo.html":{}}}],["input#get",{"_index":108,"title":{},"body":{"components/AdminComponent.html":{}}}],["inputs",{"_index":624,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["instance",{"_index":1097,"title":{},"body":{"index.html":{}}}],["instead",{"_index":679,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["instructions",{"_index":766,"title":{},"body":{"components/SignupComponent.html":{}}}],["integration",{"_index":1127,"title":{},"body":{"todo.html":{}}}],["intended",{"_index":1016,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":336,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["intercept(req",{"_index":337,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interceptor",{"_index":330,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":331,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interceptors/auth.interceptor",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["intercepts",{"_index":333,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interface",{"_index":1156,"title":{},"body":{"todo.html":{}}}],["internet",{"_index":1131,"title":{},"body":{"todo.html":{}}}],["interval",{"_index":899,"title":{},"body":{"components/TimerComponent.html":{}}}],["intervals",{"_index":912,"title":{},"body":{"components/TimerComponent.html":{}}}],["io",{"_index":1218,"title":{},"body":{"todo.html":{}}}],["isn't",{"_index":770,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["isn\\'t",{"_index":808,"title":{},"body":{"components/SignupComponent.html":{}}}],["issue",{"_index":1178,"title":{},"body":{"todo.html":{}}}],["issues",{"_index":1162,"title":{},"body":{"todo.html":{}}}],["it's",{"_index":429,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["js",{"_index":971,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["js#release_pr208",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["karma",{"_index":1051,"title":{},"body":{"index.html":{}}}],["keep",{"_index":788,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["kilobyte",{"_index":1307,"title":{},"body":{"todo.html":{}}}],["kinda",{"_index":684,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["know",{"_index":1288,"title":{},"body":{"todo.html":{}}}],["knowing",{"_index":1285,"title":{},"body":{"todo.html":{}}}],["last",{"_index":1070,"title":{},"body":{"index.html":{},"todo.html":{}}}],["lasts",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["later",{"_index":442,"title":{},"body":{"components/GameComponent.html":{}}}],["launch",{"_index":1081,"title":{},"body":{"index.html":{}}}],["legend",{"_index":143,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["less",{"_index":683,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["lifecycle",{"_index":680,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["limit",{"_index":423,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["little",{"_index":435,"title":{},"body":{"components/GameComponent.html":{},"todo.html":{}}}],["loaded",{"_index":848,"title":{},"body":{"injectables/TeamService.html":{}}}],["loading",{"_index":1119,"title":{},"body":{"todo.html":{},"miscellaneous/variables.html":{}}}],["loadquestion",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["loads",{"_index":387,"title":{},"body":{"components/GameComponent.html":{}}}],["localstorage",{"_index":1166,"title":{},"body":{"todo.html":{}}}],["log",{"_index":49,"title":{},"body":{"components/AdminComponent.html":{}}}],["logged",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["loggedin",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{}}}],["logging",{"_index":1159,"title":{},"body":{"todo.html":{}}}],["logic",{"_index":358,"title":{},"body":{"components/GameComponent.html":{}}}],["login",{"_index":122,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["login(password",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{}}}],["logs",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{}}}],["long",{"_index":775,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["look",{"_index":1184,"title":{},"body":{"todo.html":{}}}],["looking",{"_index":1171,"title":{},"body":{"todo.html":{}}}],["lose",{"_index":1282,"title":{},"body":{"todo.html":{}}}],["lot",{"_index":1167,"title":{},"body":{"todo.html":{}}}],["main",{"_index":356,"title":{},"body":{"components/GameComponent.html":{}}}],["make",{"_index":1152,"title":{},"body":{"todo.html":{}}}],["many",{"_index":456,"title":{},"body":{"components/GameComponent.html":{}}}],["map",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{}}}],["map(event",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["matbuttonmodule",{"_index":566,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcardmodule",{"_index":568,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodule",{"_index":570,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":165,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":565,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["materialmodule",{"_index":283,"title":{"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"modules.html":{},"overview.html":{}}}],["matexpansionmodule",{"_index":572,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["math.floor(this.questions.length",{"_index":494,"title":{},"body":{"components/GameComponent.html":{}}}],["math.round(100",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["matinputmodule",{"_index":574,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matlistmodule",{"_index":576,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["matprogressbarmodule",{"_index":578,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["mattoolbarmodule",{"_index":581,"title":{},"body":{"modules/MaterialModule.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":424,"title":{},"body":{"components/GameComponent.html":{}}}],["maybe",{"_index":1200,"title":{},"body":{"todo.html":{}}}],["mb",{"_index":1316,"title":{},"body":{"todo.html":{}}}],["meaning",{"_index":1069,"title":{},"body":{"index.html":{}}}],["megabyte",{"_index":1311,"title":{},"body":{"todo.html":{}}}],["menu",{"_index":499,"title":{},"body":{"components/GameComponent.html":{}}}],["message",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["method",{"_index":89,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["middleware",{"_index":1242,"title":{},"body":{"todo.html":{}}}],["million",{"_index":1141,"title":{},"body":{"todo.html":{}}}],["milliseconds",{"_index":535,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["millisecondstimeout",{"_index":887,"title":{},"body":{"components/TimerComponent.html":{}}}],["minify",{"_index":1212,"title":{},"body":{"todo.html":{}}}],["mins",{"_index":547,"title":{},"body":{"components/GameOverComponent.html":{}}}],["minuscule",{"_index":1313,"title":{},"body":{"todo.html":{}}}],["minutes",{"_index":783,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["miscellaneous",{"_index":993,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["models/question",{"_index":474,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{}}}],["models/team",{"_index":477,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["modifying",{"_index":555,"title":{},"body":{"components/GameOverComponent.html":{}}}],["module",{"_index":269,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MaterialModule.html":{},"overview.html":{}}}],["modules",{"_index":271,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["moment",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":380,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["morgan",{"_index":1227,"title":{},"body":{"todo.html":{}}}],["mostly",{"_index":1122,"title":{},"body":{"todo.html":{}}}],["moz",{"_index":138,"title":{},"body":{"components/AdminComponent.html":{}}}],["ms",{"_index":545,"title":{},"body":{"components/GameOverComponent.html":{}}}],["mseconds",{"_index":905,"title":{},"body":{"components/TimerComponent.html":{}}}],["mstotime",{"_index":532,"title":{},"body":{"components/GameOverComponent.html":{}}}],["much",{"_index":1281,"title":{},"body":{"todo.html":{}}}],["multi",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["multiple",{"_index":820,"title":{},"body":{"classes/Team.html":{}}}],["n",{"_index":117,"title":{},"body":{"components/AdminComponent.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["namespaces",{"_index":1243,"title":{},"body":{"todo.html":{}}}],["navigate",{"_index":1025,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":405,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["need",{"_index":793,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["new",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":1205,"title":{},"body":{"todo.html":{}}}],["newteam",{"_index":763,"title":{},"body":{"components/SignupComponent.html":{}}}],["next",{"_index":338,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["next.handle(req",{"_index":354,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["ng",{"_index":1033,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ngafterviewinit",{"_index":372,"title":{},"body":{"components/GameComponent.html":{}}}],["ngmodule",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/MaterialModule.html":{}}}],["ngonchanges",{"_index":622,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngonchanges(changes",{"_index":643,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["ngoninit",{"_index":373,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["nice",{"_index":1120,"title":{},"body":{"todo.html":{}}}],["node",{"_index":1203,"title":{},"body":{"todo.html":{}}}],["nodemon",{"_index":1093,"title":{},"body":{"index.html":{}}}],["non",{"_index":1112,"title":{},"body":{"todo.html":{}}}],["nothing",{"_index":1092,"title":{},"body":{"index.html":{}}}],["now",{"_index":1216,"title":{},"body":{"todo.html":{}}}],["npm",{"_index":1020,"title":{},"body":{"index.html":{}}}],["null",{"_index":761,"title":{},"body":{"components/SignupComponent.html":{}}}],["number",{"_index":438,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["object",{"_index":464,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":653,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["observable",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["occur",{"_index":393,"title":{},"body":{"components/GameComponent.html":{}}}],["occurs",{"_index":1274,"title":{},"body":{"todo.html":{}}}],["of(team",{"_index":870,"title":{},"body":{"injectables/TeamService.html":{}}}],["offline",{"_index":1116,"title":{},"body":{"todo.html":{}}}],["onanswerclicked",{"_index":374,"title":{},"body":{"components/GameComponent.html":{}}}],["onanswerclicked(result",{"_index":408,"title":{},"body":{"components/GameComponent.html":{}}}],["onbreakend",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["once",{"_index":640,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{},"todo.html":{}}}],["onchanges",{"_index":618,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclick",{"_index":623,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["onclick(answer",{"_index":648,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["onclickpractice",{"_index":731,"title":{},"body":{"components/SignupComponent.html":{}}}],["one",{"_index":426,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["ones",{"_index":878,"title":{},"body":{"injectables/TimeService.html":{}}}],["oninit",{"_index":79,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["onstarted",{"_index":376,"title":{},"body":{"components/GameComponent.html":{}}}],["onsubmit",{"_index":30,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{}}}],["opera/ie",{"_index":141,"title":{},"body":{"components/AdminComponent.html":{}}}],["opposed",{"_index":877,"title":{},"body":{"injectables/TimeService.html":{}}}],["optional",{"_index":41,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1241,"title":{},"body":{"todo.html":{}}}],["otherwise",{"_index":849,"title":{},"body":{"injectables/TeamService.html":{}}}],["out",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"components/GameOverComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"overview.html":{}}}],["outages",{"_index":1133,"title":{},"body":{"todo.html":{}}}],["output",{"_index":65,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["outputs",{"_index":625,"title":{},"body":{"components/QuestionsComponent.html":{},"components/TimerComponent.html":{}}}],["over",{"_index":383,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["over'},{'name",{"_index":155,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["over.component",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["over.component.css",{"_index":529,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.html",{"_index":530,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts",{"_index":526,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["over.component.ts:14",{"_index":543,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:16",{"_index":540,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:22",{"_index":533,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over.component.ts:35",{"_index":538,"title":{},"body":{"components/GameOverComponent.html":{}}}],["over/game",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameOverComponent.html":{},"coverage.html":{}}}],["overkill",{"_index":1061,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1102,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":959,"title":{"dependencies.html":{}},"body":{"todo.html":{}}}],["page",{"_index":12,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["pages",{"_index":715,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["pages/admin/admin.component",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/game/game.component",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["pages/signup/signup.component",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["papaparse",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["parallel",{"_index":1083,"title":{},"body":{"index.html":{}}}],["param",{"_index":517,"title":{},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"classes/Team.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":968,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["parsing",{"_index":1163,"title":{},"body":{"todo.html":{}}}],["part",{"_index":631,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["password",{"_index":27,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{}}}],["path",{"_index":322,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["pathmatch",{"_index":327,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["payment",{"_index":791,"title":{},"body":{"components/SignupComponent.html":{}}}],["people",{"_index":1229,"title":{},"body":{"todo.html":{}}}],["per",{"_index":1308,"title":{},"body":{"todo.html":{}}}],["percentdone",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["perform",{"_index":402,"title":{},"body":{"components/GameComponent.html":{}}}],["perhaps",{"_index":1260,"title":{},"body":{"todo.html":{}}}],["persistent",{"_index":1077,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":1221,"title":{},"body":{"todo.html":{}}}],["place",{"_index":1074,"title":{},"body":{"index.html":{}}}],["play",{"_index":725,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["played",{"_index":561,"title":{},"body":{"components/GameOverComponent.html":{}}}],["players",{"_index":527,"title":{},"body":{"components/GameOverComponent.html":{}}}],["playing",{"_index":553,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["please",{"_index":562,"title":{},"body":{"components/GameOverComponent.html":{}}}],["point",{"_index":453,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["points",{"_index":366,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["pointsgained",{"_index":367,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["pop",{"_index":1142,"title":{},"body":{"todo.html":{}}}],["portion",{"_index":469,"title":{},"body":{"components/GameComponent.html":{}}}],["possible",{"_index":110,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["possibly",{"_index":1204,"title":{},"body":{"todo.html":{}}}],["post",{"_index":838,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["post(team",{"_index":851,"title":{},"body":{"injectables/TeamService.html":{}}}],["potential",{"_index":598,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["practice",{"_index":106,"title":{},"body":{"components/AdminComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["practice]{@link",{"_index":865,"title":{},"body":{"injectables/TeamService.html":{}}}],["practices",{"_index":1256,"title":{},"body":{"todo.html":{}}}],["prescribed",{"_index":1138,"title":{},"body":{"todo.html":{}}}],["pressed",{"_index":736,"title":{},"body":{"components/SignupComponent.html":{}}}],["pressing",{"_index":416,"title":{},"body":{"components/GameComponent.html":{}}}],["prevent",{"_index":552,"title":{},"body":{"components/GameOverComponent.html":{},"components/TimerComponent.html":{}}}],["prevents",{"_index":498,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{}}}],["private",{"_index":76,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["probably",{"_index":1064,"title":{},"body":{"index.html":{},"todo.html":{}}}],["problem",{"_index":1235,"title":{},"body":{"todo.html":{}}}],["process",{"_index":541,"title":{},"body":{"components/GameOverComponent.html":{}}}],["prod",{"_index":1042,"title":{},"body":{"index.html":{}}}],["production",{"_index":1044,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["program",{"_index":1063,"title":{},"body":{"index.html":{}}}],["progress",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"todo.html":{}}}],["project",{"_index":1010,"title":{},"body":{"index.html":{}}}],["proper",{"_index":1214,"title":{},"body":{"todo.html":{}}}],["properly",{"_index":654,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["properties",{"_index":24,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["protractor",{"_index":1053,"title":{},"body":{"index.html":{}}}],["provide",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{}}}],["providedin",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providers",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["providing",{"_index":1246,"title":{},"body":{"todo.html":{}}}],["public",{"_index":588,"title":{},"body":{"classes/Question.html":{},"classes/Team.html":{}}}],["purposes",{"_index":1121,"title":{},"body":{"todo.html":{}}}],["put",{"_index":839,"title":{},"body":{"injectables/TeamService.html":{},"miscellaneous/variables.html":{}}}],["put(team",{"_index":853,"title":{},"body":{"injectables/TeamService.html":{}}}],["question",{"_index":388,"title":{"classes/Question.html":{}},"body":{"components/GameComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"coverage.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["question(given",{"_index":676,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questionhelper",{"_index":377,"title":{},"body":{"components/GameComponent.html":{}}}],["questionloaddelay",{"_index":471,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["questions",{"_index":36,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["questions'},{'name",{"_index":157,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["questions.component.css",{"_index":619,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questions.component.html",{"_index":620,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["questionscomponent",{"_index":156,"title":{"components/QuestionsComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["questionservice",{"_index":475,"title":{"injectables/QuestionService.html":{}},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"coverage.html":{}}}],["re",{"_index":1089,"title":{},"body":{"index.html":{}}}],["read",{"_index":1263,"title":{},"body":{"todo.html":{}}}],["readable",{"_index":537,"title":{},"body":{"components/GameOverComponent.html":{}}}],["readme",{"_index":1058,"title":{},"body":{"index.html":{},"todo.html":{}}}],["ready",{"_index":1230,"title":{},"body":{"todo.html":{}}}],["really",{"_index":1060,"title":{},"body":{"index.html":{},"todo.html":{}}}],["reason",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{},"index.html":{}}}],["recognize",{"_index":1240,"title":{},"body":{"todo.html":{}}}],["recompile",{"_index":1087,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":326,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["reduce",{"_index":1273,"title":{},"body":{"todo.html":{}}}],["reexporting",{"_index":1236,"title":{},"body":{"todo.html":{}}}],["reference",{"_index":103,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["refers",{"_index":1123,"title":{},"body":{"todo.html":{}}}],["register",{"_index":742,"title":{},"body":{"components/SignupComponent.html":{}}}],["register.guard",{"_index":321,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["registered",{"_index":790,"title":{},"body":{"components/SignupComponent.html":{}}}],["registerguard",{"_index":320,"title":{"guards/RegisterGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/RegisterGuard.html":{},"coverage.html":{}}}],["registration",{"_index":805,"title":{},"body":{"components/SignupComponent.html":{}}}],["registrationallowed",{"_index":728,"title":{},"body":{"components/SignupComponent.html":{}}}],["related",{"_index":603,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["relevant",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{}}}],["reload",{"_index":1028,"title":{},"body":{"index.html":{}}}],["rely",{"_index":918,"title":{},"body":{"components/TimerComponent.html":{}}}],["remove",{"_index":1059,"title":{},"body":{"index.html":{}}}],["reportprogress",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{}}}],["req",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{}}}],["req.clone",{"_index":349,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["request",{"_index":342,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"todo.html":{}}}],["requests",{"_index":334,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":1249,"title":{},"body":{"todo.html":{}}}],["res",{"_index":115,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["res.json",{"_index":1209,"title":{},"body":{"todo.html":{}}}],["res.send",{"_index":1208,"title":{},"body":{"todo.html":{}}}],["reset",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"components/GameComponent.html":{},"components/TimerComponent.html":{},"index.html":{},"overview.html":{}}}],["resets",{"_index":901,"title":{},"body":{"components/TimerComponent.html":{}}}],["respective",{"_index":638,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["response",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["restart",{"_index":890,"title":{},"body":{"components/TimerComponent.html":{},"index.html":{},"todo.html":{}}}],["restarts",{"_index":1272,"title":{},"body":{"todo.html":{}}}],["result",{"_index":164,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["result[0].push(this.questionservice.checkanswer(answer",{"_index":690,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["result[1].push(i",{"_index":691,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results",{"_index":166,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":693,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["results[i",{"_index":694,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["retrieves",{"_index":385,"title":{},"body":{"components/GameComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{}}}],["return",{"_index":92,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{}}}],["returns",{"_index":43,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["rewrite",{"_index":102,"title":{},"body":{"components/AdminComponent.html":{}}}],["right",{"_index":1095,"title":{},"body":{"index.html":{},"todo.html":{}}}],["root",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{},"components/AppComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["root'},{'name",{"_index":150,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["roughly",{"_index":394,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["route",{"_index":719,"title":{},"body":{"guards/RegisterGuard.html":{},"todo.html":{}}}],["router",{"_index":470,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["routermodule",{"_index":317,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":329,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":318,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"overview.html":{},"routes.html":{},"todo.html":{}}}],["routing.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":316,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":1017,"title":{},"body":{"index.html":{}}}],["running",{"_index":1045,"title":{},"body":{"index.html":{}}}],["runs",{"_index":421,"title":{},"body":{"components/GameComponent.html":{}}}],["rxjs",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{}}}],["s",{"_index":544,"title":{},"body":{"components/GameOverComponent.html":{}}}],["safari/chrome",{"_index":137,"title":{},"body":{"components/AdminComponent.html":{}}}],["save",{"_index":488,"title":{},"body":{"components/GameComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["save(team",{"_index":856,"title":{},"body":{"injectables/TeamService.html":{}}}],["saves",{"_index":539,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saving",{"_index":531,"title":{},"body":{"components/GameOverComponent.html":{}}}],["saying",{"_index":652,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["scaffolding",{"_index":1032,"title":{},"body":{"index.html":{}}}],["school",{"_index":557,"title":{},"body":{"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{}}}],["schoolname",{"_index":812,"title":{},"body":{"classes/Team.html":{}}}],["schools",{"_index":819,"title":{},"body":{"classes/Team.html":{}}}],["score",{"_index":454,"title":{},"body":{"components/GameComponent.html":{}}}],["scored",{"_index":773,"title":{},"body":{"components/SignupComponent.html":{}}}],["script",{"_index":1078,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1082,"title":{},"body":{"index.html":{}}}],["scrolls",{"_index":1189,"title":{},"body":{"todo.html":{}}}],["second",{"_index":462,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["seconds",{"_index":378,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["secondtryallowed",{"_index":368,"title":{},"body":{"components/GameComponent.html":{}}}],["secs",{"_index":546,"title":{},"body":{"components/GameOverComponent.html":{}}}],["secure",{"_index":1185,"title":{},"body":{"todo.html":{}}}],["see",{"_index":733,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["seen",{"_index":1174,"title":{},"body":{"todo.html":{}}}],["selected",{"_index":608,"title":{},"body":{"injectables/QuestionService.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["send",{"_index":1172,"title":{},"body":{"todo.html":{}}}],["sending",{"_index":1135,"title":{},"body":{"todo.html":{}}}],["sent",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["separate",{"_index":1023,"title":{},"body":{"index.html":{},"todo.html":{}}}],["serve",{"_index":381,"title":{},"body":{"components/GameComponent.html":{},"index.html":{},"todo.html":{}}}],["server",{"_index":37,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"index.html":{},"todo.html":{}}}],["service",{"_index":71,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["services",{"_index":1207,"title":{},"body":{"todo.html":{}}}],["services/admin.service",{"_index":83,"title":{},"body":{"components/AdminComponent.html":{},"interceptors/AuthInterceptor.html":{}}}],["services/question.service",{"_index":476,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["services/team.service",{"_index":346,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{}}}],["services/time.service",{"_index":749,"title":{},"body":{"components/SignupComponent.html":{}}}],["session",{"_index":1312,"title":{},"body":{"todo.html":{}}}],["set",{"_index":675,"title":{},"body":{"components/QuestionsComponent.html":{},"components/SignupComponent.html":{}}}],["setheaders",{"_index":350,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["setinterval",{"_index":891,"title":{},"body":{"components/TimerComponent.html":{}}}],["setinterval(callback",{"_index":904,"title":{},"body":{"components/TimerComponent.html":{}}}],["setpractice",{"_index":840,"title":{},"body":{"injectables/TeamService.html":{}}}],["setpractice(practice",{"_index":858,"title":{},"body":{"injectables/TeamService.html":{}}}],["setquestion(given",{"_index":660,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["sets",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{}}}],["setteam",{"_index":841,"title":{},"body":{"injectables/TeamService.html":{}}}],["setteam(team",{"_index":860,"title":{},"body":{"injectables/TeamService.html":{}}}],["settimeout",{"_index":441,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["settoken",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["settoken(giventoken",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["shouldn't",{"_index":1289,"title":{},"body":{"todo.html":{}}}],["show",{"_index":66,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["shows",{"_index":1128,"title":{},"body":{"todo.html":{}}}],["side",{"_index":1197,"title":{},"body":{"todo.html":{}}}],["sign",{"_index":723,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["signing",{"_index":716,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["signup",{"_index":324,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/SignupComponent.html":{}}}],["signup'},{'name",{"_index":159,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["signup.component.css",{"_index":726,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":727,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":158,"title":{"components/SignupComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":789,"title":{},"body":{"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["simplechanges",{"_index":644,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["simply",{"_index":797,"title":{},"body":{"components/SignupComponent.html":{}}}],["single",{"_index":587,"title":{},"body":{"classes/Question.html":{},"todo.html":{}}}],["size",{"_index":132,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"todo.html":{}}}],["sizing",{"_index":59,"title":{},"body":{"components/AdminComponent.html":{}}}],["slight",{"_index":1234,"title":{},"body":{"todo.html":{}}}],["solution",{"_index":1250,"title":{},"body":{"todo.html":{}}}],["somehow",{"_index":1290,"title":{},"body":{"todo.html":{}}}],["something",{"_index":1153,"title":{},"body":{"todo.html":{}}}],["somewhere",{"_index":101,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{}}}],["sorry",{"_index":804,"title":{},"body":{"components/SignupComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"modules/MaterialModule.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["specifically",{"_index":1215,"title":{},"body":{"todo.html":{}}}],["src/.../async",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":996,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../material.module.ts",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":315,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.module.ts",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/material/material.module.ts",{"_index":564,"title":{},"body":{"modules/MaterialModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/questions/questions.component.ts",{"_index":616,"title":{},"body":{"components/QuestionsComponent.html":{},"coverage.html":{}}}],["src/app/components/questions/questions.component.ts:29",{"_index":627,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:31",{"_index":628,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:33",{"_index":629,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:35",{"_index":635,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:37",{"_index":630,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:42",{"_index":656,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:44",{"_index":658,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:50",{"_index":637,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:71",{"_index":645,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/questions/questions.component.ts:81",{"_index":650,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["src/app/components/timer/timer.component.ts",{"_index":880,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/components/timer/timer.component.ts:16",{"_index":893,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:18",{"_index":910,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:20",{"_index":913,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:23",{"_index":909,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:25",{"_index":911,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:28",{"_index":897,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:33",{"_index":900,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:37",{"_index":902,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:43",{"_index":906,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:48",{"_index":907,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:62",{"_index":908,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:69",{"_index":915,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/components/timer/timer.component.ts:74",{"_index":895,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/constants.ts",{"_index":941,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/interceptors/auth.interceptor.ts",{"_index":332,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"coverage.html":{}}}],["src/app/interceptors/auth.interceptor.ts:14",{"_index":340,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/models/question.ts",{"_index":585,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/app/models/question.ts:13",{"_index":601,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:14",{"_index":600,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:15",{"_index":599,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/question.ts:2",{"_index":593,"title":{},"body":{"classes/Question.html":{}}}],["src/app/models/team.ts",{"_index":810,"title":{},"body":{"classes/Team.html":{},"coverage.html":{}}}],["src/app/models/team.ts:2",{"_index":817,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:23",{"_index":829,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:24",{"_index":830,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:25",{"_index":832,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:26",{"_index":831,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:27",{"_index":828,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:28",{"_index":827,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:29",{"_index":833,"title":{},"body":{"classes/Team.html":{}}}],["src/app/models/team.ts:30",{"_index":826,"title":{},"body":{"classes/Team.html":{}}}],["src/app/pages/admin/admin.component.ts",{"_index":10,"title":{},"body":{"components/AdminComponent.html":{},"coverage.html":{}}}],["src/app/pages/admin/admin.component.ts:13",{"_index":64,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:19",{"_index":56,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:22",{"_index":70,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:27",{"_index":67,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:30",{"_index":45,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/admin/admin.component.ts:44",{"_index":34,"title":{},"body":{"components/AdminComponent.html":{}}}],["src/app/pages/game",{"_index":525,"title":{},"body":{"components/GameOverComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts",{"_index":355,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/pages/game/game.component.ts:117",{"_index":409,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:144",{"_index":413,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:154",{"_index":420,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:168",{"_index":437,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:171",{"_index":434,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:21",{"_index":468,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:24",{"_index":445,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:26",{"_index":439,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:28",{"_index":447,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:30",{"_index":448,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:32",{"_index":450,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:34",{"_index":451,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:36",{"_index":458,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:38",{"_index":463,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:40",{"_index":460,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:42",{"_index":455,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:50",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:57",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:67",{"_index":386,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:92",{"_index":399,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/game/game.component.ts:99",{"_index":401,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/pages/signup/signup.component.ts",{"_index":721,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/pages/signup/signup.component.ts:16",{"_index":741,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:18",{"_index":745,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:20",{"_index":746,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:22",{"_index":743,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:31",{"_index":732,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:36",{"_index":735,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:41",{"_index":737,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/pages/signup/signup.component.ts:51",{"_index":738,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/register.guard.ts",{"_index":713,"title":{},"body":{"guards/RegisterGuard.html":{},"coverage.html":{}}}],["src/app/register.guard.ts:17",{"_index":717,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["src/app/services/admin.service.ts",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/app/services/admin.service.ts:22",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:24",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:27",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:32",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:38",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:43",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:51",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/admin.service.ts:60",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app/services/question.service.ts",{"_index":602,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/app/services/question.service.ts:20",{"_index":609,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/question.service.ts:39",{"_index":606,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/app/services/team.service.ts",{"_index":834,"title":{},"body":{"injectables/TeamService.html":{},"coverage.html":{}}}],["src/app/services/team.service.ts:19",{"_index":863,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:21",{"_index":862,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:24",{"_index":861,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:29",{"_index":843,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:34",{"_index":859,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:39",{"_index":842,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:48",{"_index":847,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:62",{"_index":852,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:69",{"_index":854,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:75",{"_index":857,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/team.service.ts:86",{"_index":846,"title":{},"body":{"injectables/TeamService.html":{}}}],["src/app/services/time.service.ts",{"_index":874,"title":{},"body":{"injectables/TimeService.html":{},"coverage.html":{}}}],["src/app/services/time.service.ts:18",{"_index":876,"title":{},"body":{"injectables/TimeService.html":{}}}],["src/environments/environment.prod.ts",{"_index":950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/testing/async",{"_index":953,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":1254,"title":{},"body":{"todo.html":{}}}],["start",{"_index":406,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["started",{"_index":422,"title":{"index.html":{},"todo.html":{}},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["starts",{"_index":400,"title":{},"body":{"components/GameComponent.html":{},"components/TimerComponent.html":{}}}],["state",{"_index":100,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{},"index.html":{}}}],["state('correct",{"_index":670,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["state('incorrect",{"_index":672,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["statements",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":54,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["statistics",{"_index":1149,"title":{},"body":{"todo.html":{}}}],["still",{"_index":1180,"title":{},"body":{"todo.html":{}}}],["stop",{"_index":892,"title":{},"body":{"components/TimerComponent.html":{}}}],["stops",{"_index":903,"title":{},"body":{"components/TimerComponent.html":{}}}],["storage",{"_index":844,"title":{},"body":{"injectables/TeamService.html":{}}}],["store",{"_index":440,"title":{},"body":{"components/GameComponent.html":{},"classes/Team.html":{},"index.html":{},"todo.html":{}}}],["stored",{"_index":1039,"title":{},"body":{"index.html":{}}}],["string",{"_index":61,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{},"todo.html":{}}}],["stuff",{"_index":60,"title":{},"body":{"components/AdminComponent.html":{},"modules/MaterialModule.html":{},"todo.html":{}}}],["style",{"_index":664,"title":{},"body":{"components/QuestionsComponent.html":{},"todo.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["submission",{"_index":739,"title":{},"body":{"components/SignupComponent.html":{}}}],["submit",{"_index":803,"title":{},"body":{"components/SignupComponent.html":{}}}],["submitted",{"_index":729,"title":{},"body":{"components/SignupComponent.html":{}}}],["subscribe(result",{"_index":701,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["successful",{"_index":1071,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":744,"title":{},"body":{"components/SignupComponent.html":{}}}],["support",{"_index":1098,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":111,"title":{},"body":{"components/AdminComponent.html":{},"todo.html":{}}}],["surprising",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["svg",{"_index":1099,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{}}}],["synchronously",{"_index":1080,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":1224,"title":{},"body":{"todo.html":{}}}],["system",{"_index":1067,"title":{},"body":{"index.html":{}}}],["tab",{"_index":1024,"title":{},"body":{"index.html":{}}}],["table",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":427,"title":{},"body":{"components/GameComponent.html":{}}}],["takes",{"_index":776,"title":{},"body":{"components/SignupComponent.html":{}}}],["team",{"_index":369,"title":{"classes/Team.html":{}},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"coverage.html":{},"todo.html":{}}}],["team._id",{"_index":760,"title":{},"body":{"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["team.points",{"_index":560,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.schoolname",{"_index":558,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.service",{"_index":610,"title":{},"body":{"injectables/QuestionService.html":{}}}],["team.teamnumber",{"_index":559,"title":{},"body":{"components/GameOverComponent.html":{}}}],["team.timeended",{"_index":765,"title":{},"body":{"components/SignupComponent.html":{}}}],["team]{@link",{"_index":864,"title":{},"body":{"injectables/TeamService.html":{}}}],["teamexists",{"_index":730,"title":{},"body":{"components/SignupComponent.html":{}}}],["teamnumber",{"_index":813,"title":{},"body":{"classes/Team.html":{}}}],["teams",{"_index":785,"title":{},"body":{"components/SignupComponent.html":{},"classes/Team.html":{},"todo.html":{}}}],["teamservice",{"_index":345,"title":{"injectables/TeamService.html":{}},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"coverage.html":{}}}],["tell",{"_index":1125,"title":{},"body":{"todo.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tenths",{"_index":883,"title":{},"body":{"components/TimerComponent.html":{}}}],["term",{"_index":1114,"title":{},"body":{"todo.html":{}}}],["terribly",{"_index":1296,"title":{},"body":{"todo.html":{}}}],["test",{"_index":1048,"title":{},"body":{"index.html":{},"todo.html":{}}}],["testing",{"_index":1115,"title":{},"body":{"todo.html":{}}}],["tests",{"_index":1047,"title":{},"body":{"index.html":{},"todo.html":{}}}],["textarea",{"_index":128,"title":{},"body":{"components/AdminComponent.html":{}}}],["theory",{"_index":1297,"title":{},"body":{"todo.html":{}}}],["thing",{"_index":1238,"title":{},"body":{"todo.html":{}}}],["things",{"_index":1169,"title":{},"body":{"todo.html":{}}}],["think",{"_index":916,"title":{},"body":{"components/TimerComponent.html":{}}}],["third",{"_index":784,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.adminservice",{"_index":93,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.gettoken",{"_index":353,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.adminservice.loggedin",{"_index":352,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.adminservice.login(this.password).subscribe",{"_index":94,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.settoken(token.token",{"_index":97,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.adminservice.uploadquestions(input.files[0]).subscribe",{"_index":114,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.answerclicked.emit('correct",{"_index":702,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.answerclicked.emit('incorrect",{"_index":704,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.authorized",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.breakend",{"_index":505,"title":{},"body":{"components/GameComponent.html":{}}}],["this.breakstarted",{"_index":496,"title":{},"body":{"components/GameComponent.html":{}}}],["this.callback",{"_index":921,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.checkinterval",{"_index":930,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.consoleoutput",{"_index":116,"title":{},"body":{"components/AdminComponent.html":{}}}],["this.currentquestion",{"_index":486,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.currentquestion.answers.reduce((result",{"_index":687,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finishanimation",{"_index":699,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.finished",{"_index":518,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.gameover",{"_index":507,"title":{},"body":{"components/GameComponent.html":{}}}],["this.geteventmessage(event",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getquestions",{"_index":516,"title":{},"body":{"components/GameComponent.html":{}}}],["this.http.get(uri.date.can_start).pipe",{"_index":879,"title":{},"body":{"injectables/TimeService.html":{}}}],["this.http.get(uri.practice_questions.get).pipe",{"_index":612,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.get(uri.questions.get).pipe",{"_index":613,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.post(uri.admin.login",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.http.post(uri.team.save",{"_index":868,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.answer.check",{"_index":615,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.practice_questions.check",{"_index":614,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.http.put(uri.team.get",{"_index":873,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.put(uri.team.save",{"_index":869,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.http.request(req).pipe",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.index",{"_index":491,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["this.loadquestion",{"_index":521,"title":{},"body":{"components/GameComponent.html":{}}}],["this.milliseconds",{"_index":923,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.millisecondstimeout",{"_index":922,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.points",{"_index":479,"title":{},"body":{"components/GameComponent.html":{}}}],["this.pointsgained",{"_index":489,"title":{},"body":{"components/GameComponent.html":{}}}],["this.post(team",{"_index":872,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.practice",{"_index":866,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.put(team",{"_index":871,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.questionhelper",{"_index":506,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions",{"_index":485,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questions[this.index",{"_index":487,"title":{},"body":{"components/GameComponent.html":{}}}],["this.questionservice.checkanswer(answer",{"_index":700,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.questionservice.getquestions().subscribe(questions",{"_index":484,"title":{},"body":{"components/GameComponent.html":{}}}],["this.registrationallowed",{"_index":751,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.reset",{"_index":926,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.router.navigate(['/game",{"_index":753,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/gameover",{"_index":483,"title":{},"body":{"components/GameComponent.html":{}}}],["this.router.navigate(['/signup",{"_index":720,"title":{},"body":{"guards/RegisterGuard.html":{}}}],["this.saving",{"_index":549,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.seconds",{"_index":510,"title":{},"body":{"components/GameComponent.html":{}}}],["this.secondtryallowed",{"_index":520,"title":{},"body":{"components/GameComponent.html":{}}}],["this.start",{"_index":927,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.started.emit(null",{"_index":931,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.state",{"_index":677,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[answerindex",{"_index":703,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[i",{"_index":688,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.state[indices[i",{"_index":695,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["this.stop",{"_index":925,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.submitted",{"_index":762,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team",{"_index":514,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["this.team._id",{"_index":757,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.currentquestion",{"_index":490,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.points",{"_index":478,"title":{},"body":{"components/GameComponent.html":{}}}],["this.team.schoolname",{"_index":754,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.teamnumber",{"_index":755,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.team.timeended",{"_index":480,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.timestarted",{"_index":515,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{}}}],["this.team.token",{"_index":867,"title":{},"body":{"injectables/TeamService.html":{}}}],["this.teamservice.getpractice",{"_index":611,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.teamservice.getteam",{"_index":348,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{}}}],["this.teamservice.getteamfromserver(this.team).subscribe",{"_index":759,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.gettoken",{"_index":351,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.teamservice.save(this.team).subscribe",{"_index":493,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setpractice(true",{"_index":758,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(newteam",{"_index":764,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.teamservice.setteam(this.team",{"_index":482,"title":{},"body":{"components/GameComponent.html":{},"components/SignupComponent.html":{}}}],["this.teamservice.setteam(undefined",{"_index":556,"title":{},"body":{"components/GameOverComponent.html":{}}}],["this.timer",{"_index":928,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.timer.clearinterval",{"_index":504,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.milliseconds",{"_index":511,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.restart",{"_index":497,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.setinterval",{"_index":524,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.start",{"_index":513,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timer.stop",{"_index":519,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timeservice.getcanstart().subscribe(canstart",{"_index":750,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.token",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{}}}],["thoroughly",{"_index":1154,"title":{},"body":{"todo.html":{}}}],["though",{"_index":1124,"title":{},"body":{"todo.html":{}}}],["thus",{"_index":1076,"title":{},"body":{"index.html":{}}}],["time",{"_index":425,"title":{},"body":{"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TimeService.html":{},"components/TimerComponent.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["timeended",{"_index":814,"title":{},"body":{"classes/Team.html":{}}}],["timer",{"_index":161,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["timer.component.css",{"_index":884,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":885,"title":{},"body":{"components/TimerComponent.html":{}}}],["timercomponent",{"_index":160,"title":{"components/TimerComponent.html":{}},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["timers",{"_index":1257,"title":{},"body":{"todo.html":{}}}],["timeservice",{"_index":748,"title":{"injectables/TimeService.html":{}},"body":{"components/SignupComponent.html":{},"injectables/TimeService.html":{},"coverage.html":{}}}],["timestarted",{"_index":815,"title":{},"body":{"classes/Team.html":{}}}],["timezone",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["todo",{"_index":98,"title":{"todo.html":{}},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/QuestionsComponent.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["token",{"_index":95,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["token]{@link",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["tokens",{"_index":1232,"title":{},"body":{"todo.html":{}}}],["took",{"_index":1073,"title":{},"body":{"index.html":{}}}],["total",{"_index":396,"title":{},"body":{"components/GameComponent.html":{}}}],["totally",{"_index":1109,"title":{},"body":{"todo.html":{}}}],["transactions",{"_index":1220,"title":{},"body":{"todo.html":{}}}],["transition",{"_index":665,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["tried",{"_index":1213,"title":{},"body":{"todo.html":{}}}],["tries",{"_index":641,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger",{"_index":666,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["trigger('answerstate",{"_index":669,"title":{},"body":{"components/QuestionsComponent.html":{}}}],["true",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"modules/AppModule.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1086,"title":{},"body":{"index.html":{},"todo.html":{}}}],["tslib",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":1002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tweaks",{"_index":1106,"title":{},"body":{"todo.html":{}}}],["twice",{"_index":398,"title":{},"body":{"components/GameComponent.html":{}}}],["two",{"_index":801,"title":{},"body":{"components/SignupComponent.html":{},"index.html":{},"todo.html":{}}}],["type",{"_index":50,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"interceptors/AuthInterceptor.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"classes/Question.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"classes/Team.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1199,"title":{},"body":{"todo.html":{}}}],["typescript",{"_index":1198,"title":{},"body":{"todo.html":{}}}],["undefined",{"_index":523,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["under",{"_index":777,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["undoes",{"_index":503,"title":{},"body":{"components/GameComponent.html":{}}}],["unique",{"_index":799,"title":{},"body":{"components/SignupComponent.html":{}}}],["unit",{"_index":1046,"title":{},"body":{"index.html":{},"todo.html":{}}}],["until",{"_index":795,"title":{},"body":{"components/SignupComponent.html":{},"todo.html":{}}}],["up",{"_index":407,"title":{},"body":{"components/GameComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"todo.html":{}}}],["update",{"_index":855,"title":{},"body":{"injectables/TeamService.html":{}}}],["upgrade",{"_index":1314,"title":{},"body":{"todo.html":{}}}],["upload",{"_index":35,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{}}}],["uploaded",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploading",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploadquestions(questions",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{}}}],["uploads",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["uri",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{},"injectables/QuestionService.html":{},"injectables/TeamService.html":{},"injectables/TimeService.html":{},"todo.html":{}}}],["uri.questions.save",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{}}}],["usage#exponential",{"_index":1262,"title":{},"body":{"todo.html":{}}}],["use",{"_index":1035,"title":{},"body":{"index.html":{},"todo.html":{}}}],["useclass",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":72,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"classes/Team.html":{}}}],["useful",{"_index":1148,"title":{},"body":{"todo.html":{}}}],["user",{"_index":47,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"todo.html":{}}}],["user's",{"_index":452,"title":{},"body":{"components/GameComponent.html":{},"components/QuestionsComponent.html":{}}}],["users",{"_index":722,"title":{},"body":{"components/SignupComponent.html":{}}}],["uses",{"_index":1079,"title":{},"body":{"index.html":{}}}],["using",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{},"injectables/TimeService.html":{},"index.html":{},"todo.html":{}}}],["value",{"_index":63,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":146,"title":{},"body":{"components/AdminComponent.html":{},"components/AppComponent.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":104,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{},"components/QuestionsComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1318,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":403,"title":{},"body":{"components/GameComponent.html":{}}}],["version",{"_index":1014,"title":{},"body":{"index.html":{},"todo.html":{}}}],["via",{"_index":1050,"title":{},"body":{"index.html":{},"todo.html":{}}}],["viewchild",{"_index":80,"title":{},"body":{"components/AdminComponent.html":{},"components/GameComponent.html":{}}}],["viewchild('autosize",{"_index":53,"title":{},"body":{"components/AdminComponent.html":{}}}],["viewchild(timercomponent",{"_index":467,"title":{},"body":{"components/GameComponent.html":{}}}],["violating",{"_index":75,"title":{},"body":{"components/AdminComponent.html":{}}}],["virtualquiz",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["void",{"_index":44,"title":{},"body":{"components/AdminComponent.html":{},"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"components/QuestionsComponent.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{},"components/TimerComponent.html":{}}}],["vq",{"_index":1137,"title":{},"body":{"todo.html":{}}}],["wait",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1210,"title":{},"body":{"todo.html":{}}}],["wasn't",{"_index":1279,"title":{},"body":{"todo.html":{}}}],["watch",{"_index":1085,"title":{},"body":{"index.html":{}}}],["watched",{"_index":1237,"title":{},"body":{"todo.html":{}}}],["way",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"components/TimerComponent.html":{},"todo.html":{}}}],["ways",{"_index":1168,"title":{},"body":{"todo.html":{}}}],["web",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["webkit",{"_index":134,"title":{},"body":{"components/AdminComponent.html":{}}}],["webpack",{"_index":1211,"title":{},"body":{"todo.html":{}}}],["weird",{"_index":57,"title":{},"body":{"components/AdminComponent.html":{},"index.html":{},"todo.html":{}}}],["whether",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{},"components/GameComponent.html":{},"components/GameOverComponent.html":{},"injectables/QuestionService.html":{},"components/QuestionsComponent.html":{},"guards/RegisterGuard.html":{},"components/SignupComponent.html":{},"injectables/TeamService.html":{}}}],["width",{"_index":125,"title":{},"body":{"components/AdminComponent.html":{},"components/QuestionsComponent.html":{}}}],["window.clearinterval(this.timer",{"_index":932,"title":{},"body":{"components/TimerComponent.html":{}}}],["window.setinterval",{"_index":929,"title":{},"body":{"components/TimerComponent.html":{}}}],["wipes",{"_index":550,"title":{},"body":{"components/GameOverComponent.html":{}}}],["wish",{"_index":787,"title":{},"body":{"components/SignupComponent.html":{}}}],["without",{"_index":1284,"title":{},"body":{"todo.html":{}}}],["works",{"_index":1225,"title":{},"body":{"todo.html":{}}}],["worse",{"_index":917,"title":{},"body":{"components/TimerComponent.html":{}}}],["worth",{"_index":1170,"title":{},"body":{"todo.html":{}}}],["wrong",{"_index":432,"title":{},"body":{"components/GameComponent.html":{}}}],["yes",{"_index":821,"title":{},"body":{"classes/Team.html":{}}}],["zone.js",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AdminComponent.html":{"url":"components/AdminComponent.html","title":"component - AdminComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AdminComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/admin/admin.component.ts\n\n\n    \n        Description\n    \n    \n        Page concerned with admin functionality \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin\n            \n\n            \n                styleUrls\n                ./admin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./admin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                autosize\n                            \n                            \n                                consoleOutput\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fileUpload\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    admin\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileUpload\n                        \n                        \n                    \n                \n            \n            \n                \nfileUpload($event)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:44\n                \n            \n\n\n            \n                \n                    Upload the questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    $event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/admin/admin.component.ts:30\n                \n            \n\n\n            \n                \n                    Called when the user attempts to log in \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            autosize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CdkTextareaAutosize\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('autosize', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:19\n                            \n                        \n\n                \n                    \n                        Some weird auto-sizing stuff \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            consoleOutput\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:13\n                            \n                        \n\n                \n                    \n                        Output to show to the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/admin/admin.component.ts:27\n                            \n                        \n\n                \n                    \n                        the password that the user has entered \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        admin\n                    \n                \n\n                \n                    \n                        getadmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/admin/admin.component.ts:22\n                                \n                            \n                    \n                        \n                                Returns the admin service. Used by html to avoid violating private access \n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AdminService } from '../../services/admin.service';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\n\n/** Page concerned with admin functionality */\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n  /** Output to show to the user */\n  consoleOutput = ''; // should be a class that with an add() method\n\n  /** @ignore */\n  constructor(private adminService: AdminService) { }\n\n  /** Some weird auto-sizing stuff */\n  @ViewChild('autosize', { static: false }) autosize: CdkTextareaAutosize;\n\n  /** Returns the admin service. Used by html to avoid violating private access */\n  get admin() {\n    return this.adminService;\n  }\n\n  /** the password that the user has entered */\n  password: string;\n\n  /** Called when the user attempts to log in */\n  onSubmit() {\n    this.adminService.login(this.password).subscribe( token => {\n      if (token !== 'err') {\n        this.adminService.setToken(token.token);\n      } else {\n        // todo incorrect password state somewhere\n      }\n    });\n  }\n\n  /** Upload the questions to the server */\n  // todo rewrite as template reference variable as better practice\n  //  https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable\n  //   if possible (not sure that it is)\n  fileUpload($event): void {\n    const input = $event.target;\n    this.adminService.uploadQuestions(input.files[0]).subscribe(\n      res =>  {\n        this.consoleOutput += res + '\\n';\n      }, err => {\n        this.consoleOutput += err + '\\n';\n      });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Upload the csv file containing the questions\n      \n        \n          Choose File\n        \n        \n      \n    \n  \n  \n    \n      {{consoleOutput}}\n    \n    Clear Output\n  \n\n\n  \n    \n      \n        \n      \n      Login\n    \n  \n\n\n    \n\n    \n                \n                    ./admin.component.css\n                \n                div {\n  column-width: fill-available;\n}\ntextarea {\n  height: 100%;\n  width: 100%;\n  font-size: 14px;\n  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n  -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n  box-sizing: border-box;         /* Opera/IE 8+ */\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Upload the csv file containing the questions                        Choose File                                        {{consoleOutput}}        Clear Output                                  Login      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AdminComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/admin.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality relevant to administrators \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authorized\n                            \n                            \n                                    Private\n                                token\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getEventMessage\n                            \n                            \n                                getToken\n                            \n                            \n                                loggedIn\n                            \n                            \n                                login\n                            \n                            \n                                setToken\n                            \n                            \n                                uploadQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getEventMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventMessage(event: HttpEvent, file: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:60\n                \n            \n\n\n            \n                \n                    Return distinct message for sent, upload progress, & response events \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            HttpEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:38\n                \n            \n\n\n            \n                \n                    Gets the value of the token \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loggedIn\n                        \n                        \n                    \n                \n            \n            \n                \nloggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:27\n                \n            \n\n\n            \n                \n                    Whether or not the admin is logged in \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(password)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:43\n                \n            \n\n\n            \n                \n                    Logs the user in using the provided password \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setToken\n                        \n                        \n                    \n                \n            \n            \n                \nsetToken(givenToken)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:32\n                \n            \n\n\n            \n                \n                    Sets the value of the token \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    givenToken\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            uploadQuestions\n                        \n                        \n                    \n                \n            \n            \n                \nuploadQuestions(questions: File)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/admin.service.ts:51\n                \n            \n\n\n            \n                \n                    Uploads questions to the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    questions\n                                    \n                                            File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            authorized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this client is authorized to access the content on this page \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/admin.service.ts:24\n                            \n                        \n\n                \n                    \n                        The token for the admin user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpEventType,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { handleError, httpOptionsJSON, URI } from '../constants';\n\n/** Provides functionality relevant to administrators */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** Whether this client is authorized to access the content on this page */\n  private authorized = false;\n  /** The token for the admin user */\n  private token: string;\n\n  /** Whether or not the admin is logged in */\n  loggedIn() {\n    return this.authorized;\n  }\n\n  /** Sets the value of the [token]{@link #token} */\n  setToken(givenToken) {\n    this.token = givenToken;\n    this.authorized = true;\n  }\n\n  /** Gets the value of the [token]{@link #token} */\n  getToken() {\n    return this.token;\n  }\n\n  /** Logs the user in using the provided password */\n  login(password): Observable {\n    // TODO find a better way to do this - can't handle strings for some reason\n    return this.http.post(URI.ADMIN.LOGIN, {password}, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Uploads questions to the server */\n  uploadQuestions(questions: File) {\n    const req = new HttpRequest('POST', URI.QUESTIONS.SAVE, questions, { reportProgress: true });\n    return this.http.request(req).pipe(\n      map(event => this.getEventMessage(event, questions)),\n      catchError(handleError)\n    );\n  }\n\n  /** Return distinct message for sent, upload progress, & response events */\n  private getEventMessage(event: HttpEvent, file: File) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n      case HttpEventType.Response:\n        return `File \"${file.name}\" was completely uploaded!`;\n\n      default:\n        return `File \"${file.name}\" surprising upload event: ${event}.`;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The root component of the app \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/** The root component of the app */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n    \n\n    \n        \n  \n    VirtualQuiz\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      VirtualQuiz  '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nAuthInterceptor\n\nAuthInterceptor\n\nAppModule -->\n\nAuthInterceptor->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminComponent\n                        \n                        \n                            AppComponent\n                        \n                        \n                            GameComponent\n                        \n                        \n                            GameOverComponent\n                        \n                        \n                            QuestionsComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            AuthInterceptor\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                        \n                            MaterialModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { AppComponent } from './app.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { GameComponent } from './pages/game/game.component';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { FormsModule } from '@angular/forms';\nimport { QuestionsComponent } from './components/questions/questions.component';\nimport { TimerComponent } from './components/timer/timer.component';\nimport { MaterialModule } from './components/material/material.module';\nimport { AdminComponent } from './pages/admin/admin.component';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    GameComponent,\n    GameOverComponent,\n    QuestionsComponent,\n    TimerComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { RouterModule, Routes} from '@angular/router';\nimport { RegisterGuard } from './register.guard';\nimport { GameOverComponent } from './pages/game-over/game-over.component';\nimport { GameComponent } from './pages/game/game.component';\nimport { AdminComponent } from './pages/admin/admin.component';\n\nconst routes: Routes = [\n  {\n    path: 'game',\n    component: GameComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'signup',\n    component: SignupComponent\n  },\n  {\n    path: 'gameover',\n    component: GameOverComponent,\n    canActivate: [RegisterGuard]\n  },\n  {\n    path: 'admin',\n    component: AdminComponent\n  },\n  {\n    path: '',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: '/signup',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthInterceptor.html":{"url":"interceptors/AuthInterceptor.html","title":"interceptor - AuthInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interceptors/auth.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Intercepts http requests to add authorization \n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/interceptors/auth.interceptor.ts:14\n                \n            \n\n\n            \n                \n                    Adds a token to every request if the token exists \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TeamService } from '../services/team.service';\nimport { AdminService } from '../services/admin.service';\n\n/** Intercepts http requests to add authorization */\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  /** @ignore */\n  constructor(private teamService: TeamService, private adminService: AdminService) {}\n\n  /** Adds a token to every request if the token exists */\n  intercept(req: HttpRequest, next: HttpHandler): Observable> {\n    if (this.teamService.getTeam()) {\n      req = req.clone({\n        setHeaders: {\n          authorization: `${this.teamService.getToken()}`\n        }\n      });\n    } else if (this.adminService.loggedIn()) {\n      req = req.clone({\n        setHeaders: {\n          authorization: `${this.adminService.getToken()}`\n        }\n      });\n    }\n\n    return next.handle(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game/game.component.ts\n\n\n    \n        Description\n    \n    \n        The main page of the game. Contains the game logic \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game\n            \n\n            \n                styleUrls\n                game.component.css\n            \n\n\n\n            \n                templateUrl\n                game.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                breakEnd\n                            \n                            \n                                breakStarted\n                            \n                            \n                                currentQuestion\n                            \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                points\n                            \n                            \n                                pointsGained\n                            \n                            \n                                questions\n                            \n                            \n                                secondTryAllowed\n                            \n                            \n                                team\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                getQuestions\n                            \n                            \n                                loadQuestion\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnswerClicked\n                            \n                            \n                                onBreakEnd\n                            \n                            \n                                onStarted\n                            \n                            \n                                    Private\n                                questionHelper\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gameOver\n                        \n                        \n                    \n                \n            \n            \n                \ngameOver()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:50\n                \n            \n\n\n            \n                \n                    Called when there are no more questions to serve, i.e. when the game is over \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the questions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadQuestion\n                        \n                        \n                    \n                \n            \n            \n                \nloadQuestion()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:67\n                \n            \n\n\n            \n                \n                    Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\noccur after roughly 1/3 of the total questions are completed (but only twice)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:92\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:99\n                \n            \n\n\n            \n                \n                    Perform various actions necessary to start up the game \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAnswerClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAnswerClicked(result: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:117\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether or not the clicked answer was 'correct' or 'incorrect'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBreakEnd\n                        \n                        \n                    \n                \n            \n            \n                \nonBreakEnd()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:144\n                \n            \n\n\n            \n                \n                    Called when the current breakStarted ends by the user pressing the End Break button \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onStarted\n                        \n                        \n                    \n                \n            \n            \n                \nonStarted()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:154\n                \n            \n\n\n            \n                \n                    Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\nbefore it's counted as an automatic wrong guess\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            questionHelper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    questionHelper()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:171\n                \n            \n\n\n            \n                \n                    A little helper that loads the next question \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            seconds\n                        \n                        \n                    \n                \n            \n            \n                \nseconds()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game/game.component.ts:168\n                \n            \n\n\n            \n                \n                    The current number of seconds on the timer \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakEnd\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:26\n                            \n                        \n\n                \n                    \n                        Used to store the setTimeout() variable so that we can later call clearTimeout() \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:24\n                            \n                        \n\n                \n                    \n                        Whether or not a breakStarted is currently in progress \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:28\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            finished\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether or not this question has been completed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:32\n                            \n                        \n\n                \n                    \n                        Index of the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:34\n                            \n                        \n\n                \n                    \n                        The user's current point score \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pointsGained\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:42\n                            \n                        \n\n                \n                    \n                        How many points the user gained from this question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:36\n                            \n                        \n\n                \n                    \n                        The questions to display \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secondTryAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:40\n                            \n                        \n\n                \n                    \n                        Whether or not the user is allowed a second guess on the current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:38\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TimerComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(TimerComponent, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game/game.component.ts:21\n                            \n                        \n\n                \n                    \n                        A reference to the timer portion of the game page \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit, ViewChild  } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { questionLoadDelay, autoWrongGuess, breakTime } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\nimport { TimerComponent } from '../../components/timer/timer.component';\n\n/** The main page of the game. Contains the game logic */\n@Component({\n  selector: 'app-game',\n  templateUrl: 'game.component.html',\n  styleUrls: ['game.component.css']\n})\nexport class GameComponent implements OnInit, AfterViewInit {\n\n  /** A reference to the timer portion of the game page */\n  @ViewChild(TimerComponent, { static: true })\n  private timer: TimerComponent;\n\n  /** Whether or not a breakStarted is currently in progress */\n  breakStarted = false;\n  /** Used to store the setTimeout() variable so that we can later call clearTimeout() */\n  breakEnd;\n  /** The current question */\n  currentQuestion: Question;\n  /** Whether or not this question has been completed */\n  finished = false;\n  /** Index of the current question */\n  index = 0;\n  /** The user's current point score */\n  points = 0;\n  /** The questions to display */\n  questions: Question[];\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not the user is allowed a second guess on the current question */\n  secondTryAllowed = true;\n  /** How many points the user gained from this question */\n  pointsGained = 0;\n\n  /** @ignore */\n  constructor(private router: Router,\n              private questionService: QuestionService,\n              private teamService: TeamService) { }\n\n  /** Called when there are no more questions to serve, i.e. when the game is over */\n  gameOver() {\n    this.team.points = this.points;\n    this.team.timeEnded = Date.now();\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/gameover']);\n  }\n  /** Retrieves the questions */\n  getQuestions() {\n    this.questionService.getQuestions().subscribe(questions => {\n        this.questions = questions;\n        this.currentQuestion = this.questions[this.index];\n      });\n  }\n  /**\n   * Loads the next question if it exists, and if not, calls gameOver(). Also in charge of initiating breaks, which\n   * occur after roughly 1/3 of the total questions are completed (but only twice)\n   */\n  loadQuestion() {\n    // save result\n    this.pointsGained = 0;\n    this.team.currentQuestion = this.index + 1;\n    this.team.points = this.points;\n    this.teamService.save(this.team).subscribe();\n    ++this.index;\n    if (this.questions[this.index]) {\n      if (this.index % Math.floor(this.questions.length / 3) === 0 && this.index !== Math.floor(this.questions.length / 3) * 3 ) {\n        this.breakStarted = true;\n        this.timer.restart();\n        // Prevents on breakStarted menu from continuing to reset after 60 seconds. Essentially undoes onStarted()\n        this.timer.clearInterval();\n        this.breakEnd = setTimeout(() => {\n          this.breakStarted = false;\n          this.questionHelper();\n        }, breakTime);\n      } else {\n        this.questionHelper();\n      }\n    } else {\n      this.gameOver();\n    }\n  }\n  /** Starts the timer */\n  ngAfterViewInit() {\n    // sets up the seconds() method to actually get the time from the TimerComponent\n    // Dubious if this should actually be in AfterViewInit()\n    setTimeout(() => this.seconds = () => this.timer.milliseconds / 1000, 0);\n    this.timer.start();\n  }\n  /** Perform various actions necessary to start up the game */\n  ngOnInit() {\n    this.team = this.teamService.getTeam();\n    if (!this.team.timeStarted) {\n      this.team.timeStarted = Date.now();\n    }\n    if (this.team.currentQuestion) {\n      this.index = this.team.currentQuestion;\n    }\n    if (this.team.points) {\n      this.points = this.team.points;\n    }\n    this.getQuestions();\n  }\n  /**\n   * Called when an answer is clicked\n   * @param result\n   *  Whether or not the clicked answer was 'correct' or 'incorrect'\n   */\n  onAnswerClicked(result: string) {\n    if (result === 'correct') {\n      this.finished = true;\n      this.timer.stop();\n      if (!this.secondTryAllowed) {\n        this.pointsGained = 1;\n      } else if (this.seconds()  this.loadQuestion(), questionLoadDelay);\n    } else {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }\n  }\n  /** Called when the current breakStarted ends by the user pressing the End Break button */\n  onBreakEnd() {\n    clearTimeout(this.breakEnd);\n    this.breakEnd = undefined;\n    this.breakStarted = false;\n    this.questionHelper();\n  }\n  /**\n   * Method that runs when the Timer is started. Sets a limit as defined in constants as the maximum time one can take\n   * before it's counted as an automatic wrong guess\n   */\n  onStarted() {\n    this.timer.setInterval(() => {\n      if (this.secondTryAllowed) {\n        this.secondTryAllowed = false;\n        this.timer.restart();\n      } else {\n        this.finished = true;\n        this.timer.stop();\n        setTimeout(() => this.loadQuestion(), questionLoadDelay);\n      }\n    }, autoWrongGuess);\n  }\n\n  /** The current number of seconds on the timer */\n  seconds() { return 0; }\n\n  /** A little helper that loads the next question */\n  private questionHelper() {\n    this.currentQuestion = this.questions[this.index];\n    this.timer.restart();\n    this.secondTryAllowed = true;\n    this.finished = false;\n  }\n}\n\n    \n\n    \n        \n    Current Time: \n    \n      Point total: {{points}}\n      \n        \n        \n        \n      \n    \n    \n      End break\n    \n\n\n    \n\n    \n                \n                    game.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Current Time:           Point total: {{points}}                                                  End break    '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameOverComponent.html":{"url":"components/GameOverComponent.html","title":"component - GameOverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GameOverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/game-over/game-over.component.ts\n\n\n    \n        Description\n    \n    \n        Page to which players are sent after the game finishes \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-game-over\n            \n\n            \n                styleUrls\n                game-over.component.css\n            \n\n\n\n            \n                templateUrl\n                game-over.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                saving\n                            \n                            \n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                msToTime\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            msToTime\n                        \n                        \n                    \n                \n            \n            \n                \nmsToTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:22\n                \n            \n\n\n            \n                \n                    Converts milliseconds to human readable time \n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/game-over/game-over.component.ts:35\n                \n            \n\n\n            \n                \n                    Saves the team \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saving\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not we are in the process of saving data to the server \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/game-over/game-over.component.ts:14\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\nimport { Team } from '../../models/team';\nimport { TeamService } from '../../services/team.service';\n\n/** Page to which players are sent after the game finishes */\n@Component({\n  selector: 'app-game-over',\n  templateUrl: 'game-over.component.html',\n  styleUrls: ['game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  /** The Team object which contains identifying information about the user */\n  team: Team;\n  /** Whether or not we are in the process of saving data to the server */\n  saving: boolean;\n\n  /** @ignore */\n  constructor(private teamService: TeamService) { }\n\n  /** Converts milliseconds to human readable time */\n  msToTime() {\n    let s = this.team.timeEnded - this.team.timeStarted;\n    const ms = s % 1000;\n    s = (s - ms) / 1000;\n    const secs = s % 60;\n    s = (s - secs) / 60;\n    const mins = s % 60;\n    const hrs = (s - mins) / 60;\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms;\n  }\n\n  /** Saves the team */\n  ngOnInit() {\n    this.saving = true;\n    this.team = this.teamService.getTeam();\n    this.teamService.save(this.team).subscribe(\n      // Wipes out copy of team in teamService to prevent user from playing again and modifying their results\n      () => {\n        this.teamService.setTeam(undefined);\n        this.saving = false;\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Results\n    \n    \n      \n        School Name: {{team.schoolName}}\n        Team number: {{team.teamNumber}}\n        Points: {{team.points}}\n        Time played: {{msToTime()}}\n      \n    \n  \n   Saving results. Please do not close the browser.\n\n\n\n    \n\n    \n                \n                    game-over.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Results                      School Name: {{team.schoolName}}        Team number: {{team.teamNumber}}        Points: {{team.points}}        Time played: {{msToTime()}}               Saving results. Please do not close the browser.'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameOverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MaterialModule.html":{"url":"modules/MaterialModule.html","title":"module - MaterialModule","body":"\n                   \n\n\n\n\n    Modules\n    MaterialModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/components/material/material.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module which is for all the material stuff \n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { NgModule } from '@angular/core';\n\n/** Material modules to include */\nconst modules = [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n];\n\n/** A module which is for all the material stuff */\n@NgModule({\n  imports: modules,\n  exports: modules\n})\nexport class MaterialModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/question.ts\n        \n\n            \n                Description\n            \n            \n                Holds a single question \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                answers\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(question: string, category: string, answers: string[])\n                    \n                \n                        \n                            \n                                Defined in src/app/models/question.ts:2\n                            \n                        \n\n                \n                    \n                            Constructs a Question\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        question\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The actual question\n\n                                                        \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The category that the question falls into\n\n                                                        \n                                                \n                                                \n                                                        answers\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The choices for potential answers to the question\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            answers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:15\n                            \n                        \n\n                \n                    \n                        The choices for potential answers to the question\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:14\n                            \n                        \n\n                \n                    \n                        The category that the question falls into\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            question\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/question.ts:13\n                            \n                        \n\n                \n                    \n                        The actual question\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {\n  /**\n   * Constructs a Question\n   * @param question\n   *  The actual question\n   * @param category\n   *  The category that the question falls into\n   * @param answers\n   *  The choices for potential answers to the question\n   */\n  constructor(\n    public question: string,\n    public category: string,\n    public answers: string[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/question.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to the question class \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAnswer\n                            \n                            \n                                getQuestions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAnswer\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAnswer(answer: string, index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:39\n                \n            \n\n\n            \n                \n                    Checks whether the selected answer is the correct one\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    answer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The selected answer\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index of the current question\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getQuestions\n                        \n                        \n                    \n                \n            \n            \n                \ngetQuestions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/question.service.ts:20\n                \n            \n\n\n            \n                \n                    Retrieves questions from the server \n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Question } from '../models/question';\nimport { TeamService } from './team.service';\n\n/** Provides functionality related to the question class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n\n  /** @ignore */\n  constructor(private http: HttpClient, private teamService: TeamService) { }\n\n  /** Retrieves questions from the server */\n  getQuestions(): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.get(URI.PRACTICE_QUESTIONS.GET).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.get(URI.QUESTIONS.GET).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n\n  /**\n   * Checks whether the selected answer is the correct one\n   * @param answer\n   *  The selected answer\n   * @param index\n   *  The index of the current question\n   */\n  checkAnswer(answer: string, index: number): Observable {\n    if (this.teamService.getPractice()) {\n      return this.http.put(URI.PRACTICE_QUESTIONS.CHECK, {answer, index}, httpOptionsJSON).pipe(\n        catchError(handleError)\n      );\n    } else {\n      return this.http.put(URI.ANSWER.CHECK, {answer, index}, httpOptionsJSON).pipe(\n        catchError(handleError)\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionsComponent.html":{"url":"components/QuestionsComponent.html","title":"component - QuestionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  QuestionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/questions/questions.component.ts\n\n\n    \n        Description\n    \n    \n        Component used to display the questions and answers and to animate them \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-questions\n            \n\n            \n                styleUrls\n                questions.component.css\n            \n\n\n\n            \n                templateUrl\n                questions.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentQuestion\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finishAnimation\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                finished\n                            \n                            \n                                index\n                            \n                            \n                                pointsGained\n                            \n                            \n                                question\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                answerClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    question\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        finished\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:29\n                            \n                        \n                \n                    \n                        Whether or not this currentQuestion has been completed \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:31\n                            \n                        \n                \n                    \n                        The index of the current question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        pointsGained\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:33\n                            \n                        \n                \n                    \n                        The number of points gained from this question \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        question\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                            \n                        \n                \n                    \n                        The current question (used in part to facilitate animations) \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        answerClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:35\n                            \n                        \n                \n                    \n                        Event that fires when an answer is clicked \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finishAnimation\n                        \n                        \n                    \n                \n            \n            \n                \nfinishAnimation()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:50\n                \n            \n\n\n            \n                \n                    Sets all answers to their respective colors once a user's tries have been exhausted \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:71\n                \n            \n\n\n            \n                \n                    Called when there is a change in the variable finished \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick(answer: string, answerIndex: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/questions/questions.component.ts:81\n                \n            \n\n\n            \n                \n                    Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\nor 'incorrect' and changes the answer object's state so that it is properly animated\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    answer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    answerIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Question\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:42\n                            \n                        \n\n                \n                    \n                        The current question \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            state\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/questions/questions.component.ts:44\n                            \n                        \n\n                \n                    \n                        The state of each answer, used for animations \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        question\n                    \n                \n\n\n                \n                    \n                        setquestion(given)\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/questions/questions.component.ts:37\n                                \n                            \n                    \n                        \n                                The current question (used in part to facilitate animations) \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            given\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { correctColor, incorrectColor } from '../../constants';\nimport { Question } from '../../models/question';\nimport { QuestionService } from '../../services/question.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { forkJoin } from 'rxjs';\n\n/** Component used to display the questions and answers and to animate them */\n@Component({\n  selector: 'app-questions',\n  templateUrl: 'questions.component.html',\n  styleUrls: ['questions.component.css'],\n  animations: [\n    trigger('answerState', [\n      state('correct', style({\n        backgroundColor: correctColor\n      })),\n      state('incorrect', style({\n        backgroundColor: incorrectColor\n      })),\n      transition('* => correct', animate('500ms ease-in')),\n      transition('* => incorrect', animate('500ms ease-in'))\n    ])\n  ]\n})\nexport class QuestionsComponent implements OnChanges {\n  /** Whether or not this currentQuestion has been completed */\n  @Input() finished: boolean;\n  /** The index of the current question */\n  @Input() index;\n  /** The number of points gained from this question */\n  @Input() pointsGained;\n  /** Event that fires when an answer is clicked */\n  @Output() answerClicked = new EventEmitter();\n  /** The current question (used in part to facilitate animations) */\n  @Input() set question(given: Question) {\n    this.state = new Array(given.answers.length).fill('inactive'); // todo should do instead with lifecycle hooks\n    this.currentQuestion = given;\n  }\n  /** The current question */\n  currentQuestion: Question;\n  /** The state of each answer, used for animations */\n  state: Array;\n\n  /** @ignore */\n  constructor(private questionService: QuestionService) { }\n\n  /** Sets all answers to their respective colors once a user's tries have been exhausted */\n  finishAnimation() {\n    // todo more efficient (less requests) but kinda confusing\n    const [answers, indices] = this.currentQuestion.answers.reduce((result, answer, i) => {\n      if (this.state[i] === 'inactive') {\n        result[0].push(this.questionService.checkAnswer(answer, this.index));\n        result[1].push(i);\n      }\n      return result;\n    }, [[], []]);\n    forkJoin(answers).subscribe(results =>\n        results.forEach( (result, i) => {\n          if (results[i]) {\n            this.state[indices[i]] = 'correct';\n          } else {\n            this.state[indices[i]] = 'incorrect';\n          }\n        })\n    );\n  }\n\n  /** Called when there is a change in the variable [finished]{@link #finished} */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.finished && changes.finished.currentValue === true) {\n      this.finishAnimation();\n    }\n  }\n\n  /**\n   * Called when an answer is clicked. Emits an event which contains a string saying whether the answer was 'correct'\n   * or 'incorrect' and changes the answer object's state so that it is properly animated\n   */\n  onClick(answer: string, answerIndex: number) {\n    if (!this.finished) {\n      this.questionService.checkAnswer(answer, this.index)\n        .subscribe(result => {\n          if (result) {\n            this.answerClicked.emit('correct');\n            this.state[answerIndex] = 'correct';\n          } else {\n            this.answerClicked.emit('incorrect');\n            this.state[answerIndex] = 'incorrect';\n          }\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n  Category: {{currentQuestion.category}}\n  \n    {{currentQuestion.question}}\n  \n  \n    \n      {{answer}} +{{pointsGained}}\n    \n  \n\n\n    \n\n    \n                \n                    questions.component.css\n                \n                button {\n  width: 100%;\n}\n\nbutton:hover {\n  background-color: gainsboro;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Category: {{currentQuestion.category}}      {{currentQuestion.question}}              {{answer}} +{{pointsGained}}      '\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'QuestionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RegisterGuard.html":{"url":"guards/RegisterGuard.html","title":"guard - RegisterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RegisterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/register.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Prevents user from accessing game or game-over pages before signing up \n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/register.guard.ts:17\n                \n            \n\n\n            \n                \n                    Whether or not the user is allowed to activate this route \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { TeamService } from './services/team.service';\n\n/** Prevents user from accessing game or game-over pages before signing up */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterGuard implements CanActivate {\n\n  /** @ignore */\n  constructor(private teamService: TeamService, private router: Router) {\n  }\n\n  /** Whether or not the user is allowed to activate this route */\n  canActivate(): boolean {\n    if (this.teamService.getTeam() === undefined) {\n      this.router.navigate(['/signup']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/signup/signup.component.ts\n\n\n    \n        Description\n    \n    \n        Page on which users sign up and initiate game play \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n            \n                styleUrls\n                signup.component.css\n            \n\n\n\n            \n                templateUrl\n                signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registrationAllowed\n                            \n                            \n                                submitted\n                            \n                            \n                                team\n                            \n                            \n                                teamExists\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onClick\n                            \n                            \n                                onClickPractice\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:31\n                \n            \n\n\n            \n                \n                    Checks to see if the user is allowed to compete yet \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClick\n                        \n                        \n                    \n                \n            \n            \n                \nonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:36\n                \n            \n\n\n            \n                \n                    Called when Start Game button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onClickPractice\n                        \n                        \n                    \n                \n            \n            \n                \nonClickPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:41\n                \n            \n\n\n            \n                \n                    Called when Play Practice Set button is pressed \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/pages/signup/signup.component.ts:51\n                \n            \n\n\n            \n                \n                    Called on submission of the form \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registrationAllowed\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:16\n                            \n                        \n\n                \n                    \n                        Whether or not users are allowed to register \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether or not the form has been successfully submitted \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                    \n                        \n                            Default value : new Team('', undefined)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:18\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            teamExists\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/pages/signup/signup.component.ts:20\n                            \n                        \n\n                \n                    \n                        Whether or not the given team already exists \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TimeService } from '../../services/time.service';\nimport { TeamService } from '../../services/team.service';\nimport { Team } from '../../models/team';\n\n/** Page on which users sign up and initiate game play */\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'signup.component.html',\n  styleUrls: ['signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  /** Whether or not users are allowed to register */\n  registrationAllowed = false;\n  /** The Team object which contains identifying information about the user */\n  team: Team = new Team('', undefined);\n  /** Whether or not the given team already exists */\n  teamExists = false;\n  /** Whether or not the form has been successfully submitted */\n  submitted = false;\n\n  /** @ignore */\n  constructor(private router: Router,\n              private teamService: TeamService,\n              private timeService: TimeService\n  ) { }\n\n  /** Checks to see if the user is allowed to compete yet */\n  ngOnInit() {\n    this.timeService.getCanStart().subscribe(canStart => this.registrationAllowed = canStart);\n  }\n\n  /** Called when Start Game button is pressed */\n  onClick() {\n    this.router.navigate(['/game']);\n  }\n\n  /** Called when Play Practice Set button is pressed */\n  onClickPractice() {\n    this.team.schoolName = 'School of practice';\n    this.team.teamNumber = 1337;\n    this.team._id = 'practice';\n    this.teamService.setPractice(true);\n    this.teamService.setTeam(this.team);\n    this.router.navigate(['/game']);\n  }\n\n  /** Called on submission of the form */\n  onSubmit() {\n    this.teamService.getTeamFromServer(this.team).subscribe(\n      team => {\n        if (team._id == null) {\n          this.submitted = true;\n          this.teamService.save(this.team).subscribe(\n            newTeam => {\n              this.team = newTeam;\n              this.teamService.setTeam(newTeam);\n            }\n          );\n        } else if (team.timeEnded) {\n          this.submitted = false;\n        } else {\n          this.submitted = true;\n          this.team = team;\n          this.teamService.setTeam(this.team);\n        }\n      }\n    );\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Instructions\n    \n  \n  \n    \n      \n        Game Instructions\n      \n    \n    The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if\n    that guess isn't correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to\n    answer them and whether or not this is their first guess:\n    \n    \n      Under 8 seconds: 4 points\n      Between 8 and 15 seconds: 3 points\n      Over 15 seconds: 2 points\n      On a second guess: 1 point\n    \n    There will also be a break of 5 minutes once roughly a third of the questions have been completed.\n      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.\n  \n  \n    \n      \n        Signup Instructions\n      \n    \n    Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don't\n    need to do anything else until the time of the competition. At the time of the competition, simply have each of your\n    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,\n    you might have one team enter 1 as their number, and the other team enter 2.\n  \n\n\n      Signup\n      \n        \n          \n        \n        \n          \n        \n        \n          School name and team already registered\n        \n        Submit\n      \n      \n        Start Game\n      \n\n\n  Signup\n  \n    Sorry, Registration is not available at this time, however, feel free to play a practice set\n  \n  Play practice set\n\n\n    \n\n    \n                \n                    signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Instructions                          Game Instructions              The game will consist of 200 questions. Each question has a time limit of 60 seconds for the first guess, and if    that guess isn\\'t correct, another 60 seconds for the second. Guesses are scored based on how long it takes the team to    answer them and whether or not this is their first guess:              Under 8 seconds: 4 points      Between 8 and 15 seconds: 3 points      Over 15 seconds: 2 points      On a second guess: 1 point        There will also be a break of 5 minutes once roughly a third of the questions have been completed.      And then another after the next third. Teams can choose to end this break early if they wish to keep playing.                      Signup Instructions              Signup is simple. Once you have registered to play and sent in your payment, you are essentially done! You don\\'t    need to do anything else until the time of the competition. At the time of the competition, simply have each of your    teams enter in the name of their school, and a unique number to that team. For example, if you have two teams competing,    you might have one team enter 1 as their number, and the other team enter 2.        Signup                                                                            School name and team already registered                Submit                    Start Game        Signup      Sorry, Registration is not available at this time, however, feel free to play a practice set    Play practice set'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Team.html":{"url":"classes/Team.html","title":"class - Team","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Team\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/team.ts\n        \n\n            \n                Description\n            \n            \n                Used to store team results \n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                    Optional\n                                currentQuestion\n                            \n                            \n                                    Public\n                                    Optional\n                                points\n                            \n                            \n                                    Public\n                                schoolName\n                            \n                            \n                                    Public\n                                teamNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                timeEnded\n                            \n                            \n                                    Public\n                                    Optional\n                                timeStarted\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schoolName: string, teamNumber: number, timeStarted?: number, timeEnded?: number, points?: number, currentQuestion?: number, token?: string, _id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/team.ts:2\n                            \n                        \n\n                \n                    \n                            Construct a Team object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        schoolName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the school that the competing team is from\n\n                                                        \n                                                \n                                                \n                                                        teamNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The number of the team from the school (in case schools have multiple teams)\n\n                                                        \n                                                \n                                                \n                                                        timeStarted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team began the game\n\n                                                        \n                                                \n                                                \n                                                        timeEnded\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The time at which the team finished the game\n\n                                                        \n                                                \n                                                \n                                                        points\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The number of points the team has earned\n\n                                                        \n                                                \n                                                \n                                                        currentQuestion\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The question that the team is currently on\n\n                                                        \n                                                \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The authorization token for the team\n\n                                                        \n                                                \n                                                \n                                                        _id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The ID given by the database for the team\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:30\n                            \n                        \n\n                \n                    \n                        The ID given by the database for the team\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            currentQuestion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:28\n                            \n                        \n\n                \n                    \n                        The question that the team is currently on\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            points\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:27\n                            \n                        \n\n                \n                    \n                        The number of points the team has earned\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            schoolName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:23\n                            \n                        \n\n                \n                    \n                        The name of the school that the competing team is from\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            teamNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:24\n                            \n                        \n\n                \n                    \n                        The number of the team from the school (in case schools have multiple teams)\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:26\n                            \n                        \n\n                \n                    \n                        The time at which the team finished the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            timeStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:25\n                            \n                        \n\n                \n                    \n                        The time at which the team began the game\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/models/team.ts:29\n                            \n                        \n\n                \n                    \n                        The authorization token for the team\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Team {\n  /**\n   * Construct a Team object\n   * @param schoolName\n   *  The name of the school that the competing team is from\n   * @param teamNumber\n   *  The number of the team from the school (in case schools have multiple teams)\n   * @param timeStarted\n   *  The time at which the team began the game\n   * @param timeEnded\n   *  The time at which the team finished the game\n   * @param points\n   *  The number of points the team has earned\n   * @param currentQuestion\n   *  The question that the team is currently on\n   * @param token\n   *  The authorization token for the team\n   * @param _id\n   *  The ID given by the database for the team\n   */\n  constructor(\n    public schoolName: string,\n    public teamNumber: number,\n    public timeStarted?: number,\n    public timeEnded?: number,\n    public points?: number,\n    public currentQuestion?: number,\n    public token?: string,\n    public _id?: string\n  ) {  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TeamService.html":{"url":"injectables/TeamService.html","title":"injectable - TeamService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TeamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/team.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides server functionality related to the team class \n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                practice\n                            \n                            \n                                    Private\n                                team\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPractice\n                            \n                            \n                                getTeam\n                            \n                            \n                                getTeamFromServer\n                            \n                            \n                                getToken\n                            \n                            \n                                    Private\n                                post\n                            \n                            \n                                    Private\n                                put\n                            \n                            \n                                save\n                            \n                            \n                                setPractice\n                            \n                            \n                                setTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPractice\n                        \n                        \n                    \n                \n            \n            \n                \ngetPractice()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:39\n                \n            \n\n\n            \n                \n                    Gets the value of the practice variable. \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeam\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeam()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:29\n                \n            \n\n\n            \n                \n                    Gets the team from storage \n\n\n                    \n                        Returns :         Team\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeamFromServer\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeamFromServer(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:86\n                \n            \n\n\n            \n                \n                    Retrieves the team from the server \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:48\n                \n            \n\n\n            \n                \n                    Gets the value of the authorization token from the currently loaded team\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The token if it exists; otherwise an empty string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:62\n                \n            \n\n\n            \n                \n                    Requests the server to add a new team\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        The team with a new _id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:69\n                \n            \n\n\n            \n                \n                    Requests the server to update a team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:75\n                \n            \n\n\n            \n                \n                    Requests the server to save team data \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPractice\n                        \n                        \n                    \n                \n            \n            \n                \nsetPractice(practice: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:34\n                \n            \n\n\n            \n                \n                    Sets the value of the practice variable \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    practice\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTeam\n                        \n                        \n                    \n                \n            \n            \n                \nsetTeam(team: Team)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/team.service.ts:24\n                \n            \n\n\n            \n                \n                    Sets the team \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    team\n                                    \n                                                Team\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            practice\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:21\n                            \n                        \n\n                \n                    \n                        Whether or not this is a practice game \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            team\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Team\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/team.service.ts:19\n                            \n                        \n\n                \n                    \n                        The Team object which contains identifying information about the user \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { handleError, httpOptionsJSON, URI } from '../constants';\nimport { Team } from '../models/team';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides server functionality related to the team class */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** The Team object which contains identifying information about the user */\n  private team: Team;\n  /** Whether or not this is a practice game */\n  private practice: boolean;\n\n  /** Sets the [team]{@link #team} */\n  setTeam(team: Team) {\n    this.team = team;\n  }\n\n  /** Gets the [team]{@link #team} from storage */\n  getTeam(): Team {\n    return this.team;\n  }\n\n  /** Sets the value of the [practice]{@link #practice} variable */\n  setPractice(practice: boolean) {\n    this.practice = practice;\n  }\n\n  /** Gets the value of the [practice]{@link #practice} variable. */\n  getPractice(): boolean {\n    return this.practice;\n  }\n\n  /**\n   * Gets the value of the authorization token from the currently loaded team\n   * @returns\n   *  The token if it exists; otherwise an empty string\n   */\n  getToken(): string {\n    const token = this.team.token;\n    if (token) {\n      return token;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Requests the server to add a new team\n   * @returns\n   *  The team with a new _id\n   */\n  private post(team: Team): Observable {\n    return this.http.post(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n\n  /** Requests the server to update a team */\n  private put(team: Team): Observable {\n    return this.http.put(URI.TEAM.SAVE, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n  /** Requests the server to save team data */\n  save(team: Team): Observable  {\n    if (this.practice) {\n      return of(team);\n    }\n    if (team._id) {\n      return this.put(team);\n    }\n    return this.post(team);\n  }\n\n  /** Retrieves the team from the server */\n  getTeamFromServer(team: Team): Observable {\n    return this.http.put(URI.TEAM.GET, team, httpOptionsJSON).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeService.html":{"url":"injectables/TimeService.html","title":"injectable - TimeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TimeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/time.service.ts\n        \n\n            \n                Description\n            \n            \n                Provides functionality related to time \n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCanStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCanStart\n                        \n                        \n                    \n                \n            \n            \n                \ngetCanStart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/time.service.ts:18\n                \n            \n\n\n            \n                \n                    Find out if we can start the game using the competition questions (as opposed to the practice ones) \n\n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { handleError, URI } from '../constants';\nimport { catchError } from 'rxjs/operators';\n\n/** Provides functionality related to time */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeService {\n\n  /** @ignore */\n  constructor(private http: HttpClient) { }\n\n  /** Find out if we can start the game using the competition questions (as opposed to the practice ones) */\n  getCanStart(): Observable {\n    return this.http.get(URI.DATE.CAN_START).pipe(\n      catchError(handleError)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        Displays a simple clock with seconds and tenths of seconds \n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                timer.component.css\n            \n\n\n\n            \n                templateUrl\n                timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callback\n                            \n                            \n                                milliseconds\n                            \n                            \n                                    Private\n                                millisecondsTimeout\n                            \n                            \n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkInterval\n                            \n                            \n                                clearInterval\n                            \n                            \n                                reset\n                            \n                            \n                                restart\n                            \n                            \n                                setInterval\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                started\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    seconds\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        started\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:16\n                            \n                        \n                \n                    \n                        Emitted when timer is started \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            checkInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:74\n                \n            \n\n\n            \n                \n                    Checks if it's time to call the function, and if so, calls it \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clearInterval\n                        \n                        \n                    \n                \n            \n            \n                \nclearInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:28\n                \n            \n\n\n            \n                \n                    Clears the current interval \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:33\n                \n            \n\n\n            \n                \n                    Resets the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \nrestart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:37\n                \n            \n\n\n            \n                \n                    Stops, resets and starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setInterval\n                        \n                        \n                    \n                \n            \n            \n                \nsetInterval(callback: () => void, mseconds: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:43\n                \n            \n\n\n            \n                \n                    After the given interval in milliseconds, calls the given function \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mseconds\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            start\n                        \n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Starts the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/timer/timer.component.ts:62\n                \n            \n\n\n            \n                \n                    Stops the timer \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        Function to call every interval \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            milliseconds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:18\n                            \n                        \n\n                \n                    \n                        Current milliseconds on timer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            millisecondsTimeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:25\n                            \n                        \n\n                \n                    \n                        Time between intervals \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/components/timer/timer.component.ts:20\n                            \n                        \n\n                \n                    \n                        Holds variable for setInterval() \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        seconds\n                    \n                \n\n                \n                    \n                        getseconds()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/timer/timer.component.ts:69\n                                \n                            \n                    \n                        \n                                Returns seconds \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\n\n/** Displays a simple clock with seconds and tenths of seconds */\n@Component({\n  selector: 'app-timer',\n  templateUrl: 'timer.component.html',\n  styleUrls: ['timer.component.css']\n})\nexport class TimerComponent {\n  /*\n  TODO I actually think the Timer setInterval() function is a setTimeout(), and worse, it may rely on the callback\n      function to prevent it from calling the callback function more than once. If so, this is not good.\n   */\n\n  /** Emitted when timer is started */\n  @Output() started = new EventEmitter();\n  /** Current milliseconds on timer */\n  milliseconds = 0;\n  /** Holds variable for setInterval() */\n  timer: number;\n\n  /** Function to call every interval */\n  private callback: () => void;\n  /** Time between intervals */\n  private millisecondsTimeout: number;\n\n  /** Clears the current interval */\n  clearInterval() {\n    this.callback = undefined;\n    this.millisecondsTimeout = undefined;\n  }\n  /** Resets the timer */\n  reset() {\n    this.milliseconds = 0.0;\n  }\n  /** Stops, resets and starts the timer */\n  restart() {\n    this.stop();\n    this.reset();\n    this.start();\n  }\n  /** After the given interval in milliseconds, calls the given function */\n  setInterval(callback: () => void, mseconds: number) {\n    this.callback = callback;\n    this.millisecondsTimeout = mseconds;\n  }\n  /** Starts the timer */\n  start() {\n    if (!this.timer) {\n      let time = Date.now();\n      this.timer = window.setInterval(() => {\n        this.milliseconds += Date.now() - time;\n        time = Date.now();\n        if (this.callback) {\n          this.checkInterval();\n        }\n      }, 100);\n    }\n    this.started.emit(null);\n  }\n  /** Stops the timer */\n  stop() {\n    window.clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n  /** Returns seconds */\n  // find a way to have this return a number instead\n  get seconds(): string {\n    return (this.milliseconds / 1000).toFixed(1);\n  }\n\n  /** Checks if it's time to call the function, and if so, calls it */\n  private checkInterval() {\n    if (this.milliseconds >= this.millisecondsTimeout) {\n      this.callback();\n    }\n  }\n}\n\n    \n\n    \n        {{seconds}}\n\n    \n\n    \n                \n                    timer.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{seconds}}'\n    var COMPONENTS = [{'name': 'AdminComponent', 'selector': 'app-admin'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GameComponent', 'selector': 'app-game'},{'name': 'GameOverComponent', 'selector': 'app-game-over'},{'name': 'QuestionsComponent', 'selector': 'app-questions'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/material/material.module.ts\n            \n            variable\n            modules\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/components/questions/questions.component.ts\n            \n            component\n            QuestionsComponent\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/app/components/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            function\n            handleError\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            autoWrongGuess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            breakTime\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            correctColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            httpOptionsJSON\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            incorrectColor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants.ts\n            \n            variable\n            questionLoadDelay\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/interceptors/auth.interceptor.ts\n            \n            interceptor\n            AuthInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/models/question.ts\n            \n            class\n            Question\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/team.ts\n            \n            class\n            Team\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/app/pages/admin/admin.component.ts\n            \n            component\n            AdminComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/pages/game-over/game-over.component.ts\n            \n            component\n            GameOverComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/pages/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/pages/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/register.guard.ts\n            \n            guard\n            RegisterGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/team.service.ts\n            \n            injectable\n            TeamService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/services/time.service.ts\n            \n            injectable\n            TimeService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/testing/async-observable-helpers.ts\n            \n            function\n            asyncError\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.2\n        \n            @angular/cdk : ~8.0.1\n        \n            @angular/common : ~8.0.2\n        \n            @angular/compiler : ~8.0.2\n        \n            @angular/core : ~8.0.2\n        \n            @angular/forms : ~8.0.2\n        \n            @angular/material : ~8.0.1\n        \n            @angular/platform-browser : ~8.0.2\n        \n            @angular/platform-browser-dynamic : ~8.0.2\n        \n            @angular/router : ~8.0.2\n        \n            body-parser : ~1.18.3\n        \n            core-js : ^2.5.4\n        \n            express : ^4.17.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.23\n        \n            mongodb : ^3.2.7\n        \n            papaparse : ^5.0.0\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.9.0\n        \n            web-animations-js : github:angular/web-animations-js#release_pr208\n        \n            zone.js : ~0.9.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncData   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            asyncError   (src/.../async-observable-helpers.ts)\n                        \n                        \n                            handleError   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/testing/async-observable-helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncData\n                        \n                        \n                    \n                \n            \n            \n                \nasyncData(data)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable that emits-once and completes\nafter a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asyncError\n                        \n                        \n                    \n                \n            \n            \n                \nasyncError(errorObject: any)\n                \n            \n\n\n\n\n            \n                \n                    Create async observable error that errors\nafter a JS engine turn \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/app/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            handleError\n                        \n                        \n                    \n                \n            \n            \n                \nhandleError(error)\n                \n            \n\n\n\n\n            \n                \n                    The default error handling method for HTTP requests \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nVirtualQuiz\nThis project was generated with Angular CLI version 1.6.6.\nThis project is intended to be run on a Heroku server.\nDevelopment server\nRun npm start for a dev server. Then run the backend in a separate tab using npm run server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files, including on the backend.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the -prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\nQuestions and answers\nWhy don't you remove the database?\nA database is really overkill for the amount of data that the program has to store. It would probably be better to remove the dependency on a database and just use files to store results\nand the questions. The reason why this is not possible is because Heroku's file system is ephemeral - meaning that on every restart of the app, the file system is reset to the state it was at\nwhen the last successful deploy took place. Meaning all our files will be deleted. Thus, we need somewhere to store our persistent data and a database is as good as anything.\nWhy is the npm server script so weird?\nnpm run server is really weird because it uses npm-run-all to synchronously build, then run a script which uses npm-run-all to launch two scripts in parallel which both watch the ts files\nand recompile when they are changed and watch the js files and re-run them when they are changed. This is necessary because for some reason if there is no dist/server folder and nothing in it\nnodemon for some reason decides that the right command to use is the one from npm start - which is ng serve. However that is not the correct command to use in this instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MaterialModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminComponent\n\nAdminComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminComponent->AppModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGameComponent\n\nGameComponent\n\nAppModule -->\n\nGameComponent->AppModule\n\n\n\n\n\nGameOverComponent\n\nGameOverComponent\n\nAppModule -->\n\nGameOverComponent->AppModule\n\n\n\n\n\nQuestionsComponent\n\nQuestionsComponent\n\nAppModule -->\n\nQuestionsComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nMaterialModule\n\nMaterialModule\n\nAppModule -->\n\nMaterialModule->AppModule\n\n\n\n\n\nAuthInterceptor\n\nAuthInterceptor\n\nAppModule -->\n\nAuthInterceptor->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        6 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nFixes and tweaks\n  TODO Beautification\n  TODO Conform totally with style guide guidelines\nNon-essential, Long term:\n  TODO Error handling and testing\n  TODO Offline version in case of emergencies?\n  TODO Categories before loading of question?\n  TODO would be nice to have an offline version for testing purposes - this mostly refers to database.\n  todo add unit tests. (why though? what can unit tests tell you here?)\n  todo add integration tests.\nTODO The progress bar shows questions completed. Should there also be a question # on to avoid confusion?\nTODO need to account for internet failures and outages. Continue sending save requests.\nTODO Develop vq prescribed distribution (distribution of questions that is, so that we dont end up with a million pop\n  culture or chemistry questions)\nTODO Keep backlog of questions in google drive\nTODO Keep backlog of useful statistics on questions\nTODO Automatically generate useful statistics on current questions\nTODO improve readme\nTODO add compodoc for documentation\nTODO make it so that teams actually need a code or something to play?\nTODO thoroughly test new features\nTODO create admin interface that has the following functionality:\n  Button to download/view error logging\n  Built in documentation\n    - common potential issues with csv parsing; caveats; etc.\n  Store token in localStorage?\nTODO There are a lot of new ways to do things that might be worth looking in to\ntodo only send one question at a time, and only allow each user to see each question once. If already seen,\n    and not currently looking at in game, then dont accept answers or new requests for it from that user. (would also fix\n    back button issue)\n     - this of course can still be exploited by creating a different user to look at the questions\n  - Can you use route guards to help secure api?\nTODO make sure admin console always auto scrolls to bottom when new input comes in\ntodo what if connection to db fails?\nTODO finish converting server side to typescript\n    Add types\n    maybe make async? Look at https://developer.okta.com/blog/2018/10/30/basic-crud-angular-and-node or possibly newer examples\nTODO maybe some issues with strings and weird stuff in services in angular can fix with res.send() instead of res.json\ntodo may want to look into using webpack to package backend into a single file (be sure to minify). Last time tried though\n  there was an issue with the code not using the proper directory to look for things (specifically the practice questions)\n  this may not be an issue now that you have eliminated file io in favor of database transactions\ntodo could make one command to do it all: pipe output away to focus on errors (syntax works on DOS)\ntodo look into morgan for logging on server side\ntodo inform people not to sign up until ready to play (and include faq in admin to say this too and how to fix it) (tokens\n  may expire)\ntodo slight problem with reexporting URI in ts - it isn't watched by ng serve so if a new thing is changed or added you\n  have to restart ng for it to recognize it\ntodo in order for the routes' middleware to be separate, the namespaces have to be separate: https://expressjs.com/en/4x/api.html#router\n   fixed by instead providing middleware that authorizes user to every endpoint that requires it. May be a better solution\ntodo encryption for admin password\ntodo it appears that formBuilders are now the standard way to do forms in angular. Might be worth converting.\ntodo observable based timer component? Or just look at timer component to see if good practices\n -- look at timers built in angular\ntodo exponential backoff for api requests perhaps? https://angular.io/guide/practical-observable-usage#exponential-backoff\ntodo read https://angular.io/guide/router#milestone-4-crisis-center-feature\ntodo download endpoints from server via config? This may help with the reexporting URI stuff - or it might not\ntodo add error handlers for http requests (res => {}, err => {})\ntodo make sure app automatically restarts\ntodo do you really have to include token in every user request? - no. You can reduce the amount of data by only including\n  the token in necessary requests - like check answer and get answers. Right now you are also sending it with save team\n  which occurs after every question.\ntodo maybe make question parser a little more answer-number-agnostic\ntodo should you be using ignore for the constructors? What could you document about them that would be at all helpful?\ntodo if team service wasn't injected as much as it is, would it lose access to the team object? Should probably have a single\n  method that returns the cached team if it is available, and gets it from the server if not (but how can it get it without\n  knowing which team it is?).\ntodo consider adding minutes to the timer for use for breaks\ntodo I feel like question component has to know a little too much from game component -> maybe it shouldn't be separate,\n  or it should somehow reduce its dependency on game component\ntodo could generate own ID for teams based on name + number\nChecked the difference if you were to send two indices instead of the answer string - difference in average byte amount\nwas about 7 or so bytes. Wasn't terribly worth it. In theory the byte difference should be a little greater than this.\nThe greatest increase in byte amount was brought about by the addition of a token to every answerCheck request. However,\nbandwidth at this point is really not a concern, especially when requests average under a kilobyte. Since there are 200\nquestions and 5 answers per question, this averages to around 1 megabyte per game session. This is minuscule.\nsize of vq before upgrade - 7.2 mb after - 1.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            autoWrongGuess   (src/.../constants.ts)\n                        \n                        \n                            breakTime   (src/.../constants.ts)\n                        \n                        \n                            correctColor   (src/.../constants.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpOptionsJSON   (src/.../constants.ts)\n                        \n                        \n                            incorrectColor   (src/.../constants.ts)\n                        \n                        \n                            modules   (src/.../material.module.ts)\n                        \n                        \n                            questionLoadDelay   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            autoWrongGuess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 60 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time before no answer is counted as an automatic incorrect guess, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            breakTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 300 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time each break lasts, in milliseconds \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            correctColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#009900'\n                        \n                    \n\n                \n                    \n                        The color of a correct answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            httpOptionsJSON\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}\n                        \n                    \n\n                \n                    \n                        Default json headers for put and post requests \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            incorrectColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '#e50000'\n                        \n                    \n\n                \n                    \n                        The color of an incorrect answer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            questionLoadDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 2 * 1000\n                        \n                    \n\n                \n                    \n                        The amount of time to wait between loading each question, in milliseconds \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n                \n                    \n                        Production environment \n\n                    \n                \n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n                \n                    \n                        Development environment \n\n                    \n                \n\n            \n        \n\n    src/app/components/material/material.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  MatButtonModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressBarModule,\n  MatExpansionModule\n]\n                        \n                    \n\n                \n                    \n                        Material modules to include \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
